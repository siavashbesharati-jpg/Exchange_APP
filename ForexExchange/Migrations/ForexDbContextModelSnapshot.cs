// <auto-generated />
using System;
using ForexExchange.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ForexExchange.Migrations
{
    [DbContext(typeof(ForexDbContext))]
    partial class ForexDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("ForexExchange.Models.AccountingDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ContentType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("BLOB");

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFrozen")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PayerBankAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PayerCustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PayerType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReceiverBankAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReceiverCustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReceiverType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("VerifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DocumentDate");

                    b.HasIndex("IsVerified");

                    b.HasIndex("PayerBankAccountId");

                    b.HasIndex("PayerCustomerId");

                    b.HasIndex("ReceiverBankAccountId");

                    b.HasIndex("ReceiverCustomerId");

                    b.HasIndex("ReferenceNumber");

                    b.HasIndex("Type");

                    b.ToTable("AccountingDocuments");
                });

            modelBuilder.Entity("ForexExchange.Models.AdminActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActivityType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdminUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.Property<string>("AdminUsername")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityType")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NewValue")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("OldValue")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActivityType");

                    b.HasIndex("AdminUserId");

                    b.HasIndex("Timestamp");

                    b.HasIndex("AdminUserId", "Timestamp");

                    b.ToTable("AdminActivities");
                });

            modelBuilder.Entity("ForexExchange.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NationalId")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ForexExchange.Models.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AccountBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AccountHolderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Branch")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CardNumberLast4")
                        .HasMaxLength(4)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IBAN")
                        .HasMaxLength(34)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountNumber");

                    b.HasIndex("IsDefault")
                        .HasFilter("[IsDefault] = 1");

                    b.HasIndex("CustomerId", "IsActive");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("ForexExchange.Models.BankAccountBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BankAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId", "CurrencyCode")
                        .IsUnique();

                    b.ToTable("BankAccountBalances");
                });

            modelBuilder.Entity("ForexExchange.Models.BankAccountBalanceHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("BalanceAfter")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("BalanceBefore")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("BankAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TransactionAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("TransactionType")
                        .HasMaxLength(50)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TransactionDate")
                        .HasDatabaseName("IX_BankAccountBalanceHistory_Date");

                    b.HasIndex("TransactionType", "ReferenceId")
                        .HasDatabaseName("IX_BankAccountBalanceHistory_Reference");

                    b.HasIndex("BankAccountId", "TransactionDate", "Id")
                        .HasDatabaseName("IX_BankAccountBalanceHistory_Account_Latest");

                    b.ToTable("BankAccountBalanceHistory");
                });

            modelBuilder.Entity("ForexExchange.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBaseCurrency")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("RatePriority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IsActive", "DisplayOrder");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "IRR",
                            CreatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 1,
                            IsActive = true,
                            IsBaseCurrency = true,
                            Name = "Iranian Toman",
                            PersianName = "تومان",
                            RatePriority = 0,
                            Symbol = "﷼"
                        },
                        new
                        {
                            Id = 2,
                            Code = "USD",
                            CreatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 4,
                            IsActive = true,
                            IsBaseCurrency = false,
                            Name = "US Dollar",
                            PersianName = "دلار آمریکا",
                            RatePriority = 0,
                            Symbol = "$"
                        },
                        new
                        {
                            Id = 3,
                            Code = "EUR",
                            CreatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 5,
                            IsActive = true,
                            IsBaseCurrency = false,
                            Name = "Euro",
                            PersianName = "یورو",
                            RatePriority = 0,
                            Symbol = "€"
                        },
                        new
                        {
                            Id = 4,
                            Code = "AED",
                            CreatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 3,
                            IsActive = true,
                            IsBaseCurrency = false,
                            Name = "UAE Dirham",
                            PersianName = "درهم امارات",
                            RatePriority = 0,
                            Symbol = "د.إ"
                        },
                        new
                        {
                            Id = 5,
                            Code = "OMR",
                            CreatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 2,
                            IsActive = true,
                            IsBaseCurrency = false,
                            Name = "Omani Rial",
                            PersianName = "ریال عمان",
                            RatePriority = 0,
                            Symbol = "ر.ع."
                        },
                        new
                        {
                            Id = 6,
                            Code = "TRY",
                            CreatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 6,
                            IsActive = true,
                            IsBaseCurrency = false,
                            Name = "Turkish Lira",
                            PersianName = "لیر ترکیه",
                            RatePriority = 0,
                            Symbol = "₺"
                        },
                        new
                        {
                            Id = 7,
                            Code = "CNY",
                            CreatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 7,
                            IsActive = true,
                            IsBaseCurrency = false,
                            Name = "Chinese Yuan",
                            PersianName = "یوان چین",
                            RatePriority = 0,
                            Symbol = "¥"
                        });
                });

            modelBuilder.Entity("ForexExchange.Models.CurrencyPool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActiveBuyOrderCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActiveSellOrderCount")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("RiskLevel")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalBought")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("TotalSold")
                        .HasColumnType("decimal(18,8)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId")
                        .IsUnique();

                    b.HasIndex("LastUpdated");

                    b.HasIndex("RiskLevel");

                    b.HasIndex("CurrencyId", "IsActive");

                    b.ToTable("CurrencyPools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActiveBuyOrderCount = 0,
                            ActiveSellOrderCount = 0,
                            Balance = 0m,
                            CurrencyCode = "",
                            CurrencyId = 1,
                            IsActive = true,
                            LastUpdated = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Iranian Toman pool - initial setup",
                            RiskLevel = 1,
                            TotalBought = 0m,
                            TotalSold = 0m
                        },
                        new
                        {
                            Id = 2,
                            ActiveBuyOrderCount = 0,
                            ActiveSellOrderCount = 0,
                            Balance = 0m,
                            CurrencyCode = "",
                            CurrencyId = 2,
                            IsActive = true,
                            LastUpdated = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "US Dollar pool - initial setup",
                            RiskLevel = 1,
                            TotalBought = 0m,
                            TotalSold = 0m
                        },
                        new
                        {
                            Id = 3,
                            ActiveBuyOrderCount = 0,
                            ActiveSellOrderCount = 0,
                            Balance = 0m,
                            CurrencyCode = "",
                            CurrencyId = 3,
                            IsActive = true,
                            LastUpdated = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Euro pool - initial setup",
                            RiskLevel = 1,
                            TotalBought = 0m,
                            TotalSold = 0m
                        },
                        new
                        {
                            Id = 4,
                            ActiveBuyOrderCount = 0,
                            ActiveSellOrderCount = 0,
                            Balance = 0m,
                            CurrencyCode = "",
                            CurrencyId = 4,
                            IsActive = true,
                            LastUpdated = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "UAE Dirham pool - initial setup",
                            RiskLevel = 1,
                            TotalBought = 0m,
                            TotalSold = 0m
                        },
                        new
                        {
                            Id = 5,
                            ActiveBuyOrderCount = 0,
                            ActiveSellOrderCount = 0,
                            Balance = 0m,
                            CurrencyCode = "",
                            CurrencyId = 5,
                            IsActive = true,
                            LastUpdated = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Omani Rial pool - initial setup",
                            RiskLevel = 1,
                            TotalBought = 0m,
                            TotalSold = 0m
                        },
                        new
                        {
                            Id = 6,
                            ActiveBuyOrderCount = 0,
                            ActiveSellOrderCount = 0,
                            Balance = 0m,
                            CurrencyCode = "",
                            CurrencyId = 6,
                            IsActive = true,
                            LastUpdated = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Turkish Lira pool - initial setup",
                            RiskLevel = 1,
                            TotalBought = 0m,
                            TotalSold = 0m
                        },
                        new
                        {
                            Id = 7,
                            ActiveBuyOrderCount = 0,
                            ActiveSellOrderCount = 0,
                            Balance = 0m,
                            CurrencyCode = "",
                            CurrencyId = 7,
                            IsActive = true,
                            LastUpdated = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Chinese Yuan pool - initial setup",
                            RiskLevel = 1,
                            TotalBought = 0m,
                            TotalSold = 0m
                        });
                });

            modelBuilder.Entity("ForexExchange.Models.CurrencyPoolHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("BalanceAfter")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("BalanceBefore")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PoolTransactionType")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TransactionAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("TransactionType")
                        .HasMaxLength(50)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TransactionDate")
                        .HasDatabaseName("IX_CurrencyPoolHistory_Date");

                    b.HasIndex("TransactionType", "ReferenceId")
                        .HasDatabaseName("IX_CurrencyPoolHistory_Reference");

                    b.HasIndex("CurrencyCode", "TransactionDate", "Id")
                        .HasDatabaseName("IX_CurrencyPoolHistory_Currency_Latest");

                    b.ToTable("CurrencyPoolHistory");
                });

            modelBuilder.Entity("ForexExchange.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ForexExchange.Models.CustomerBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId", "CurrencyCode")
                        .IsUnique();

                    b.ToTable("CustomerBalances");
                });

            modelBuilder.Entity("ForexExchange.Models.CustomerBalanceHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("BalanceAfter")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("BalanceBefore")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TransactionAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("TransactionType")
                        .HasMaxLength(50)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TransactionDate")
                        .HasDatabaseName("IX_CustomerBalanceHistory_Date");

                    b.HasIndex("TransactionType", "ReferenceId")
                        .HasDatabaseName("IX_CustomerBalanceHistory_Reference");

                    b.HasIndex("CustomerId", "CurrencyCode", "TransactionDate", "Id")
                        .HasDatabaseName("IX_CustomerBalanceHistory_Customer_Currency_Latest");

                    b.ToTable("CustomerBalanceHistory");
                });

            modelBuilder.Entity("ForexExchange.Models.DailyBalanceReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BankAccountBalancesJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerBalancesJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("GeneratedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("PoolBalancesJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TotalBalancesJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalValueInIRR")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("DailyBalanceReports");
                });

            modelBuilder.Entity("ForexExchange.Models.ExchangeRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("AverageBuyRate")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("AverageSellRate")
                        .HasColumnType("decimal(18,8)");

                    b.Property<int>("FromCurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,8)");

                    b.Property<int>("ToCurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalBuyVolume")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("TotalSellVolume")
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ToCurrencyId");

                    b.HasIndex("FromCurrencyId", "ToCurrencyId", "IsActive")
                        .IsUnique();

                    b.ToTable("ExchangeRates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FromCurrencyId = 1,
                            IsActive = true,
                            Rate = 68500m,
                            ToCurrencyId = 2,
                            TotalBuyVolume = 0m,
                            TotalSellVolume = 0m,
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 2,
                            FromCurrencyId = 1,
                            IsActive = true,
                            Rate = 72500m,
                            ToCurrencyId = 3,
                            TotalBuyVolume = 0m,
                            TotalSellVolume = 0m,
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 3,
                            FromCurrencyId = 1,
                            IsActive = true,
                            Rate = 18750m,
                            ToCurrencyId = 4,
                            TotalBuyVolume = 0m,
                            TotalSellVolume = 0m,
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 4,
                            FromCurrencyId = 1,
                            IsActive = true,
                            Rate = 178000m,
                            ToCurrencyId = 5,
                            TotalBuyVolume = 0m,
                            TotalSellVolume = 0m,
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 5,
                            FromCurrencyId = 1,
                            IsActive = true,
                            Rate = 2000m,
                            ToCurrencyId = 6,
                            TotalBuyVolume = 0m,
                            TotalSellVolume = 0m,
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 15,
                            FromCurrencyId = 1,
                            IsActive = true,
                            Rate = 9600m,
                            ToCurrencyId = 7,
                            TotalBuyVolume = 0m,
                            TotalSellVolume = 0m,
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 6,
                            FromCurrencyId = 2,
                            IsActive = true,
                            Rate = 0.000014598540145985401459854m,
                            ToCurrencyId = 1,
                            TotalBuyVolume = 0m,
                            TotalSellVolume = 0m,
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 7,
                            FromCurrencyId = 3,
                            IsActive = true,
                            Rate = 0.0000137931034482758620689655m,
                            ToCurrencyId = 1,
                            TotalBuyVolume = 0m,
                            TotalSellVolume = 0m,
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 8,
                            FromCurrencyId = 4,
                            IsActive = true,
                            Rate = 0.0000533333333333333333333333m,
                            ToCurrencyId = 1,
                            TotalBuyVolume = 0m,
                            TotalSellVolume = 0m,
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 9,
                            FromCurrencyId = 5,
                            IsActive = true,
                            Rate = 0.0000056179775280898876404494m,
                            ToCurrencyId = 1,
                            TotalBuyVolume = 0m,
                            TotalSellVolume = 0m,
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 10,
                            FromCurrencyId = 6,
                            IsActive = true,
                            Rate = 0.0005m,
                            ToCurrencyId = 1,
                            TotalBuyVolume = 0m,
                            TotalSellVolume = 0m,
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 16,
                            FromCurrencyId = 7,
                            IsActive = true,
                            Rate = 0.0001041666666666666666666667m,
                            ToCurrencyId = 1,
                            TotalBuyVolume = 0m,
                            TotalSellVolume = 0m,
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 11,
                            FromCurrencyId = 2,
                            IsActive = true,
                            Rate = 0.93m,
                            ToCurrencyId = 3,
                            TotalBuyVolume = 0m,
                            TotalSellVolume = 0m,
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 12,
                            FromCurrencyId = 2,
                            IsActive = true,
                            Rate = 3.68m,
                            ToCurrencyId = 4,
                            TotalBuyVolume = 0m,
                            TotalSellVolume = 0m,
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 13,
                            FromCurrencyId = 2,
                            IsActive = true,
                            Rate = 0.385m,
                            ToCurrencyId = 5,
                            TotalBuyVolume = 0m,
                            TotalSellVolume = 0m,
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 14,
                            FromCurrencyId = 2,
                            IsActive = true,
                            Rate = 34.85m,
                            ToCurrencyId = 6,
                            TotalBuyVolume = 0m,
                            TotalSellVolume = 0m,
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 17,
                            FromCurrencyId = 2,
                            IsActive = true,
                            Rate = 7.14m,
                            ToCurrencyId = 7,
                            TotalBuyVolume = 0m,
                            TotalSellVolume = 0m,
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("ForexExchange.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CustomerId", "IsRead");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ForexExchange.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BankAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FromAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FromCurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFrozen")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("ToAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ToCurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ToCurrencyId");

                    b.HasIndex("FromCurrencyId", "ToCurrencyId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ForexExchange.Models.PushNotificationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int?>("HttpStatusCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("PushSubscriptionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SendDurationMs")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("WasSuccessful")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PushSubscriptionId");

                    b.HasIndex("SentAt");

                    b.HasIndex("WasSuccessful");

                    b.ToTable("PushNotificationLogs");
                });

            modelBuilder.Entity("ForexExchange.Models.PushSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("FailedNotifications")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastNotificationSent")
                        .HasColumnType("TEXT");

                    b.Property<string>("P256dhKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("SuccessfulNotifications")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId1")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Endpoint");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.HasIndex("IsActive", "UserId");

                    b.ToTable("PushSubscriptions");
                });

            modelBuilder.Entity("ForexExchange.Models.ShareableLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("LinkType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("IsActive", "ExpiresAt");

                    b.ToTable("ShareableLinks");
                });

            modelBuilder.Entity("ForexExchange.Models.SystemSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SettingKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SettingKey")
                        .IsUnique();

                    b.ToTable("SystemSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            DataType = "decimal",
                            Description = "نرخ کمیسیون به درصد",
                            IsActive = true,
                            SettingKey = "COMMISSION_RATE",
                            SettingValue = "0.5",
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            DataType = "decimal",
                            Description = "کارمزد تبدیل ارز به درصد",
                            IsActive = true,
                            SettingKey = "EXCHANGE_FEE_RATE",
                            SettingValue = "0.2",
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            DataType = "decimal",
                            Description = "حداقل مبلغ تراکنش به تومان",
                            IsActive = true,
                            SettingKey = "MIN_TRANSACTION_AMOUNT",
                            SettingValue = "10000",
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            DataType = "decimal",
                            Description = "حداکثر مبلغ تراکنش به تومان",
                            IsActive = true,
                            SettingKey = "MAX_TRANSACTION_AMOUNT",
                            SettingValue = "1000000000",
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            DataType = "decimal",
                            Description = "محدودیت تراکنش روزانه به تومان",
                            IsActive = true,
                            SettingKey = "DAILY_TRANSACTION_LIMIT",
                            SettingValue = "5000000000",
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            DataType = "bool",
                            Description = "حالت تعمیرات سیستم",
                            IsActive = true,
                            SettingKey = "SYSTEM_MAINTENANCE",
                            SettingValue = "false",
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            DataType = "string",
                            Description = "ارز پیش‌فرض سیستم",
                            IsActive = true,
                            SettingKey = "DEFAULT_CURRENCY",
                            SettingValue = "USD",
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            DataType = "int",
                            Description = "بازه بروزرسانی نرخ ارز به دقیقه",
                            IsActive = true,
                            SettingKey = "RATE_UPDATE_INTERVAL",
                            SettingValue = "60",
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            DataType = "bool",
                            Description = "فعال‌سازی سیستم اعلان‌ها",
                            IsActive = true,
                            SettingKey = "NOTIFICATION_ENABLED",
                            SettingValue = "true",
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            DataType = "bool",
                            Description = "فعال‌سازی پشتیبان‌گیری خودکار",
                            IsActive = true,
                            SettingKey = "BACKUP_ENABLED",
                            SettingValue = "true",
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("ForexExchange.Models.VapidConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApplicationId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<long>("NotificationsSent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PrivateKey")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsActive");

                    b.ToTable("VapidConfigurations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ForexExchange.Models.AccountingDocument", b =>
                {
                    b.HasOne("ForexExchange.Models.BankAccount", "PayerBankAccount")
                        .WithMany()
                        .HasForeignKey("PayerBankAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ForexExchange.Models.Customer", "PayerCustomer")
                        .WithMany()
                        .HasForeignKey("PayerCustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ForexExchange.Models.BankAccount", "ReceiverBankAccount")
                        .WithMany()
                        .HasForeignKey("ReceiverBankAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ForexExchange.Models.Customer", "ReceiverCustomer")
                        .WithMany()
                        .HasForeignKey("ReceiverCustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PayerBankAccount");

                    b.Navigation("PayerCustomer");

                    b.Navigation("ReceiverBankAccount");

                    b.Navigation("ReceiverCustomer");
                });

            modelBuilder.Entity("ForexExchange.Models.ApplicationUser", b =>
                {
                    b.HasOne("ForexExchange.Models.Customer", "Customer")
                        .WithOne()
                        .HasForeignKey("ForexExchange.Models.ApplicationUser", "CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ForexExchange.Models.BankAccount", b =>
                {
                    b.HasOne("ForexExchange.Models.Customer", "Customer")
                        .WithMany("BankAccounts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ForexExchange.Models.BankAccountBalance", b =>
                {
                    b.HasOne("ForexExchange.Models.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccount");
                });

            modelBuilder.Entity("ForexExchange.Models.BankAccountBalanceHistory", b =>
                {
                    b.HasOne("ForexExchange.Models.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BankAccount");
                });

            modelBuilder.Entity("ForexExchange.Models.CurrencyPool", b =>
                {
                    b.HasOne("ForexExchange.Models.Currency", "Currency")
                        .WithMany("CurrencyPools")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("ForexExchange.Models.CustomerBalance", b =>
                {
                    b.HasOne("ForexExchange.Models.Customer", "Customer")
                        .WithMany("Balances")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ForexExchange.Models.CustomerBalanceHistory", b =>
                {
                    b.HasOne("ForexExchange.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ForexExchange.Models.ExchangeRate", b =>
                {
                    b.HasOne("ForexExchange.Models.Currency", "FromCurrency")
                        .WithMany("FromCurrencyRates")
                        .HasForeignKey("FromCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ForexExchange.Models.Currency", "ToCurrency")
                        .WithMany("ToCurrencyRates")
                        .HasForeignKey("ToCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromCurrency");

                    b.Navigation("ToCurrency");
                });

            modelBuilder.Entity("ForexExchange.Models.Notification", b =>
                {
                    b.HasOne("ForexExchange.Models.Customer", "Customer")
                        .WithMany("Notifications")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ForexExchange.Models.Order", b =>
                {
                    b.HasOne("ForexExchange.Models.BankAccount", null)
                        .WithMany("Orders")
                        .HasForeignKey("BankAccountId");

                    b.HasOne("ForexExchange.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ForexExchange.Models.Currency", "FromCurrency")
                        .WithMany("FromCurrencyOrders")
                        .HasForeignKey("FromCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ForexExchange.Models.Currency", "ToCurrency")
                        .WithMany("ToCurrencyOrders")
                        .HasForeignKey("ToCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("FromCurrency");

                    b.Navigation("ToCurrency");
                });

            modelBuilder.Entity("ForexExchange.Models.PushNotificationLog", b =>
                {
                    b.HasOne("ForexExchange.Models.PushSubscription", "PushSubscription")
                        .WithMany()
                        .HasForeignKey("PushSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PushNotificationLogs_PushSubscriptions_PushSubscriptionId");

                    b.Navigation("PushSubscription");
                });

            modelBuilder.Entity("ForexExchange.Models.PushSubscription", b =>
                {
                    b.HasOne("ForexExchange.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PushSubscriptions_AspNetUsers_UserId");

                    b.HasOne("ForexExchange.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ForexExchange.Models.ShareableLink", b =>
                {
                    b.HasOne("ForexExchange.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ForexExchange.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ForexExchange.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ForexExchange.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ForexExchange.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ForexExchange.Models.BankAccount", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ForexExchange.Models.Currency", b =>
                {
                    b.Navigation("CurrencyPools");

                    b.Navigation("FromCurrencyOrders");

                    b.Navigation("FromCurrencyRates");

                    b.Navigation("ToCurrencyOrders");

                    b.Navigation("ToCurrencyRates");
                });

            modelBuilder.Entity("ForexExchange.Models.Customer", b =>
                {
                    b.Navigation("Balances");

                    b.Navigation("BankAccounts");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
