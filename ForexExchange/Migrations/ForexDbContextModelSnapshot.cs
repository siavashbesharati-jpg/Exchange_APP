// <auto-generated />
using System;
using ForexExchange.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ForexExchange.Migrations
{
    [DbContext(typeof(ForexDbContext))]
    partial class ForexDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("ForexExchange.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NationalId")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ForexExchange.Models.CurrencyPool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("AverageBuyRate")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("AverageSellRate")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,8)");

                    b.Property<int>("Currency")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("RiskLevel")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalBought")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("TotalSold")
                        .HasColumnType("decimal(18,8)");

                    b.HasKey("Id");

                    b.HasIndex("Currency")
                        .IsUnique();

                    b.HasIndex("LastUpdated");

                    b.HasIndex("RiskLevel");

                    b.HasIndex("Currency", "IsActive");

                    b.ToTable("CurrencyPools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 0m,
                            Currency = 0,
                            CurrencyCode = "Toman",
                            IsActive = true,
                            LastUpdated = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Iranian Toman pool - initial setup",
                            RiskLevel = 1,
                            TotalBought = 0m,
                            TotalSold = 0m
                        },
                        new
                        {
                            Id = 2,
                            Balance = 0m,
                            Currency = 1,
                            CurrencyCode = "USD",
                            IsActive = true,
                            LastUpdated = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "US Dollar pool - initial setup",
                            RiskLevel = 1,
                            TotalBought = 0m,
                            TotalSold = 0m
                        },
                        new
                        {
                            Id = 3,
                            Balance = 0m,
                            Currency = 2,
                            CurrencyCode = "EUR",
                            IsActive = true,
                            LastUpdated = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Euro pool - initial setup",
                            RiskLevel = 1,
                            TotalBought = 0m,
                            TotalSold = 0m
                        },
                        new
                        {
                            Id = 4,
                            Balance = 0m,
                            Currency = 3,
                            CurrencyCode = "AED",
                            IsActive = true,
                            LastUpdated = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "UAE Dirham pool - initial setup",
                            RiskLevel = 1,
                            TotalBought = 0m,
                            TotalSold = 0m
                        },
                        new
                        {
                            Id = 5,
                            Balance = 0m,
                            Currency = 4,
                            CurrencyCode = "OMR",
                            IsActive = true,
                            LastUpdated = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Omani Rial pool - initial setup",
                            RiskLevel = 1,
                            TotalBought = 0m,
                            TotalSold = 0m
                        },
                        new
                        {
                            Id = 6,
                            Balance = 0m,
                            Currency = 5,
                            CurrencyCode = "TRY",
                            IsActive = true,
                            LastUpdated = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Turkish Lira pool - initial setup",
                            RiskLevel = 1,
                            TotalBought = 0m,
                            TotalSold = 0m
                        });
                });

            modelBuilder.Entity("ForexExchange.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ForexExchange.Models.ExchangeRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("BuyRate")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("Currency")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FromCurrency")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SellRate")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("ToCurrency")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Currency", "IsActive");

                    b.HasIndex("FromCurrency", "ToCurrency", "IsActive")
                        .IsUnique();

                    b.ToTable("ExchangeRates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BuyRate = 68000m,
                            Currency = 0,
                            FromCurrency = 0,
                            IsActive = true,
                            SellRate = 69000m,
                            ToCurrency = 1,
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 2,
                            BuyRate = 72000m,
                            Currency = 0,
                            FromCurrency = 0,
                            IsActive = true,
                            SellRate = 73000m,
                            ToCurrency = 2,
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 3,
                            BuyRate = 18500m,
                            Currency = 0,
                            FromCurrency = 0,
                            IsActive = true,
                            SellRate = 19000m,
                            ToCurrency = 3,
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 4,
                            BuyRate = 177000m,
                            Currency = 0,
                            FromCurrency = 0,
                            IsActive = true,
                            SellRate = 179000m,
                            ToCurrency = 4,
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 5,
                            BuyRate = 1950m,
                            Currency = 0,
                            FromCurrency = 0,
                            IsActive = true,
                            SellRate = 2050m,
                            ToCurrency = 5,
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 6,
                            BuyRate = 0.0000144927536231884057971014m,
                            Currency = 1,
                            FromCurrency = 1,
                            IsActive = true,
                            SellRate = 0.0000147058823529411764705882m,
                            ToCurrency = 0,
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 7,
                            BuyRate = 0.000013698630136986301369863m,
                            Currency = 2,
                            FromCurrency = 2,
                            IsActive = true,
                            SellRate = 0.0000138888888888888888888889m,
                            ToCurrency = 0,
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 8,
                            BuyRate = 0.0000526315789473684210526316m,
                            Currency = 3,
                            FromCurrency = 3,
                            IsActive = true,
                            SellRate = 0.0000540540540540540540540541m,
                            ToCurrency = 0,
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 9,
                            BuyRate = 0.0000055865921787709497206704m,
                            Currency = 4,
                            FromCurrency = 4,
                            IsActive = true,
                            SellRate = 0.0000056497175141242937853107m,
                            ToCurrency = 0,
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 10,
                            BuyRate = 0.000487804878048780487804878m,
                            Currency = 5,
                            FromCurrency = 5,
                            IsActive = true,
                            SellRate = 0.0005128205128205128205128205m,
                            ToCurrency = 0,
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 11,
                            BuyRate = 0.92m,
                            Currency = 1,
                            FromCurrency = 1,
                            IsActive = true,
                            SellRate = 0.94m,
                            ToCurrency = 2,
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 12,
                            BuyRate = 3.67m,
                            Currency = 1,
                            FromCurrency = 1,
                            IsActive = true,
                            SellRate = 3.69m,
                            ToCurrency = 3,
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 13,
                            BuyRate = 0.384m,
                            Currency = 1,
                            FromCurrency = 1,
                            IsActive = true,
                            SellRate = 0.386m,
                            ToCurrency = 4,
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 14,
                            BuyRate = 34.5m,
                            Currency = 1,
                            FromCurrency = 1,
                            IsActive = true,
                            SellRate = 35.2m,
                            ToCurrency = 5,
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("ForexExchange.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CustomerId", "IsRead");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ForexExchange.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Currency")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("FilledAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FromCurrency")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderType")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ToCurrency")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalInToman")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Status");

                    b.HasIndex("FromCurrency", "ToCurrency");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ForexExchange.Models.Receipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExtractedText")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("OcrText")
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParsedAccountNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParsedAmount")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParsedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParsedReferenceId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("ForexExchange.Models.SystemSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SettingKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SettingKey")
                        .IsUnique();

                    b.ToTable("SystemSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            DataType = "decimal",
                            Description = "نرخ کمیسیون به درصد",
                            IsActive = true,
                            SettingKey = "COMMISSION_RATE",
                            SettingValue = "0.5",
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            DataType = "decimal",
                            Description = "کارمزد تبدیل ارز به درصد",
                            IsActive = true,
                            SettingKey = "EXCHANGE_FEE_RATE",
                            SettingValue = "0.2",
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            DataType = "decimal",
                            Description = "حداقل مبلغ تراکنش به تومان",
                            IsActive = true,
                            SettingKey = "MIN_TRANSACTION_AMOUNT",
                            SettingValue = "10000",
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            DataType = "decimal",
                            Description = "حداکثر مبلغ تراکنش به تومان",
                            IsActive = true,
                            SettingKey = "MAX_TRANSACTION_AMOUNT",
                            SettingValue = "1000000000",
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            DataType = "decimal",
                            Description = "محدودیت تراکنش روزانه به تومان",
                            IsActive = true,
                            SettingKey = "DAILY_TRANSACTION_LIMIT",
                            SettingValue = "5000000000",
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            DataType = "bool",
                            Description = "حالت تعمیرات سیستم",
                            IsActive = true,
                            SettingKey = "SYSTEM_MAINTENANCE",
                            SettingValue = "false",
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            DataType = "string",
                            Description = "ارز پیش‌فرض سیستم",
                            IsActive = true,
                            SettingKey = "DEFAULT_CURRENCY",
                            SettingValue = "USD",
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            DataType = "int",
                            Description = "بازه بروزرسانی نرخ ارز به دقیقه",
                            IsActive = true,
                            SettingKey = "RATE_UPDATE_INTERVAL",
                            SettingValue = "60",
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            DataType = "bool",
                            Description = "فعال‌سازی سیستم اعلان‌ها",
                            IsActive = true,
                            SettingKey = "NOTIFICATION_ENABLED",
                            SettingValue = "true",
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            DataType = "bool",
                            Description = "فعال‌سازی پشتیبان‌گیری خودکار",
                            IsActive = true,
                            SettingKey = "BACKUP_ENABLED",
                            SettingValue = "true",
                            UpdatedAt = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("ForexExchange.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BuyOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BuyerBankAccount")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("BuyerCustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Currency")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FromCurrency")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("SellOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SellerBankAccount")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("SellerCustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ToCurrency")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalInToman")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BuyOrderId");

                    b.HasIndex("BuyerCustomerId");

                    b.HasIndex("SellOrderId");

                    b.HasIndex("SellerCustomerId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ForexExchange.Models.ApplicationUser", b =>
                {
                    b.HasOne("ForexExchange.Models.Customer", "Customer")
                        .WithOne()
                        .HasForeignKey("ForexExchange.Models.ApplicationUser", "CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ForexExchange.Models.Notification", b =>
                {
                    b.HasOne("ForexExchange.Models.Customer", "Customer")
                        .WithMany("Notifications")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ForexExchange.Models.Order", b =>
                {
                    b.HasOne("ForexExchange.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ForexExchange.Models.Receipt", b =>
                {
                    b.HasOne("ForexExchange.Models.Customer", "Customer")
                        .WithMany("Receipts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ForexExchange.Models.Order", "Order")
                        .WithMany("Receipts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ForexExchange.Models.Transaction", "Transaction")
                        .WithMany("Receipts")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("Order");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("ForexExchange.Models.Transaction", b =>
                {
                    b.HasOne("ForexExchange.Models.Order", "BuyOrder")
                        .WithMany("Transactions")
                        .HasForeignKey("BuyOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ForexExchange.Models.Customer", "BuyerCustomer")
                        .WithMany("BuyTransactions")
                        .HasForeignKey("BuyerCustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ForexExchange.Models.Order", "SellOrder")
                        .WithMany()
                        .HasForeignKey("SellOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ForexExchange.Models.Customer", "SellerCustomer")
                        .WithMany("SellTransactions")
                        .HasForeignKey("SellerCustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BuyOrder");

                    b.Navigation("BuyerCustomer");

                    b.Navigation("SellOrder");

                    b.Navigation("SellerCustomer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ForexExchange.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ForexExchange.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ForexExchange.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ForexExchange.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ForexExchange.Models.Customer", b =>
                {
                    b.Navigation("BuyTransactions");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("Receipts");

                    b.Navigation("SellTransactions");
                });

            modelBuilder.Entity("ForexExchange.Models.Order", b =>
                {
                    b.Navigation("Receipts");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("ForexExchange.Models.Transaction", b =>
                {
                    b.Navigation("Receipts");
                });
#pragma warning restore 612, 618
        }
    }
}
