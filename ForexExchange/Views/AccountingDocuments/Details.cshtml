@model ForexExchange.Models.AccountingDocument

@{
    ViewData["Title"] = $"جزئیات سند حسابداری #{Model.Id}";
}

<style>
    .document-paper {
        background: #fff;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1), 0 6px 20px rgba(0,0,0,0.1);
        border: 1px solid #ddd;
        margin: 20px auto;
        max-width: 800px;
        min-height: 600px;
        position: relative;
    }
    
    .document-paper::before {
        content: '';
        position: absolute;
        left: 40px;
        top: 0;
        bottom: 0;
        width: 2px;
        background: #ff9999;
        z-index: 1;
    }
    
    .document-header {
        border-bottom: 3px double #333;
        padding: 20px 60px;
        text-align: center;
        background: linear-gradient(to bottom, #f9f9f9, #fff);
        position: relative;
    }
    
    .company-info {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 20px;
        gap: 15px;
    }
    
    .company-logo {
        width: 60px;
        height: 60px;
    }
    
    .company-name {
        font-size: 20px;
        font-weight: bold;
        color: #2c3e50;
    }
    
    .document-content {
        padding: 40px 60px;
        line-height: 1.0;
        font-family: 'Tahoma', sans-serif;
        position: relative;
        background: repeating-linear-gradient(
            transparent,
            transparent 35px,
            #e8f4fd 35px,
            #e8f4fd 36px
        );
    }
    
    .document-title {
        font-size: 24px;
        font-weight: bold;
        color: #2c3e50;
        margin-bottom: 10px;
        text-decoration: underline;
    }
    
    .document-number {
        font-size: 16px;
        color: #7f8c8d;
        margin-bottom: 20px;
    }
    
    .document-row {
        display: flex;
        margin-bottom: 0;
        align-items: center;
        height: 36px;
        position: relative;
    }
    
    .document-label {
        font-weight: bold;
        width: 150px;
        color: #34495e;
        flex-shrink: 0;
        display: flex;
        align-items: center;
        height: 100%;
    }
    
    .document-value {
        flex: 1;
        padding-right: 20px;
        display: flex;
        align-items: center;
        height: 100%;
        font-size: 15px;
        line-height: 1.2;
    }
    
    .section-title {
        font-size: 18px;
        font-weight: bold;
        color: #2c3e50;
        margin: 40px 0 20px 0;
        padding-bottom: 10px;
        border-bottom: 2px solid #3498db;
    }
    
    .document-signature-area {
        margin-top: 80px;
        border-top: 2px solid #34495e;
        padding-top: 40px;
        display: flex;
        justify-content: space-between;
        align-items: flex-end;
    }
    
    .signature-box {
        text-align: center;
        width: 180px;
    }
    
    .signature-line {
        border-bottom: 1px solid #333;
        margin-bottom: 8px;
        height: 50px;
    }
    
    .control-buttons {
        max-width: 800px;
        margin: 20px auto 0;
        padding: 0 20px;
        display: flex;
        gap: 10px;
        justify-content: flex-end;
    }
    
    .status-stamp {
        position: absolute;
        top: 100px;
        left: 60px;
        transform: rotate(-15deg);
        border: 3px solid;
        padding: 10px 20px;
        font-weight: bold;
        font-size: 18px;
        border-radius: 5px;
        opacity: 0.8;
        z-index: 2;
    }
    
    .stamp-verified {
        color: #27ae60;
        border-color: #27ae60;
        background: rgba(39, 174, 96, 0.1);
    }
    
    .stamp-pending {
        color: #f39c12;
        border-color: #f39c12;
        background: rgba(243, 156, 18, 0.1);
    }
    
    .attachment-section {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 20px;
        margin: 20px 0;
        border: 1px solid #dee2e6;
    }
    
    .attachment-image {
        max-width: 100%;
        max-height: 400px;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        transition: transform 0.2s ease;
    }
    
    .attachment-image:hover {
        transform: scale(1.02);
    }
    
    .file-icon {
        color: #7f8c8d;
        margin-bottom: 10px;
    }
    
    /* Protect reference numbers from global formatting */
    .no-format-number {
        position: relative !important;
        font-family: monospace !important;
    }
    
    .no-format-number::before {
        content: attr(data-original-value);
        display: none;
    }
    
    /* Force prevention of number formatting on reference numbers */
    .no-format-number[data-no-format="true"] {
        white-space: nowrap !important;
        font-variant-numeric: tabular-nums !important;
    }
    
    /* Override any global number formatting specifically */
    .document-content .no-format-number[data-no-format="true"] {
        font-family: 'Courier New', monospace !important;
        letter-spacing: 0.5px !important;
    }
    
    @@media print {
        body * {
            visibility: hidden;
        }
        
        .document-paper, .document-paper * {
            visibility: visible;
        }
        
        .document-paper {
            position: absolute;
            left: 0;
            top: 0;
            width: 100% !important;
            max-width: none !important;
            margin: 0 !important;
            box-shadow: none !important;
            border: none !important;
        }
        
        .control-buttons,
        .d-print-none,
        .no-print {
            display: none !important;
            visibility: hidden !important;
        }
        
        .document-content {
            padding: 30px 40px;
        }
        
        .document-header {
            padding: 15px 40px;
        }
    }
</style>

<div class="control-buttons d-print-none">
    @if (!Model.IsVerified)
    {
        <form asp-action="Confirm" asp-route-id="@Model.Id" method="post" class="d-inline" 
              onsubmit="return confirm('آیا از تأیید این سند اطمینان دارید؟ این عملیات ترازها را بروزرسانی خواهد کرد.')">
            @Html.AntiForgeryToken()
            <button type="submit" class="btn btn-success">
                <i class="fas fa-check"></i> تأیید سند
            </button>
        </form>
    }
   
    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning">
        <i class="fas fa-edit"></i> ویرایش
    </a>
    <a asp-action="Index" class="btn btn-secondary">
        <i class="fas fa-arrow-left"></i> بازگشت به لیست
    </a>
    <button onclick="window.print()" class="btn btn-info">
        <i class="fas fa-print"></i> چاپ
    </button>
</div>

<div class="document-paper">
    <!-- Status Stamp -->
    @if (Model.IsVerified)
    {
        <div class="status-stamp stamp-verified">
            تأیید شده
        </div>
    }
    else
    {
        <div class="status-stamp stamp-pending">
            در انتظار تأیید
        </div>
    }
    
    <div class="document-header">
        <div class="company-info">
            <img src="~/favicon/android-chrome-192x192.png" alt="لوگو" class="company-logo" />
            <div class="company-name">سامانه معاملات تابان</div>
        </div>
        <div class="document-title">سند حسابداری</div>
        <div class="document-number">شماره سند: @Model.Id</div>
    </div>
    
    <div class="document-content">
        <div class="document-row">
            <div class="document-label">نوع سند:</div>
            <div class="document-value">
                @switch (Model.Type)
                {
                    case ForexExchange.Models.DocumentType.Cash:
                        <strong>نقدی</strong>
                        break;
                   
                    case ForexExchange.Models.DocumentType.Havala:
                        <strong>حواله</strong>
                        break;
                }
            </div>
        </div>

        <div class="document-row">
            <div class="document-label">عنوان سند:</div>
            <div class="document-value">@Model.Title</div>
        </div>

        <div class="document-row">
            <div class="document-label">مبلغ:</div>
            <div class="document-value">
                <strong>@(Model.CurrencyCode == "IRR" ? Model.Amount.ToString("N0") : Model.Amount.ToString("N2")) @Model.CurrencyCode</strong>
            </div>
        </div>

        <div class="document-row">
            <div class="document-label">تاریخ سند:</div>
            <div class="document-value">@Model.DocumentDate.ToPersianDateTextify()</div>
        </div>

        <div class="document-row">
            <div class="document-label">پرداخت‌کننده:</div>
            <div class="document-value">
                @if (Model.PayerType == ForexExchange.Models.PayerType.Customer && Model.PayerCustomer != null)
                {
                    <a asp-controller="Customers" asp-action="Profile" asp-route-id="@Model.PayerCustomerId" style="color: #2c3e50; text-decoration: none;">
                        @Model.PayerCustomer.FullName
                    </a>
                }
                else if (Model.PayerBankAccount != null)
                {
                    <span>@Model.PayerBankAccount.BankName - @Model.PayerBankAccount.AccountNumber</span>
                }
                else
                {
                    <span>سیستم</span>
                }
            </div>
        </div>

        <div class="document-row">
            <div class="document-label">دریافت‌کننده:</div>
            <div class="document-value">
                @if (Model.ReceiverType == ForexExchange.Models.ReceiverType.Customer && Model.ReceiverCustomer != null)
                {
                    <a asp-controller="Customers" asp-action="Profile" asp-route-id="@Model.ReceiverCustomerId" style="color: #2c3e50; text-decoration: none;">
                        @Model.ReceiverCustomer.FullName
                    </a>
                }
                else if (Model.ReceiverBankAccount != null)
                {
                    <span>@Model.ReceiverBankAccount.BankName - @Model.ReceiverBankAccount.AccountNumber</span>
                }
                else
                {
                    <span>سیستم</span>
                }
            </div>
        </div>

        @if (!string.IsNullOrEmpty(Model.ReferenceNumber))
        {
            <div class="document-row">
                <div class="document-label"> شناسه رهگیری :</div>
                <div class="document-value no-format-number protected-reference" 
                     data-no-format="true" 
                     data-protected="true" 
                     data-no-comma="true" 
                     data-original-value="@Model.ReferenceNumber">@Model.ReferenceNumber</div>
            </div>
        }

        @if (!string.IsNullOrEmpty(Model.Description))
        {
            <div class="document-row">
                <div class="document-label">توضیحات:</div>
                <div class="document-value">@Model.Description</div>
            </div>
        }

        <div class="document-row">
            <div class="document-label">تاریخ ایجاد:</div>
            <div class="document-value">@Model.CreatedAt.ToPersianDateTextify()</div>
        </div>

        @if (Model.IsVerified && Model.VerifiedAt.HasValue)
        {
            <div class="document-row">
                <div class="document-label">تاریخ تأیید:</div>
                <div class="document-value">@Model.VerifiedAt.Value.ToPersianDateTextify()</div>
            </div>
        }

        @if (!string.IsNullOrEmpty(Model.FileName))
        {
            <div class="section-title" style="margin-top: 40px;">فایل پیوست</div>
            
            <div class="document-row" style="height: auto; margin-bottom: 20px;">
                <div class="document-label">نام فایل:</div>
                <div class="document-value">
                    <i class="fas fa-file me-2"></i>
                    <span>@Model.FileName</span>
                    <a href="@Url.Action("GetFile", "AccountingDocuments", new { id = Model.Id })" class="btn btn-sm btn-outline-primary ms-3 no-print" download="@Model.FileName">
                        <i class="fas fa-download"></i> دانلود
                    </a>
                </div>
            </div>
            
            <div class="attachment-section">
                @{
                    var fileExtension = System.IO.Path.GetExtension(Model.FileName)?.ToLower();
                    var isImage = new[] { ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".webp" }.Contains(fileExtension);
                }
                
                @if (isImage)
                {
                    <img src="@Url.Action("GetFile", "AccountingDocuments", new { id = Model.Id })" 
                         alt="@Model.FileName" 
                         class="attachment-image"
                         onerror="this.style.display='none'; this.nextElementSibling.style.display='block';" />
                    <div style="display: none; color: #7f8c8d; padding: 20px; text-align: center;">
                        <i class="fas fa-image fa-2x file-icon"></i>
                        <p>تصویر قابل نمایش نیست</p>
                        <small>@Model.FileName</small>
                    </div>
                }
                else
                {
                    <div style="color: #7f8c8d; padding: 20px; text-align: center;">
                        <i class="fas fa-file-alt fa-3x file-icon"></i>
                        <h6>فایل غیر تصویری</h6>
                        <p>@Model.FileName</p>
                        <small>برای مشاهده فایل از دکمه دانلود استفاده کنید</small>
                    </div>
                }
            </div>
        }
        
        <div class="document-signature-area">
            <div class="signature-box">
                <div class="signature-line"></div>
                <div>امضا تهیه کننده</div>
            </div>
            <div class="signature-box">
                <div class="signature-line"></div>
                <div>امضا بازبین</div>
            </div>
            <div class="signature-box">
                <div class="signature-line"></div>
                <div>امضا تأیید کننده</div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Protect reference numbers from global formatting scripts - Enhanced Version
        document.addEventListener('DOMContentLoaded', function() {
            protectReferenceNumbers();
            
            // More aggressive protection - check every 500ms instead of 2 seconds
            setInterval(protectReferenceNumbers, 500);
            
            // Immediate protection on any DOM changes
            const observer = new MutationObserver(function(mutations) {
                mutations.forEach(function(mutation) {
                    if (mutation.type === 'childList' || mutation.type === 'characterData') {
                        // Immediate protection, no delay
                        protectReferenceNumbers();
                        // Also protect after a short delay in case of async changes
                        setTimeout(protectReferenceNumbers, 50);
                    }
                });
            });
            
            // Start observing the document for changes
            observer.observe(document.body, {
                childList: true,
                subtree: true,
                characterData: true
            });
            
            // Override global formatting functions if they exist
            overrideGlobalFormatting();
        });
        
        function protectReferenceNumbers() {
            // Find all elements with no-format-number class
            const referenceElements = document.querySelectorAll('.no-format-number[data-no-format="true"]');
            
            referenceElements.forEach(function(element) {
                // Store original value if not already stored
                if (!element.hasAttribute('data-original-value')) {
                    element.setAttribute('data-original-value', element.textContent.trim());
                }
                
                const originalValue = element.getAttribute('data-original-value');
                const currentValue = element.textContent.trim();
                
                // If the content has been modified by global formatters, restore it
                if (currentValue !== originalValue && (currentValue.includes(',') || currentValue.includes('٬'))) {
                    element.textContent = originalValue;
                    console.log('Protected reference number from formatting:', originalValue);
                }
                
                // Add additional protection attributes
                element.setAttribute('data-protected', 'true');
                element.setAttribute('data-no-comma', 'true');
                element.classList.add('protected-reference');
                
                // Override any innerHTML/textContent setters temporarily
                const originalInnerHTML = element.innerHTML;
                Object.defineProperty(element, 'innerHTML', {
                    get: function() { return originalValue; },
                    set: function(value) {
                        if (value.includes(',') || value.includes('٬')) {
                            console.log('Blocked attempt to format reference number:', value);
                            return;
                        }
                        return originalInnerHTML;
                    },
                    configurable: true
                });
            });
        }
        
        function overrideGlobalFormatting() {
            // Common global formatting function names to intercept
            const formatFunctionNames = ['formatNumber', 'addCommas', 'numberWithCommas', 'formatCurrency'];
            
            formatFunctionNames.forEach(function(funcName) {
                if (window[funcName]) {
                    const originalFunc = window[funcName];
                    window[funcName] = function(element, value) {
                        // Check if this element should be protected
                        if (element && (element.hasAttribute('data-no-format') || element.classList.contains('no-format-number'))) {
                            console.log('Blocked global formatting on protected element');
                            return element.textContent || value;
                        }
                        return originalFunc.apply(this, arguments);
                    };
                }
            });
            
            // Also intercept jQuery-based formatters if jQuery is available
            if (window.jQuery) {
                const originalText = jQuery.fn.text;
                jQuery.fn.text = function(value) {
                    if (arguments.length === 0) {
                        return originalText.call(this);
                    }
                    
                    // Check if any element in the selection should be protected
                    return this.each(function() {
                        if (this.hasAttribute && this.hasAttribute('data-no-format')) {
                            console.log('Blocked jQuery text formatting on protected element');
                            return;
                        }
                        originalText.call(jQuery(this), value);
                    });
                };
            }
        }
    </script>
}
