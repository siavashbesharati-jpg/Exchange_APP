@model ForexExchange.Models.AccountingDocument

@{
    ViewData["Title"] = "ثبت سند حسابداری";
}

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="mb-1">ثبت سند حسابداری</h2>
            <div class="text-muted small">ثبت و آپلود سند حسابداری جدید</div>
        </div>
        <a asp-action="Index" class="btn btn-secondary">
            <i class="fas fa-arrow-left"></i> بازگشت به لیست
        </a>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="بستن"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="بستن"></button>
        </div>
    }

    <div class="row">
        <div class="col-lg-8 mx-auto">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">اطلاعات سند حسابداری</h5>
                </div>
                <div class="card-body">
                    <form asp-action="Upload" method="post" enctype="multipart/form-data">
                        @Html.AntiForgeryToken()

                        <!-- Validation Summary -->
                        @if (!ViewData.ModelState.IsValid)
                        {
                            <div class="alert alert-danger" role="alert">
                                <h6 class="alert-heading"><i class="fas fa-exclamation-triangle"></i> خطاهای اعتبارسنجی:</h6>
                                <ul class="mb-0">
                                    @foreach (var modelState in ViewData.ModelState.Values)
                                    {
                                        @foreach (var error in modelState.Errors)
                                        {
                                            @if (!error.ErrorMessage.Contains("documentFile") && !error.ErrorMessage.Contains("The documentFile field is required"))
                                            {
                                                <li>@error.ErrorMessage</li>
                                            }
                                        }
                                    }
                                </ul>
                            </div>
                        }

                        <div class="row">
                            <!-- Document Type -->
                            <div class="col-md-6 mb-3">
                                <label asp-for="Type" class="form-label">نوع سند <span class="text-danger">*</span></label>
                                <select asp-for="Type" class="form-select" required>
                                    <option value="">انتخاب کنید...</option>
                                    <option value="@ForexExchange.Models.DocumentType.Cash">نقدی</option>
                                    <option value="@ForexExchange.Models.DocumentType.BankStatement">رسید بانکی</option>
                                    <option value="@ForexExchange.Models.DocumentType.Havala">حواله</option>
                                </select>
                                <span asp-validation-for="Type" class="text-danger"></span>
                            </div>

                        <div class="row">
                            <!-- Payer Type -->
                            <div class="col-md-6 mb-3">
                                <label asp-for="PayerType" class="form-label">پرداخت کننده <span class="text-danger">*</span></label>
                                <select asp-for="PayerType" class="form-select" id="payerType" required>
                                    <option value="">انتخاب کنید...</option>
                                    <option value="@ForexExchange.Models.PayerType.Customer">مشتری</option>
                                    <option value="@ForexExchange.Models.PayerType.System">سیستم</option>
                                </select>
                                <span asp-validation-for="PayerType" class="text-danger"></span>
                            </div>

                            <!-- Receiver Type -->
                            <div class="col-md-6 mb-3">
                                <label asp-for="ReceiverType" class="form-label">دریافت کننده <span class="text-danger">*</span></label>
                                <select asp-for="ReceiverType" class="form-select" id="receiverType" required>
                                    <option value="">انتخاب کنید...</option>
                                    <option value="@ForexExchange.Models.ReceiverType.Customer">مشتری</option>
                                    <option value="@ForexExchange.Models.ReceiverType.System">سیستم</option>
                                </select>
                                <span asp-validation-for="ReceiverType" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- Payer Selection -->
                        <div class="row">
                            <!-- Payer Customer -->
                            <div class="col-md-6 mb-3" id="payerCustomerDiv" style="display: none;">
                                <label asp-for="PayerCustomerId" class="form-label">مشتری پرداخت کننده <span class="text-danger">*</span></label>
                                <select asp-for="PayerCustomerId" class="form-select">
                                    <option value="">انتخاب مشتری...</option>
                                    @if (ViewData["Customers"] is List<ForexExchange.Models.Customer> customers)
                                    {
                                        @foreach (var customer in customers)
                                        {
                                            <option value="@customer.Id">@customer.FullName (@customer.PhoneNumber)</option>
                                        }
                                    }
                                </select>
                                <span asp-validation-for="PayerCustomerId" class="text-danger"></span>
                            </div>

                            <!-- Payer Bank Account -->
                            <div class="col-md-6 mb-3" id="payerBankDiv" style="display: none;">
                                <label asp-for="PayerBankAccountId" class="form-label">حساب بانکی پرداخت کننده <span class="text-danger">*</span></label>
                                <select asp-for="PayerBankAccountId" class="form-select">
                                    <option value="">انتخاب حساب بانکی...</option>
                                    @if (ViewData["BankAccounts"] is List<ForexExchange.Models.BankAccount> bankAccounts)
                                    {
                                        @foreach (var account in bankAccounts)
                                        {
                                            <option value="@account.Id" data-currency="@account.CurrencyCode">@account.AccountNumber - @account.BankName (@account.CurrencyCode)</option>
                                        }
                                    }
                                </select>
                                <span asp-validation-for="PayerBankAccountId" class="text-danger"></span>
                            </div>

                            <!-- Receiver Customer -->
                            <div class="col-md-6 mb-3" id="receiverCustomerDiv" style="display: none;">
                                <label asp-for="ReceiverCustomerId" class="form-label">مشتری دریافت کننده <span class="text-danger">*</span></label>
                                <select asp-for="ReceiverCustomerId" class="form-select">
                                    <option value="">انتخاب مشتری...</option>
                                    @if (ViewData["Customers"] is List<ForexExchange.Models.Customer> customers)
                                    {
                                        @foreach (var customer in customers)
                                        {
                                            <option value="@customer.Id">@customer.FullName (@customer.PhoneNumber)</option>
                                        }
                                    }
                                </select>
                                <span asp-validation-for="ReceiverCustomerId" class="text-danger"></span>
                            </div>

                            <!-- Receiver Bank Account -->
                            <div class="col-md-6 mb-3" id="receiverBankDiv" style="display: none;">
                                <label asp-for="ReceiverBankAccountId" class="form-label">حساب بانکی دریافت کننده <span class="text-danger">*</span></label>
                                <select asp-for="ReceiverBankAccountId" class="form-select">
                                    <option value="">انتخاب حساب بانکی...</option>
                                    @if (ViewData["BankAccounts"] is List<ForexExchange.Models.BankAccount> bankAccounts)
                                    {
                                        @foreach (var account in bankAccounts)
                                        {
                                            <option value="@account.Id" data-currency="@account.CurrencyCode">@account.AccountNumber - @account.BankName (@account.CurrencyCode)</option>
                                        }
                                    }
                                </select>
                                <span asp-validation-for="ReceiverBankAccountId" class="text-danger"></span>
                            </div>
                        </div>
                        </div>

                        <div class="row">
                            <!-- Amount -->
                            <div class="col-md-6 mb-3">
                                <label asp-for="Amount" class="form-label"> مقدار  <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <input asp-for="Amount" class="form-control" type="number" step="0.01" required />
                                </div>
                                <span asp-validation-for="Amount" class="text-danger"></span>
                                <div class="form-text">مقادیر منفی برای تراکنش‌های برگشتی مجاز است</div>
                            </div>

                            <!-- Currency -->
                            <div class="col-md-6 mb-3">
                                <label asp-for="CurrencyCode" class="form-label">ارز <span class="text-danger">*</span></label>
                                <select asp-for="CurrencyCode" class="form-select" required>
                                    <option value="">انتخاب کنید...</option>
                                    @if (ViewData["Currencies"] is List<ForexExchange.Models.Currency> currencies)
                                    {
                                        @foreach (var currency in currencies)
                                        {
                                            <option value="@currency.Code">@currency.PersianName (@currency.Code)</option>
                                        }
                                    }
                                </select>
                                <span asp-validation-for="CurrencyCode" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- Document Title -->
                        <div class="mb-3">
                            <label asp-for="Title" class="form-label">عنوان سند <span class="text-danger">*</span></label>
                            <input asp-for="Title" class="form-control" placeholder="مثال: پرداخت مشتری برای خرید ارز" required />
                            <span asp-validation-for="Title" class="text-danger"></span>
                        </div>

                        <!-- Description -->
                        <div class="mb-3">
                            <label asp-for="Description" class="form-label">توضیحات</label>
                            <textarea asp-for="Description" class="form-control" rows="3" placeholder="توضیحات اضافی درباره سند..."></textarea>
                            <span asp-validation-for="Description" class="text-danger"></span>
                        </div>

                        <div class="row">
                            <!-- Document Date -->
                            <div class="col-md-6 mb-3">
                                <label asp-for="DocumentDate" class="form-label">تاریخ سند <span class="text-danger">*</span></label>
                                <input asp-for="DocumentDate" class="form-control" type="datetime-local" required />
                                <span asp-validation-for="DocumentDate" class="text-danger"></span>
                            </div>

                            <!-- Reference Number -->
                            <div class="col-md-6 mb-3">
                                <label asp-for="ReferenceNumber" class="form-label">شماره مرجع</label>
                                <input asp-for="ReferenceNumber" class="form-control" placeholder="شماره پیگیری یا مرجع" />
                                <span asp-validation-for="ReferenceNumber" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- File Upload -->
                        <div class="mb-3">
                            <label class="form-label">فایل سند (اختیاری)</label>
                            <input type="file" name="documentFile" class="form-control" accept=".pdf,.jpg,.jpeg,.png,.doc,.docx" />
                            <div class="form-text">فرمت‌های مجاز: PDF, JPG, PNG, DOC, DOCX (حداکثر 10 مگابایت)</div>
                        </div>

                        <!-- Currency Warning for Bank Accounts -->
                        <div id="currency-warning" class="alert alert-warning" style="display: none;">
                            <i class="fas fa-exclamation-triangle"></i> ارز سند باید با ارز حساب‌های بانکی انتخاب شده مطابقت داشته باشد.
                        </div>

                        <div class="d-flex justify-content-between mt-4">
                            <a asp-action="Index" class="btn btn-secondary">
                                <i class="fas fa-times"></i> انصراف
                            </a>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-upload"></i> ثبت سند
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Auto-fill current date/time
        document.addEventListener('DOMContentLoaded', function() {
            const now = new Date();
            const localDateTime = new Date(now.getTime() - now.getTimezoneOffset() * 60000);
            const formatted = localDateTime.toISOString().slice(0, 16);
            document.getElementById('DocumentDate').value = formatted;
        });

        // Dynamic show/hide based on payer and receiver types
        document.getElementById('payerType').addEventListener('change', function() {
            const payerType = this.value;
            const payerCustomerDiv = document.getElementById('payerCustomerDiv');
            const payerBankDiv = document.getElementById('payerBankDiv');
            
            if (payerType === '@ForexExchange.Models.PayerType.Customer') {
                payerCustomerDiv.style.display = 'block';
                payerBankDiv.style.display = 'none';
                // Clear bank account selection
                document.querySelector('[name="PayerBankAccountId"]').value = '';
            } else if (payerType === '@ForexExchange.Models.PayerType.System') {
                payerCustomerDiv.style.display = 'none';
                payerBankDiv.style.display = 'block';
                // Clear customer selection
                document.querySelector('[name="PayerCustomerId"]').value = '';
            } else {
                payerCustomerDiv.style.display = 'none';
                payerBankDiv.style.display = 'none';
                // Clear both selections
                document.querySelector('[name="PayerCustomerId"]').value = '';
                document.querySelector('[name="PayerBankAccountId"]').value = '';
            }
            validateCurrency();
        });

        document.getElementById('receiverType').addEventListener('change', function() {
            const receiverType = this.value;
            const receiverCustomerDiv = document.getElementById('receiverCustomerDiv');
            const receiverBankDiv = document.getElementById('receiverBankDiv');
            
            if (receiverType === '@ForexExchange.Models.ReceiverType.Customer') {
                receiverCustomerDiv.style.display = 'block';
                receiverBankDiv.style.display = 'none';
                // Clear bank account selection
                document.querySelector('[name="ReceiverBankAccountId"]').value = '';
            } else if (receiverType === '@ForexExchange.Models.ReceiverType.System') {
                receiverCustomerDiv.style.display = 'none';
                receiverBankDiv.style.display = 'block';
                // Clear customer selection
                document.querySelector('[name="ReceiverCustomerId"]').value = '';
            } else {
                receiverCustomerDiv.style.display = 'none';
                receiverBankDiv.style.display = 'none';
                // Clear both selections
                document.querySelector('[name="ReceiverCustomerId"]').value = '';
                document.querySelector('[name="ReceiverBankAccountId"]').value = '';
            }
            validateCurrency();
        });

        // Currency validation for bank accounts
        function validateCurrency() {
            const currencySelect = document.getElementById('CurrencyCode');
            const payerBankSelect = document.querySelector('[name="PayerBankAccountId"]');
            const receiverBankSelect = document.querySelector('[name="ReceiverBankAccountId"]');
            const warningDiv = document.getElementById('currency-warning');
            
            if (!currencySelect.value) {
                warningDiv.style.display = 'none';
                return;
            }

            let hasConflict = false;
            const selectedCurrency = currencySelect.value;

            // Check payer bank account currency
            if (payerBankSelect.value) {
                const payerOption = payerBankSelect.options[payerBankSelect.selectedIndex];
                const payerCurrency = payerOption.getAttribute('data-currency');
                if (payerCurrency && payerCurrency !== selectedCurrency) {
                    hasConflict = true;
                }
            }

            // Check receiver bank account currency
            if (receiverBankSelect.value) {
                const receiverOption = receiverBankSelect.options[receiverBankSelect.selectedIndex];
                const receiverCurrency = receiverOption.getAttribute('data-currency');
                if (receiverCurrency && receiverCurrency !== selectedCurrency) {
                    hasConflict = true;
                }
            }

            warningDiv.style.display = hasConflict ? 'block' : 'none';
        }

        // Add currency validation on all relevant changes
        document.getElementById('CurrencyCode').addEventListener('change', validateCurrency);
        document.querySelector('[name="PayerBankAccountId"]').addEventListener('change', validateCurrency);
        document.querySelector('[name="ReceiverBankAccountId"]').addEventListener('change', validateCurrency);

        // Prevent self-transactions
        function validateSelfTransaction() {
            const payerType = document.getElementById('payerType').value;
            const receiverType = document.getElementById('receiverType').value;
            
            if (payerType === '@ForexExchange.Models.PayerType.Customer' && 
                receiverType === '@ForexExchange.Models.ReceiverType.Customer') {
                const payerCustomer = document.querySelector('[name="PayerCustomerId"]').value;
                const receiverCustomer = document.querySelector('[name="ReceiverCustomerId"]').value;
                
                if (payerCustomer && receiverCustomer && payerCustomer === receiverCustomer) {
                    alert('مشتری نمی‌تواند به خودش پرداخت کند.');
                    document.querySelector('[name="ReceiverCustomerId"]').value = '';
                }
            }
            
            if (payerType === '@ForexExchange.Models.PayerType.System' && 
                receiverType === '@ForexExchange.Models.ReceiverType.System') {
                const payerBank = document.querySelector('[name="PayerBankAccountId"]').value;
                const receiverBank = document.querySelector('[name="ReceiverBankAccountId"]').value;
                
                if (payerBank && receiverBank && payerBank === receiverBank) {
                    alert('حساب بانکی نمی‌تواند به خودش انتقال داشته باشد.');
                    document.querySelector('[name="ReceiverBankAccountId"]').value = '';
                }
            }
        }

        document.querySelector('[name="PayerCustomerId"]').addEventListener('change', validateSelfTransaction);
        document.querySelector('[name="ReceiverCustomerId"]').addEventListener('change', validateSelfTransaction);
        document.querySelector('[name="PayerBankAccountId"]').addEventListener('change', validateSelfTransaction);
        document.querySelector('[name="ReceiverBankAccountId"]').addEventListener('change', validateSelfTransaction);

        // Form validation
        document.querySelector('form').addEventListener('submit', function(e) {
            const requiredFields = document.querySelectorAll('input[required], select[required]');
            let isValid = true;

            requiredFields.forEach(field => {
                if (!field.value.trim()) {
                    field.classList.add('is-invalid');
                    isValid = false;
                } else {
                    field.classList.remove('is-invalid');
                }
            });

            if (!isValid) {
                e.preventDefault();
                alert('لطفاً تمامی فیلدهای اجباری را پر کنید.');
            }
        });

        // File validation (only if file is selected)
        document.querySelector('input[type="file"]').addEventListener('change', function (e) {
            const file = e.target.files[0];
            if (file) {
                const maxSize = 10 * 1024 * 1024; // 10MB
                const allowedTypes = ['application/pdf', 'image/jpeg', 'image/jpg', 'image/png', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];

                if (file.size > maxSize) {
                    alert('حجم فایل نمی‌تواند بیشتر از ۱۰ مگابایت باشد.');
                    e.target.value = '';
                    return;
                }

                if (!allowedTypes.includes(file.type)) {
                    alert('فرمت فایل مجاز نیست. فرمت‌های مجاز: PDF, JPG, PNG, DOC, DOCX');
                    e.target.value = '';
                    return;
                }
            }
        });
    </script>
}
