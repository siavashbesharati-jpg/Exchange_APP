@model ForexExchange.Models.AccountingDocument

@{
    ViewData["Title"] = "ثبت سند حسابداری";
}

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="mb-1">ثبت سند حسابداری</h2>
            <div class="text-muted small">ثبت و آپلود سند حسابداری جدید</div>
        </div>
        <a asp-action="Index" class="btn btn-secondary">
            <i class="fas fa-arrow-left"></i> بازگشت به لیست
        </a>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="بستن"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="بستن"></button>
        </div>
    }

    <div class="row">
        <div class="col-lg-8 mx-auto">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">اطلاعات سند حسابداری</h5>
                </div>
                <div class="card-body">
                    <form asp-action="Upload" method="post" enctype="multipart/form-data">
                        @Html.AntiForgeryToken()

                        <!-- Validation Summary -->
                        @if (!ViewData.ModelState.IsValid)
                        {
                            <div class="alert alert-danger" role="alert">
                                <h6 class="alert-heading"><i class="fas fa-exclamation-triangle"></i> خطاهای اعتبارسنجی:</h6>
                                <ul class="mb-0">
                                    @foreach (var modelState in ViewData.ModelState.Values)
                                    {
                                        @foreach (var error in modelState.Errors)
                                        {
                                            @if (!error.ErrorMessage.Contains("documentFile") && !error.ErrorMessage.Contains("The documentFile field is required"))
                                            {
                                                <li>@error.ErrorMessage</li>
                                            }
                                        }
                                    }
                                </ul>
                            </div>
                        }

                        <div class="row">
                            <!-- Document Type -->
                            <div class="col-md-6 mb-3">
                                <label asp-for="Type" class="form-label">نوع سند <span class="text-danger">*</span></label>
                                <select asp-for="Type" class="form-select" required>
                                    <option value="">انتخاب کنید...</option>
                                    <option value="@ForexExchange.Models.DocumentType.Cash">نقدی</option>
                                    <option value="@ForexExchange.Models.DocumentType.Havala">حواله</option>
                                </select>
                                <span asp-validation-for="Type" class="text-danger"></span>
                            </div>

                        <div class="row">
                            <!-- Payer Type -->
                            <div class="col-md-6 mb-3">
                                <label asp-for="PayerType" class="form-label">پرداخت کننده <span class="text-danger">*</span></label>
                                <select asp-for="PayerType" class="form-select" id="payerType" required>
                                    <option value="">انتخاب کنید...</option>
                                    <option value="@ForexExchange.Models.PayerType.Customer">مشتری</option>
                                    <option value="@ForexExchange.Models.PayerType.System">سیستم</option>
                                </select>
                                <span asp-validation-for="PayerType" class="text-danger"></span>
                            </div>

                            <!-- Receiver Type -->
                            <div class="col-md-6 mb-3">
                                <label asp-for="ReceiverType" class="form-label">دریافت کننده <span class="text-danger">*</span></label>
                                <select asp-for="ReceiverType" class="form-select" id="receiverType" required>
                                    <option value="">انتخاب کنید...</option>
                                    <option value="@ForexExchange.Models.ReceiverType.Customer">مشتری</option>
                                    <option value="@ForexExchange.Models.ReceiverType.System">سیستم</option>
                                </select>
                                <span asp-validation-for="ReceiverType" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- Payer Selection -->
                        <div class="row">
                            <!-- Payer Customer -->
                            <div class="col-md-6 mb-3" id="payerCustomerDiv" style="display: none;">
                                <label asp-for="PayerCustomerId" class="form-label">مشتری پرداخت کننده <span class="text-danger">*</span></label>
                                <select asp-for="PayerCustomerId" class="form-select">
                                    <option value="">انتخاب مشتری...</option>
                                    @if (ViewData["Customers"] is List<ForexExchange.Models.Customer> customers)
                                    {
                                        @foreach (var customer in customers)
                                        {
                                            <option value="@customer.Id">@customer.FullName</option>
                                        }
                                    }
                                </select>
                                <span asp-validation-for="PayerCustomerId" class="text-danger"></span>
                            </div>

                            <!-- Payer Bank Account -->
                            <div class="col-md-6 mb-3" id="payerBankDiv" style="display: none;">
                                <label asp-for="PayerBankAccountId" class="form-label">حساب بانکی پرداخت کننده <span class="text-danger">*</span></label>
                                <select asp-for="PayerBankAccountId" class="form-select">
                                    <option value="">انتخاب حساب بانکی...</option>
                                    @if (ViewData["BankAccounts"] is List<ForexExchange.Models.BankAccount> bankAccounts)
                                    {
                                        @foreach (var account in bankAccounts)
                                        {
                                            <option value="@account.Id" data-currency="@account.CurrencyCode">@account.AccountNumber - @account.BankName (@account.CurrencyCode)</option>
                                        }
                                    }
                                </select>
                                <span asp-validation-for="PayerBankAccountId" class="text-danger"></span>
                            </div>

                            <!-- Receiver Customer -->
                            <div class="col-md-6 mb-3" id="receiverCustomerDiv" style="display: none;">
                                <label asp-for="ReceiverCustomerId" class="form-label">مشتری دریافت کننده <span class="text-danger">*</span></label>
                                <select asp-for="ReceiverCustomerId" class="form-select">
                                    <option value="">انتخاب مشتری...</option>
                                    @if (ViewData["Customers"] is List<ForexExchange.Models.Customer> customers)
                                    {
                                        @foreach (var customer in customers)
                                        {
                                            <option value="@customer.Id">@customer.FullName</option>
                                        }
                                    }
                                </select>
                                <span asp-validation-for="ReceiverCustomerId" class="text-danger"></span>
                            </div>

                            <!-- Receiver Bank Account -->
                            <div class="col-md-6 mb-3" id="receiverBankDiv" style="display: none;">
                                <label asp-for="ReceiverBankAccountId" class="form-label">حساب بانکی دریافت کننده <span class="text-danger">*</span></label>
                                <select asp-for="ReceiverBankAccountId" class="form-select">
                                    <option value="">انتخاب حساب بانکی...</option>
                                    @if (ViewData["BankAccounts"] is List<ForexExchange.Models.BankAccount> bankAccounts)
                                    {
                                        @foreach (var account in bankAccounts)
                                        {
                                            <option value="@account.Id" data-currency="@account.CurrencyCode">@account.AccountNumber - @account.BankName (@account.CurrencyCode)</option>
                                        }
                                    }
                                </select>
                                <span asp-validation-for="ReceiverBankAccountId" class="text-danger"></span>
                            </div>
                        </div>
                        </div>

                        <div class="row">
                            <!-- Amount -->
                            <div class="col-md-6 mb-3">
                                <label asp-for="Amount" class="form-label"> مقدار  <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <input asp-for="Amount" class="form-control" type="number" step="0.01" required />
                                </div>
                                <span asp-validation-for="Amount" class="text-danger"></span>
                                <div class="form-text">مقادیر منفی برای تراکنش‌های برگشتی مجاز است</div>
                            </div>

                            <!-- Currency -->
                            <div class="col-md-6 mb-3">
                                <label asp-for="CurrencyCode" class="form-label">ارز <span class="text-danger">*</span></label>
                                <select asp-for="CurrencyCode" class="form-select" required>
                                    <option value="">انتخاب کنید...</option>
                                    @if (ViewData["Currencies"] is List<ForexExchange.Models.Currency> currencies)
                                    {
                                        @foreach (var currency in currencies)
                                        {
                                            <option value="@currency.Code">@currency.PersianName (@currency.Code)</option>
                                        }
                                    }
                                </select>
                                <span asp-validation-for="CurrencyCode" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- Document Title -->
                        <div class="mb-3">
                            <label asp-for="Title" class="form-label">عنوان سند <span class="text-danger">*</span></label>
                            <input asp-for="Title" class="form-control" id="documentTitle" placeholder="عنوان خودکار تولید می‌شود..." required />
                            <span asp-validation-for="Title" class="text-danger"></span>
                            <div class="form-text">عنوان بر اساس اطلاعات وارد شده خودکار تولید می‌شود. می‌توانید آن را تغییر دهید.</div>
                        </div>

                        <!-- Description -->
                        <div class="mb-3">
                            <label asp-for="Description" class="form-label">توضیحات</label>
                            <textarea asp-for="Description" class="form-control" rows="3" placeholder="توضیحات اضافی درباره سند..."></textarea>
                            <span asp-validation-for="Description" class="text-danger"></span>
                        </div>

                        <div class="row">
                            <!-- Document Date -->
                            <div class="col-md-6 mb-3">
                                <label asp-for="DocumentDate" class="form-label">تاریخ سند <span class="text-danger">*</span></label>
                                <input asp-for="DocumentDate" class="form-control" type="datetime-local" 
                                       value="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" required />
                                <span asp-validation-for="DocumentDate" class="text-danger"></span>
                            </div>

                            <!-- Reference Number -->
                            <div class="col-md-6 mb-3">
                                <label asp-for="ReferenceNumber" class="form-label">شماره تراکنش</label>
                                <input asp-for="ReferenceNumber" class="form-control" placeholder="شماره پیگیری یا مرجع" />
                                <span asp-validation-for="ReferenceNumber" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- File Upload -->
                        <div class="mb-3">
                            <label class="form-label">فایل سند (اختیاری)</label>
                            <div class="input-group">
                                <input type="file" name="documentFile" id="documentFile" class="form-control" accept=".pdf,.jpg,.jpeg,.png,.doc,.docx" />
                                <button type="button" id="ocrButton" class="btn btn-outline-info" style="display: none;" onclick="processOcr()">
                                    <i class="fas fa-eye"></i> OCR
                                </button>
                            </div>
                            <div class="form-text">فرمت‌های مجاز: PDF, JPG, PNG, DOC, DOCX (حداکثر 10 مگابایت)</div>
                            
                            <!-- OCR Results -->
                            <div id="ocrResults" class="mt-3" style="display: none;">
                                <div class="alert alert-info">
                                    <h6><i class="fas fa-robot"></i> نتایج OCR:</h6>
                                    <div id="ocrContent"></div>
                                    <div class="mt-2">
                                        <button type="button" class="btn btn-sm btn-success" onclick="applyOcrResults()">
                                            <i class="fas fa-check"></i> اعمال نتایج
                                        </button>
                                        <button type="button" class="btn btn-sm btn-secondary" onclick="hideOcrResults()">
                                            <i class="fas fa-times"></i> بستن
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Currency Warning for Bank Accounts -->
                        <div id="currency-warning" class="alert alert-warning" style="display: none;">
                            <i class="fas fa-exclamation-triangle"></i> ارز سند باید با ارز حساب‌های بانکی انتخاب شده مطابقت داشته باشد.
                        </div>

                        <div class="d-flex justify-content-between mt-4">
                            <a asp-action="Index" class="btn btn-secondary">
                                <i class="fas fa-times"></i> انصراف
                            </a>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-upload"></i> ثبت سند
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Beautiful Loading Overlay -->
<div id="loadingOverlay" class="loading-overlay">
    <div class="loading-content">
        <div class="loading-spinner">
            <div class="spinner-ring"></div>
            <div class="spinner-ring"></div>
            <div class="spinner-ring"></div>
        </div>
        <div class="loading-text">در حال پردازش...</div>
        <div class="loading-subtext">لطفاً منتظر بمانید</div>
    </div>
</div>

<!-- Transaction Confirmation Modal -->
<div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title" id="confirmationModalLabel">
                    <i class="fas fa-eye"></i> پیش‌نمایش تاثیر سند حسابداری
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="بستن"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-info">
                    <i class="fas fa-info-circle"></i> لطفاً جزئیات سند و تأثیرات آن را بررسی کنید.
                </div>
                
                <!-- Transaction Summary -->
                <div class="card mb-3">
                    <div class="card-header">
                        <h6 class="mb-0"><i class="fas fa-file-invoice"></i> خلاصه سند</h6>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-2"><strong>نوع سند:</strong> <span id="preview-type" class="badge bg-info"></span></div>
                                <div class="mb-2"><strong>عنوان:</strong> <span id="preview-title" class="text-primary"></span></div>
                                <div class="mb-2"><strong>مبلغ:</strong> <span id="preview-amount" class="text-success fw-bold" dir="ltr"></span></div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-2"><strong>پرداخت‌کننده:</strong> <span id="preview-payer" class="text-primary"></span></div>
                                <div class="mb-2"><strong>دریافت‌کننده:</strong> <span id="preview-receiver" class="text-primary"></span></div>
                                <div class="mb-2"><strong>تاریخ:</strong> <span id="preview-date"></span></div>
                            </div>
                        </div>
                     
                        <div id="preview-reference" class="mt-2" style="display: none;">
                            <strong> شناسه رهگیری:</strong> <span id="preview-reference-number" class="no-format-number protected-reference" data-no-format="true" data-protected="true" data-no-comma="true"></span>
                        </div>
                        <div id="preview-reference-warning" class="mt-2 alert alert-warning py-2 px-3" style="display: none;">
                            <i class="fas fa-exclamation-triangle"></i> <strong>شناسه رهگیری:</strong> بهتر است تکمیل شود
                        </div>
                    </div>
                </div>

                <!-- Balance Effects -->
                <div class="card mb-3">
                    <div class="card-header">
                        <h6 class="mb-0"><i class="fas fa-balance-scale"></i> تأثیرات بر ترازها</h6>
                    </div>
                    <div class="card-body">
                        <div id="balance-effects-loading" class="text-center py-3">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">در حال بارگذاری...</span>
                            </div>
                            <div class="mt-2">در حال محاسبه تأثیرات...</div>
                        </div>
                        <div id="balance-effects-content" style="display: none;">
                            <!-- Customer Balance Effects -->
                            <div id="customer-effects" style="display: none;">
                                <!-- Will be populated with beautiful table style -->
                            </div>
                            
                            <!-- Bank Account Effects -->
                            <div id="bank-effects" style="display: none;">
                                <!-- Will be populated with beautiful table style -->
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Warning Messages -->
                <div id="confirmation-warnings" style="display: none;">
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle"></i>
                        <div id="warnings-list"></div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times"></i> انصراف
                </button>
                <button type="button" id="confirmSubmitBtn" class="btn btn-primary">
                    <i class="fas fa-check"></i> تایید و ثبت نهایی
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    /* Beautiful Loading Overlay */
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        backdrop-filter: blur(5px);
        -webkit-backdrop-filter: blur(5px);
        z-index: 99999;
        display: none;
        justify-content: center;
        align-items: center;
        animation: fadeIn 0.3s ease-in-out;
    }
    
    .loading-overlay.show {
        display: flex;
    }
    
    .loading-content {
        text-align: center;
        color: white;
        animation: slideUp 0.5s ease-out;
    }
    
    .loading-spinner {
        position: relative;
        width: 80px;
        height: 80px;
        margin: 0 auto 20px;
    }
    
    .spinner-ring {
        position: absolute;
        width: 100%;
        height: 100%;
        border: 3px solid transparent;
        border-top: 3px solid #007bff;
        border-radius: 50%;
        animation: spin 1.5s linear infinite;
    }
    
    .spinner-ring:nth-child(2) {
        width: 60px;
        height: 60px;
        top: 10px;
        left: 10px;
        border-top-color: #17a2b8;
        animation-duration: 1.2s;
        animation-direction: reverse;
    }
    
    .spinner-ring:nth-child(3) {
        width: 40px;
        height: 40px;
        top: 20px;
        left: 20px;
        border-top-color: #28a745;
        animation-duration: 0.9s;
    }
    
    .loading-text {
        font-size: 1.2rem;
        font-weight: 600;
        margin-bottom: 8px;
        opacity: 0;
        animation: fadeInText 0.8s ease-out 0.3s forwards;
    }
    
    .loading-subtext {
        font-size: 0.9rem;
        opacity: 0.8;
        opacity: 0;
        animation: fadeInText 0.8s ease-out 0.6s forwards;
    }
    
    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }
    
    @@keyframes slideUp {
        from { 
            opacity: 0;
            transform: translateY(30px);
        }
        to { 
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    @@keyframes fadeInText {
        to { opacity: 1; }
    }

    /* Additional protection for modal reference numbers */
    .modal .no-format-number {
        position: relative !important;
        font-family: 'Courier New', monospace !important;
        font-variant-numeric: tabular-nums !important;
        white-space: nowrap !important;
        letter-spacing: 0.5px !important;
    }
    
    .modal .protected-reference {
        background-color: #f8f9fa !important;
        padding: 2px 4px !important;
        border-radius: 3px !important;
        border: 1px solid #dee2e6 !important;
    }
    
    /* Prevent any formatting on protected elements */
    .no-format-number,
    .protected-reference,
    .skip-auto-format,
    [data-no-format="true"],
    [data-protected="true"],
    [data-skip-format="true"] {
        /* Force original text display */
        text-transform: none !important;
    }
    
    /* Warning styling for empty reference number */
    #preview-reference-warning {
        font-size: 0.9rem;
        border-left: 4px solid #ffc107;
    }
</style>

@section Scripts {
    <script>
        // Wait for Select2 to initialize before running page-specific scripts
        $(document).ready(function() {
            // Give Select2 time to initialize
            setTimeout(function() {
                initializePageScripts();
            }, 500);
        });

        // Loading Overlay Utility Functions
        function showLoadingOverlay(text = 'در حال پردازش...', subtext = 'لطفاً منتظر بمانید') {
            const overlay = document.getElementById('loadingOverlay');
            const loadingText = overlay.querySelector('.loading-text');
            const loadingSubtext = overlay.querySelector('.loading-subtext');
            
            loadingText.textContent = text;
            loadingSubtext.textContent = subtext;
            
            overlay.classList.add('show');
            document.body.style.overflow = 'hidden';
        }
        
        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            overlay.classList.remove('show');
            document.body.style.overflow = '';
        }
        
        function initializePageScripts() {
        // Auto-fill current date/time
        document.addEventListener('DOMContentLoaded', function() {
            const now = new Date();
            const localDateTime = new Date(now.getTime() - now.getTimezoneOffset() * 60000);
            const formatted = localDateTime.toISOString().slice(0, 16);
            document.getElementById('DocumentDate').value = formatted;
        });

        // Dynamic show/hide based on payer and receiver types
        document.getElementById('payerType').addEventListener('change', function() {
            const payerType = this.value;
            const payerCustomerDiv = document.getElementById('payerCustomerDiv');
            const payerBankDiv = document.getElementById('payerBankDiv');
            
            if (payerType === '@ForexExchange.Models.PayerType.Customer') {
                payerCustomerDiv.style.display = 'block';
                payerBankDiv.style.display = 'none';
                // Clear bank account selection (Select2 compatible)
                $('[name="PayerBankAccountId"]').val('').trigger('change');
            } else if (payerType === '@ForexExchange.Models.PayerType.System') {
                payerCustomerDiv.style.display = 'none';
                payerBankDiv.style.display = 'block';
                // Clear customer selection (Select2 compatible)
                $('[name="PayerCustomerId"]').val('').trigger('change');
            } else {
                payerCustomerDiv.style.display = 'none';
                payerBankDiv.style.display = 'none';
                // Clear both selections (Select2 compatible)
                $('[name="PayerCustomerId"]').val('').trigger('change');
                $('[name="PayerBankAccountId"]').val('').trigger('change');
            }
            // Validate currency when payer type changes
            validateCurrency();
        });

        document.getElementById('receiverType').addEventListener('change', function() {
            const receiverType = this.value;
            const receiverCustomerDiv = document.getElementById('receiverCustomerDiv');
            const receiverBankDiv = document.getElementById('receiverBankDiv');
            
            if (receiverType === '@ForexExchange.Models.ReceiverType.Customer') {
                receiverCustomerDiv.style.display = 'block';
                receiverBankDiv.style.display = 'none';
                // Clear bank account selection (Select2 compatible)
                $('[name="ReceiverBankAccountId"]').val('').trigger('change');
            } else if (receiverType === '@ForexExchange.Models.ReceiverType.System') {
                receiverCustomerDiv.style.display = 'none';
                receiverBankDiv.style.display = 'block';
                // Clear customer selection (Select2 compatible)
                $('[name="ReceiverCustomerId"]').val('').trigger('change');
            } else {
                receiverCustomerDiv.style.display = 'none';
                receiverBankDiv.style.display = 'none';
                // Clear both selections (Select2 compatible)
                $('[name="ReceiverCustomerId"]').val('').trigger('change');
                $('[name="ReceiverBankAccountId"]').val('').trigger('change');
            }
            // Validate currency when receiver type changes
            validateCurrency();
        });

        // Currency validation for bank accounts
        function validateCurrency() {
            const currencySelect = document.getElementById('CurrencyCode');
            const payerBankSelect = document.querySelector('[name="PayerBankAccountId"]');
            const receiverBankSelect = document.querySelector('[name="ReceiverBankAccountId"]');
            const warningDiv = document.getElementById('currency-warning');
            
            if (!currencySelect.value) {
                warningDiv.style.display = 'none';
                return;
            }

            let hasConflict = false;
            const selectedCurrency = currencySelect.value;

            // Check payer bank account currency (Select2 compatible)
            if (payerBankSelect && payerBankSelect.value) {
                const payerOption = payerBankSelect.options[payerBankSelect.selectedIndex];
                const payerCurrency = payerOption ? payerOption.getAttribute('data-currency') : null;
                if (payerCurrency && payerCurrency !== selectedCurrency) {
                    hasConflict = true;
                }
            }

            // Check receiver bank account currency (Select2 compatible)
            if (receiverBankSelect && receiverBankSelect.value) {
                const receiverOption = receiverBankSelect.options[receiverBankSelect.selectedIndex];
                const receiverCurrency = receiverOption ? receiverOption.getAttribute('data-currency') : null;
                if (receiverCurrency && receiverCurrency !== selectedCurrency) {
                    hasConflict = true;
                }
            }

            warningDiv.style.display = hasConflict ? 'block' : 'none';
        }

        // Add currency validation on all relevant changes (Select2 compatible)
        document.getElementById('CurrencyCode').addEventListener('change', validateCurrency);
        
        // Use jQuery event delegation for Select2 elements
        $(document).on('change', '[name="PayerBankAccountId"]', function() {
            validateCurrency();
            // Auto-set PayerType to System when bank account is selected
            if (this.value && this.value !== '') {
                $('#payerType').val('@ForexExchange.Models.PayerType.System').trigger('change');
                setTimeout(() => {
                }, 50);
            }
        });
        $(document).on('change', '[name="ReceiverBankAccountId"]', function() {
            validateCurrency();
            // Auto-set ReceiverType to System when bank account is selected
            if (this.value && this.value !== '') {
                $('#receiverType').val('@ForexExchange.Models.ReceiverType.System').trigger('change');
                setTimeout(() => {
                }, 50);
            }
        });

        // Auto-generate title function (Select2 compatible)
        function generateTitle() {
            const payerType = document.getElementById('payerType').value;
            const receiverType = document.getElementById('receiverType').value;
            const amount = document.querySelector('[name="Amount"]').value;
            const currency = document.querySelector('[name="CurrencyCode"]').value;
            const docType = document.querySelector('[name="Type"]').value;
            
            let payerName = '';
            let receiverName = '';
            
            // Get payer name (Select2 compatible)
            if (payerType === '@ForexExchange.Models.PayerType.Customer') {
                const payerSelect = document.querySelector('[name="PayerCustomerId"]');
                if (payerSelect && payerSelect.selectedOptions && payerSelect.selectedOptions[0]) {
                    payerName = payerSelect.selectedOptions[0].text || 'مشتری';
                } else {
                    payerName = 'مشتری';
                }
            } else if (payerType === '@ForexExchange.Models.PayerType.System') {
                const payerBankSelect = document.querySelector('[name="PayerBankAccountId"]');
                if (payerBankSelect && payerBankSelect.selectedOptions && payerBankSelect.selectedOptions[0]) {
                    payerName = 'سیستم - ' + (payerBankSelect.selectedOptions[0].text.split(' - ')[1] || 'بانک');
                } else {
                    payerName = 'سیستم';
                }
            }
            
            // Get receiver name (Select2 compatible)
            if (receiverType === '@ForexExchange.Models.ReceiverType.Customer') {
                const receiverSelect = document.querySelector('[name="ReceiverCustomerId"]');
                if (receiverSelect && receiverSelect.selectedOptions && receiverSelect.selectedOptions[0]) {
                    receiverName = receiverSelect.selectedOptions[0].text || 'مشتری';
                } else {
                    receiverName = 'مشتری';
                }
            } else if (receiverType === '@ForexExchange.Models.ReceiverType.System') {
                const receiverBankSelect = document.querySelector('[name="ReceiverBankAccountId"]');
                if (receiverBankSelect && receiverBankSelect.selectedOptions && receiverBankSelect.selectedOptions[0]) {
                    receiverName = 'سیستم - ' + (receiverBankSelect.selectedOptions[0].text.split(' - ')[1] || 'بانک');
                } else {
                    receiverName = 'سیستم';
                }
            }
            
            // Get document type name
            let docTypeName = '';
            switch(docType) {
                case '0': docTypeName = 'نقدی'; break;
                case '1': docTypeName = 'رسید بانکی'; break;
                case '2': docTypeName = 'حواله'; break;
                default: docTypeName = 'سند';
            }
            
            // Generate title
            let title = '';
            if (amount && currency) {
                const formattedAmount = Number(amount).toLocaleString('fa-IR');
                title = `${docTypeName} - ${payerName} به ${receiverName} - ${formattedAmount} ${currency}`;
            } else {
                title = `${docTypeName} - ${payerName} به ${receiverName}`;
            }
            
            document.getElementById('documentTitle').value = title;
        }

        // Auto-generate title on field changes - now fully automatic
        function autoGenerateTitle() {
            // Always generate title automatically when key fields change
            generateTitle();
        }

        // Add auto-title generation to existing event listeners
        const originalPayerTypeListener = document.getElementById('payerType').onchange;
        document.getElementById('payerType').addEventListener('change', function() {
            setTimeout(autoGenerateTitle, 100);
        });

        const originalReceiverTypeListener = document.getElementById('receiverType').onchange;
        document.getElementById('receiverType').addEventListener('change', function() {
            setTimeout(autoGenerateTitle, 100);
        });
        
        // Add auto-title generation to other field changes (Select2 compatible)
        $(document).on('change', '[name="PayerCustomerId"]', autoGenerateTitle);
        $(document).on('change', '[name="ReceiverCustomerId"]', autoGenerateTitle);
        
        // Auto-set PayerType/ReceiverType when customers are selected
        $(document).on('change', '[name="PayerCustomerId"]', function() {
            // Auto-set PayerType to Customer when customer is selected
            if (this.value && this.value !== '') {
                $('#payerType').val('@ForexExchange.Models.PayerType.Customer').trigger('change');
            }
        });
        $(document).on('change', '[name="ReceiverCustomerId"]', function() {
            // Auto-set ReceiverType to Customer when customer is selected
            if (this.value && this.value !== '') {
                $('#receiverType').val('@ForexExchange.Models.ReceiverType.Customer').trigger('change');
            }
        });
        $(document).on('change', '[name="PayerBankAccountId"]', autoGenerateTitle);
        $(document).on('change', '[name="ReceiverBankAccountId"]', autoGenerateTitle);
        document.querySelector('[name="Amount"]').addEventListener('input', autoGenerateTitle);
        document.querySelector('[name="CurrencyCode"]').addEventListener('change', autoGenerateTitle);
        document.querySelector('[name="Type"]').addEventListener('change', autoGenerateTitle);

        // Prevent self-transactions (Select2 compatible)
        function validateSelfTransaction() {
            const payerType = document.getElementById('payerType').value;
            const receiverType = document.getElementById('receiverType').value;
            
            if (payerType === '@ForexExchange.Models.PayerType.Customer' && 
                receiverType === '@ForexExchange.Models.ReceiverType.Customer') {
                const payerCustomer = document.querySelector('[name="PayerCustomerId"]') ? document.querySelector('[name="PayerCustomerId"]').value : '';
                const receiverCustomer = document.querySelector('[name="ReceiverCustomerId"]') ? document.querySelector('[name="ReceiverCustomerId"]').value : '';
                
                if (payerCustomer && receiverCustomer && payerCustomer === receiverCustomer) {
                    alert('مشتری نمی‌تواند به خودش پرداخت کند.');
                    $('[name="ReceiverCustomerId"]').val('').trigger('change');
                }
            }
            
            if (payerType === '@ForexExchange.Models.PayerType.System' && 
                receiverType === '@ForexExchange.Models.ReceiverType.System') {
                const payerBank = document.querySelector('[name="PayerBankAccountId"]') ? document.querySelector('[name="PayerBankAccountId"]').value : '';
                const receiverBank = document.querySelector('[name="ReceiverBankAccountId"]') ? document.querySelector('[name="ReceiverBankAccountId"]').value : '';
                
                if (payerBank && receiverBank && payerBank === receiverBank) {
                    alert('حساب بانکی نمی‌تواند به خودش انتقال داشته باشد.');
                    $('[name="ReceiverBankAccountId"]').val('').trigger('change');
                }
            }
        }

        // Use jQuery event delegation for Select2 elements
        $(document).on('change', '[name="PayerCustomerId"]', validateSelfTransaction);
        $(document).on('change', '[name="ReceiverCustomerId"]', validateSelfTransaction);
        $(document).on('change', '[name="PayerBankAccountId"]', validateSelfTransaction);
        $(document).on('change', '[name="ReceiverBankAccountId"]', validateSelfTransaction);

        // Form validation and confirmation
        document.querySelector('form').addEventListener('submit', function(e) {
            e.preventDefault(); // Always prevent initial submission
            
            const requiredFields = document.querySelectorAll('input[required], select[required]');
            let isValid = true;

            requiredFields.forEach(field => {
                if (!field.value.trim()) {
                    field.classList.add('is-invalid');
                    isValid = false;
                } else {
                    field.classList.remove('is-invalid');
                }
            });

            if (!isValid) {
                alert('لطفاً تمامی فیلدهای اجباری را پر کنید.');
                return;
            }

            // Show confirmation modal
            showConfirmationModal();
        });

        // File validation (only if file is selected)
        document.querySelector('input[type="file"]').addEventListener('change', function (e) {
            const file = e.target.files[0];
            const ocrButton = document.getElementById('ocrButton');
            
            if (file) {
                const maxSize = 10 * 1024 * 1024; // 10MB
                const allowedTypes = ['application/pdf', 'image/jpeg', 'image/jpg', 'image/png', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];

                if (file.size > maxSize) {
                    alert('حجم فایل نمی‌تواند بیشتر از ۱۰ مگابایت باشد.');
                    e.target.value = '';
                    ocrButton.style.display = 'none';
                    return;
                }

                if (!allowedTypes.includes(file.type)) {
                    alert('فرمت فایل مجاز نیست. فرمت‌های مجاز: PDF, JPG, PNG, DOC, DOCX');
                    e.target.value = '';
                    ocrButton.style.display = 'none';
                    return;
                }

                // Show OCR button only for images
                const imageTypes = ['image/jpeg', 'image/jpg', 'image/png'];
                if (imageTypes.includes(file.type)) {
                    ocrButton.style.display = 'block';
                } else {
                    ocrButton.style.display = 'none';
                }
            } else {
                ocrButton.style.display = 'none';
            }
        });

        // OCR Processing Functions
        let ocrData = {};

        function processOcr() {
            const fileInput = document.getElementById('documentFile');
            const file = fileInput.files[0];
            
            if (!file) {
                alert('لطفاً ابتدا تصویر را انتخاب کنید.');
                return;
            }

            // Show loading
            const ocrButton = document.getElementById('ocrButton');
            const originalText = ocrButton.innerHTML;
            ocrButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> در حال پردازش...';
            ocrButton.disabled = true;

            // Create FormData
            const formData = new FormData();
            formData.append('imageFile', file);
            formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

            // Send to server
            fetch('@Url.Action("ProcessOcr", "AccountingDocuments")', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                ocrButton.innerHTML = originalText;
                ocrButton.disabled = false;

                if (data.success) {
                    ocrData = data.data;
                    showOcrResults(data.data);
                } else {
                    alert('خطا در OCR: ' + (data.message || 'خطای ناشناخته'));
                }
            })
            .catch(error => {
                ocrButton.innerHTML = originalText;
                ocrButton.disabled = false;
                alert('خطا در ارتباط با سرور: ' + error.message);
            });
        }

        function showOcrResults(data) {
            const resultsDiv = document.getElementById('ocrResults');
            const contentDiv = document.getElementById('ocrContent');
            
            let content = '<div class="row">';
            
            if (data.amount) {
                content += `<div class="col-md-4 mb-2"><strong>مبلغ:</strong> ${data.amount}</div>`;
            }
            if (data.referenceId) {
                content += `<div class="col-md-4 mb-2"><strong>شماره تراکنش:</strong> ${data.referenceId}</div>`;
            }
            if (data.date) {
                content += `<div class="col-md-4 mb-2"><strong>تاریخ:</strong> ${data.date}</div>`;
            }
            
            content += '</div>';
            
            contentDiv.innerHTML = content;
            resultsDiv.style.display = 'block';
        }

        function applyOcrResults() {
            if (ocrData.amount) {
                const amountField = document.querySelector('[name="Amount"]');
                if (amountField && !amountField.value) {
                    // Extract numeric value from amount
                    let numericAmount = ocrData.amount.replace(/[^\d]/g, '');
                    if (numericAmount) {
                        // Check if currency is IRR (Iranian Toman)
                        const currencyField = document.querySelector('[name="CurrencyCode"]');
                        if (currencyField && currencyField.value === 'IRR') {
                            // Drop one zero for IRR currency (convert from Rial to Toman)
                            numericAmount = numericAmount.slice(0, -1) || '0';
                        }
                        amountField.value = numericAmount;
                    }
                }
            }
            
            if (ocrData.referenceId) {
                const refField = document.querySelector('[name="ReferenceNumber"]');
                if (refField && !refField.value) {
                    refField.value = ocrData.referenceId;
                }
            }
            
            if (ocrData.date) {
                const dateField = document.querySelector('[name="DocumentDate"]');
                if (dateField && !dateField.value) {
                    // Convert Shamsi to Miladi date
                    try {
                        const miladiDate = convertShamsiToMiladi(ocrData.date);
                        if (miladiDate) {
                            dateField.value = miladiDate;
                        }
                    } catch (e) {
                    }
                }
            }
            
            // Auto-generate title after applying OCR results
            setTimeout(autoGenerateTitle, 100);
            
            hideOcrResults();
            alert('نتایج OCR اعمال شد!');
        }

        // Convert Shamsi (Persian) date to Miladi (Gregorian) date
        function convertShamsiToMiladi(shamsiDate) {
            try {
                // Parse Shamsi date (format: YYYY/MM/DD or YYYY-MM-DD)
                const parts = shamsiDate.replace(/[\u06F0-\u06F9]/g, function(w) {
                    return String.fromCharCode(w.charCodeAt(0) - '\u06F0'.charCodeAt(0) + '0'.charCodeAt(0));
                }).split(/[\/\-]/);
                
                if (parts.length !== 3) return null;
                
                const shamsiYear = parseInt(parts[0]);
                const shamsiMonth = parseInt(parts[1]);
                const shamsiDay = parseInt(parts[2]);
                
                // Convert Shamsi to Miladi using approximate calculation
                // Note: This is a simplified conversion. For more accuracy, you might want to use a proper Persian calendar library
                const miladiYear = shamsiYear + 621;
                let miladiMonth = shamsiMonth + 3;
                let miladiDay = shamsiDay + 21;
                
                // Adjust for month overflow
                if (miladiMonth > 12) {
                    miladiMonth -= 12;
                    miladiYear++;
                }
                
                // Create date and adjust for day overflow
                const baseDate = new Date(miladiYear, miladiMonth - 1, 1);
                baseDate.setDate(miladiDay);
                
                // Format for datetime-local input (YYYY-MM-DDTHH:MM)
                const year = baseDate.getFullYear();
                const month = String(baseDate.getMonth() + 1).padStart(2, '0');
                const day = String(baseDate.getDate()).padStart(2, '0');
                
                return `${year}-${month}-${day}T12:00`;
            } catch (e) {
                return null;
            }
        }

        function hideOcrResults() {
            document.getElementById('ocrResults').style.display = 'none';
        }

        // Transaction Confirmation Modal Functions
        function showConfirmationModal() {
            
            // Populate transaction preview
            populateTransactionPreview();
            
            // Show loading and fetch balance effects
            document.getElementById('balance-effects-loading').style.display = 'block';
            document.getElementById('balance-effects-content').style.display = 'none';
            
            // Show modal
            const modal = new bootstrap.Modal(document.getElementById('confirmationModal'));
            modal.show();
            
            // Fetch balance effects
            fetchBalanceEffects();
        }

        function populateTransactionPreview() {
            
            // Get form values directly from form elements (more reliable than FormData)
            const form = document.querySelector('form');
            
            if (!form) {
                return;
            }
            
            // Get values directly from form elements instead of FormData
            const getFormValue = (name) => {
                const element = form.querySelector(`[name="${name}"]`);
                return element ? element.value : '';
            };
            
            
            // Create a formData-like object for backward compatibility
            const formData = {
                get: (name) => getFormValue(name)
            };
            
            // Document type - Handle both string and numeric values
            const typeValue = formData.get('Type');
            let typeName = 'نامشخص';
            if (typeValue === '0' || typeValue === 'Cash') {
                typeName = 'نقدی';
            } else if (typeValue === '1' || typeValue === 'Havala') {
                typeName = 'حواله';
            } else {
            }
            document.getElementById('preview-type').textContent = typeName;
            
            // CRITICAL DEBUG: Check if modal elements exist
            const elements = {
                'preview-type': document.getElementById('preview-type'),
                'preview-payer': document.getElementById('preview-payer'),
                'preview-receiver': document.getElementById('preview-receiver'),
                'preview-title': document.getElementById('preview-title'),
                'preview-amount': document.getElementById('preview-amount'),
                'preview-date': document.getElementById('preview-date')
            };
            
            Object.keys(elements).forEach(id => {
                const element = elements[id];
                if (element) {
                }
            });
            
            // Title
            document.getElementById('preview-title').textContent = formData.get('Title') || 'بدون عنوان';
            
            // Amount and currency
            const amount = formData.get('Amount') || '0';
            const currency = formData.get('CurrencyCode') || '';
            const formattedAmount = Number(amount).toLocaleString('fa-IR') + ' ' + currency;
            document.getElementById('preview-amount').textContent = formattedAmount;
            
            // Payer - Enhanced Select2 support with ULTIMATE DEBUG
            const payerType = formData.get('PayerType');
            let payerName = 'نامشخص';
            
            if (payerType === '0' || payerType === 'Customer') { // Customer
                const payerCustomerId = formData.get('PayerCustomerId');
                
                const payerSelect = document.querySelector('[name="PayerCustomerId"]');
                
                if (payerSelect) {
                    for (let i = 0; i < payerSelect.options.length; i++) {
                    }
                }
                
                if (payerCustomerId && payerSelect) {
                    // Try Select2 first (more reliable for dynamically loaded options)
                    try {
                        const select2Data = $(payerSelect).select2('data');
                        
                        if (select2Data && select2Data.length > 0 && select2Data[0].text && select2Data[0].text !== payerCustomerId) {
                            payerName = select2Data[0].text;
                        } else {
                            // Fallback to native select option
                            const selectedOption = payerSelect.querySelector(`option[value="${payerCustomerId}"]`);
                            if (selectedOption) {
                            }
                            
                            if (selectedOption && selectedOption.textContent) {
                                payerName = selectedOption.textContent;
                            } else {
                                payerName = 'مشتری (شناسه: ' + payerCustomerId + ')';
                            }
                        }
                    } catch (e) {
                        // Fallback if Select2 fails
                        const selectedOption = payerSelect.querySelector(`option[value="${payerCustomerId}"]`);
                        if (selectedOption && selectedOption.textContent) {
                            payerName = selectedOption.textContent;
                        } else {
                            payerName = 'مشتری (شناسه: ' + payerCustomerId + ')';
                        }
                    }
                } else {
                    payerName = 'مشتری (انتخاب نشده)';
                }
            } else if (payerType === '1' || payerType === 'System') { // System
                const payerBankId = formData.get('PayerBankAccountId');
                
                const payerBankSelect = document.querySelector('[name="PayerBankAccountId"]');
                
                if (payerBankSelect) {
                    for (let i = 0; i < Math.min(3, payerBankSelect.options.length); i++) {
                    }
                }
                
                if (payerBankId && payerBankSelect) {
                    // Try Select2 first
                    try {
                        const select2Data = $(payerBankSelect).select2('data');
                        
                        if (select2Data && select2Data.length > 0 && select2Data[0].text && select2Data[0].text !== payerBankId) {
                            const bankText = select2Data[0].text;
                            // Extract bank name from format: "AccountNumber - BankName (Currency)"
                            const bankMatch = bankText.match(/\s*-\s*([^(]+)/);
                            const bankName = bankMatch ? bankMatch[1].trim() : bankText;
                            payerName = 'سیستم - ' + bankName;
                        } else {
                            // Fallback to native select option
                            const selectedOption = payerBankSelect.querySelector(`option[value="${payerBankId}"]`);
                            if (selectedOption && selectedOption.textContent) {
                                const bankText = selectedOption.textContent;
                                const bankMatch = bankText.match(/\s*-\s*([^(]+)/);
                                const bankName = bankMatch ? bankMatch[1].trim() : bankText;
                                payerName = 'سیستم - ' + bankName;
                            } else {
                                payerName = 'سیستم (حساب شناسه: ' + payerBankId + ')';
                            }
                        }
                    } catch (e) {
                        // Fallback if Select2 fails
                        const selectedOption = payerBankSelect.querySelector(`option[value="${payerBankId}"]`);
                        if (selectedOption && selectedOption.textContent) {
                            const bankText = selectedOption.textContent;
                            const bankMatch = bankText.match(/\s*-\s*([^(]+)/);
                            const bankName = bankMatch ? bankMatch[1].trim() : bankText;
                            payerName = 'سیستم - ' + bankName;
                        } else {
                            payerName = 'سیستم (حساب شناسه: ' + payerBankId + ')';
                        }
                    }
                } else {
                    payerName = 'سیستم (حساب انتخاب نشده)';
                }
            } else {
            }
            
            document.getElementById('preview-payer').textContent = payerName;
            
            // Receiver - Enhanced Select2 support
            const receiverType = formData.get('ReceiverType');
            let receiverName = 'نامشخص';
            if (receiverType === '0' || receiverType === 'Customer') { // Customer
                const receiverCustomerId = formData.get('ReceiverCustomerId');
                const receiverSelect = document.querySelector('[name="ReceiverCustomerId"]');
                if (receiverCustomerId && receiverSelect) {
                    // Try Select2 first (more reliable for dynamically loaded options)
                    try {
                        const select2Data = $(receiverSelect).select2('data');
                        if (select2Data && select2Data.length > 0 && select2Data[0].text && select2Data[0].text !== receiverCustomerId) {
                            receiverName = select2Data[0].text;
                        } else {
                            // Fallback to native select option
                            const selectedOption = receiverSelect.querySelector(`option[value="${receiverCustomerId}"]`);
                            if (selectedOption && selectedOption.textContent) {
                                receiverName = selectedOption.textContent;
                            } else {
                                receiverName = 'مشتری (شناسه: ' + receiverCustomerId + ')';
                            }
                        }
                    } catch (e) {
                        // Fallback if Select2 fails
                        const selectedOption = receiverSelect.querySelector(`option[value="${receiverCustomerId}"]`);
                        if (selectedOption && selectedOption.textContent) {
                            receiverName = selectedOption.textContent;
                        } else {
                            receiverName = 'مشتری (شناسه: ' + receiverCustomerId + ')';
                        }
                    }
                } else {
                    receiverName = 'مشتری (انتخاب نشده)';
                }
            } else if (receiverType === '1' || receiverType === 'System') { // System
                const receiverBankId = formData.get('ReceiverBankAccountId');
                const receiverBankSelect = document.querySelector('[name="ReceiverBankAccountId"]');
                if (receiverBankId && receiverBankSelect) {
                    // Try Select2 first
                    try {
                        const select2Data = $(receiverBankSelect).select2('data');
                        if (select2Data && select2Data.length > 0 && select2Data[0].text && select2Data[0].text !== receiverBankId) {
                            const bankText = select2Data[0].text;
                            // Extract bank name from format: "AccountNumber - BankName (Currency)"
                            const bankMatch = bankText.match(/\s*-\s*([^(]+)/);
                            const bankName = bankMatch ? bankMatch[1].trim() : bankText;
                            receiverName = 'سیستم - ' + bankName;
                        } else {
                            // Fallback to native select option
                            const selectedOption = receiverBankSelect.querySelector(`option[value="${receiverBankId}"]`);
                            if (selectedOption && selectedOption.textContent) {
                                const bankText = selectedOption.textContent;
                                const bankMatch = bankText.match(/\s*-\s*([^(]+)/);
                                const bankName = bankMatch ? bankMatch[1].trim() : bankText;
                                receiverName = 'سیستم - ' + bankName;
                            } else {
                                receiverName = 'سیستم (حساب شناسه: ' + receiverBankId + ')';
                            }
                        }
                    } catch (e) {
                        // Fallback if Select2 fails
                        const selectedOption = receiverBankSelect.querySelector(`option[value="${receiverBankId}"]`);
                        if (selectedOption && selectedOption.textContent) {
                            const bankText = selectedOption.textContent;
                            const bankMatch = bankText.match(/\s*-\s*([^(]+)/);
                            const bankName = bankMatch ? bankMatch[1].trim() : bankText;
                            receiverName = 'سیستم - ' + bankName;
                        } else {
                            receiverName = 'سیستم (حساب شناسه: ' + receiverBankId + ')';
                        }
                    }
                } else {
                    receiverName = 'سیستم (حساب انتخاب نشده)';
                }
            }
            document.getElementById('preview-receiver').textContent = receiverName;
            
            // Date
            const docDate = formData.get('DocumentDate');
            if (docDate) {
                const date = new Date(docDate);
                const persianDate = date.toLocaleDateString('fa-IR', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
                document.getElementById('preview-date').textContent = persianDate;
            } else {
                document.getElementById('preview-date').textContent = 'تاریخ انتخاب نشده';
            }
            
            /* 
             * Reference Number Handling with Anti-Formatting Protection
             * ========================================================
             * 
             * This section implements a two-state display for reference numbers:
             * 1. If reference number exists: Display it WITHOUT comma formatting (e.g., "654456" not "65,456")
             * 2. If reference number is empty/null: Show warning "بهتر است تکمیل شود"
             * 
             * Anti-formatting Protection:
             * - Multiple data attributes (data-no-format, data-protected, etc.) prevent global formatters
             * - CSS classes (no-format-number, skip-auto-format) provide additional protection
             * - The auto-currency-display-formatter.js has been updated to respect these attributes
             * 
             * Related files:
             * - /wwwroot/js/auto-currency-display-formatter.js (shouldSkipElement function updated)
             */
            const refNumber = formData.get('ReferenceNumber');
            if (refNumber && refNumber.trim()) {
                // Show reference number
                document.getElementById('preview-reference').style.display = 'block';
                document.getElementById('preview-reference-warning').style.display = 'none';
                
                // Set the reference number WITHOUT comma formatting
                const refElement = document.getElementById('preview-reference-number');
                refElement.textContent = refNumber.trim();
                
                // Apply multiple protection methods to prevent global formatters
                refElement.setAttribute('data-original-value', refNumber.trim());
                refElement.setAttribute('data-no-format', 'true');
                refElement.setAttribute('data-protected', 'true');
                refElement.setAttribute('data-no-comma', 'true');
                refElement.setAttribute('data-skip-format', 'true');
                refElement.classList.add('no-format-number', 'protected-reference', 'skip-auto-format');
                
                // Protect against future changes
                setTimeout(function() {
                    if (refElement.textContent !== refNumber.trim()) {
                        refElement.textContent = refNumber.trim();
                    }
                }, 100);
            } else {
                // Show warning for empty reference number
                document.getElementById('preview-reference').style.display = 'none';
                document.getElementById('preview-reference-warning').style.display = 'block';
            }
            
        }

        function ensureCorrectTypes() {
            
            const payerCustomerId = document.querySelector('[name="PayerCustomerId"]').value;
            const payerBankAccountId = document.querySelector('[name="PayerBankAccountId"]').value;
            const receiverCustomerId = document.querySelector('[name="ReceiverCustomerId"]').value;
            const receiverBankAccountId = document.querySelector('[name="ReceiverBankAccountId"]').value;
            
            // Fix PayerType
            if (payerCustomerId && payerCustomerId !== '') {
                $('#payerType').val('@ForexExchange.Models.PayerType.Customer').trigger('change');
            } else if (payerBankAccountId && payerBankAccountId !== '') {
                $('#payerType').val('@ForexExchange.Models.PayerType.System').trigger('change');
            }
            
            // Fix ReceiverType
            if (receiverCustomerId && receiverCustomerId !== '') {
                $('#receiverType').val('@ForexExchange.Models.ReceiverType.Customer').trigger('change');
            } else if (receiverBankAccountId && receiverBankAccountId !== '') {
                $('#receiverType').val('@ForexExchange.Models.ReceiverType.System').trigger('change');
            }
            
            // Wait a moment for Select2 to update
            setTimeout(() => {
            }, 100);
        }

        function fetchBalanceEffects() {
            const form = document.querySelector('form');
            
            // Safety check: Ensure types are correct before sending
            ensureCorrectTypes();
            
            // Create a structured object instead of FormData for better model binding
            const transactionData = {
                Type: parseInt(form.querySelector('[name="Type"]').value) || 0,
                PayerType: parseInt(form.querySelector('[name="PayerType"]').value) || 0,
                ReceiverType: parseInt(form.querySelector('[name="ReceiverType"]').value) || 0,
                PayerCustomerId: form.querySelector('[name="PayerCustomerId"]').value ? parseInt(form.querySelector('[name="PayerCustomerId"]').value) : null,
                ReceiverCustomerId: form.querySelector('[name="ReceiverCustomerId"]').value ? parseInt(form.querySelector('[name="ReceiverCustomerId"]').value) : null,
                PayerBankAccountId: form.querySelector('[name="PayerBankAccountId"]').value ? parseInt(form.querySelector('[name="PayerBankAccountId"]').value) : null,
                ReceiverBankAccountId: form.querySelector('[name="ReceiverBankAccountId"]').value ? parseInt(form.querySelector('[name="ReceiverBankAccountId"]').value) : null,
                Amount: parseFloat(form.querySelector('[name="Amount"]').value) || 0,
                CurrencyCode: form.querySelector('[name="CurrencyCode"]').value || '',
                Title: form.querySelector('[name="Title"]').value || '',
                Description: form.querySelector('[name="Description"]').value || '',
                DocumentDate: form.querySelector('[name="DocumentDate"]').value || '',
                ReferenceNumber: form.querySelector('[name="ReferenceNumber"]').value || ''
            };
            
            // Convert empty strings to null for proper model binding
            Object.keys(transactionData).forEach(key => {
                if (transactionData[key] === '' || transactionData[key] === 'null') {
                    transactionData[key] = null;
                }
                // Also convert 0 values for ID fields to null (except for enum fields)
                if ((key.includes('Id') || key.includes('CustomerId') || key.includes('BankAccountId')) && transactionData[key] === 0) {
                    transactionData[key] = null;
                }
            });
            
            // Debug: Log transaction data being sent
            
            // Final verification
            if (transactionData.ReceiverBankAccountId && transactionData.ReceiverType === 0) {
                transactionData.ReceiverType = 1;
            }
            if (transactionData.PayerBankAccountId && transactionData.PayerType === 0) {
                transactionData.PayerType = 1;
            }
            
            // Get anti-forgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            
            fetch('@Url.Action("PreviewTransactionEffects", "AccountingDocuments")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify(transactionData)
            })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => {
                        throw new Error(`HTTP error! status: ${response.status}. Response: ${text.substring(0, 200)}...`);
                    });
                }
                return response.json();
            })
            .then(data => {
                
                document.getElementById('balance-effects-loading').style.display = 'none';
                document.getElementById('balance-effects-content').style.display = 'block';
                
                if (data.success) {
                    displayBalanceEffects(data.effects);
                    displayWarnings(data.warnings);
                } else {
                    document.getElementById('balance-effects-content').innerHTML = 
                        '<div class="alert alert-danger"><i class="fas fa-exclamation-triangle"></i> خطا در محاسبه تأثیرات: ' + (data.message || 'خطای نامشخص') + '</div>';
                }
            })
            .catch(error => {
                
                document.getElementById('balance-effects-loading').style.display = 'none';
                document.getElementById('balance-effects-content').style.display = 'block';
                document.getElementById('balance-effects-content').innerHTML = 
                    '<div class="alert alert-danger"><i class="fas fa-exclamation-triangle"></i> خطا در ارتباط با سرور: ' + error.message + 
                    '<br><small class="mt-2 d-block">جزئیات خطا در کنسول مرورگر قابل مشاهده است.</small></div>';
            });
        }

        function displayBalanceEffects(effects) {
            let hasAnyEffects = false;
            
            // Customer effects with beautiful table styling
            if (effects.customerEffects && effects.customerEffects.length > 0) {
                const customerDiv = document.getElementById('customer-effects');
                let customerHtml = `
                    <div class="mb-3">
                        <h6 class="text-primary"><i class="fas fa-user"></i> تأثیرات موجودی مشتری</h6>
                        <div class="table-responsive">
                            <table class="table table-sm table-bordered">
                                <thead class="table-light">
                                    <tr>
                                        <th class="text-center">مشتری</th>
                                        <th class="text-center">ارز</th>
                                        <th class="text-center">موجودی قبل</th>
                                        <th class="text-center">موجودی بعد</th>
                                        <th class="text-center">تغییر</th>
                                    </tr>
                                </thead>
                                <tbody>
                `;
                
                effects.customerEffects.forEach(effect => {
                    const changeClass = effect.change >= 0 ? 'text-success' : 'text-danger';
                    const changeIcon = effect.change >= 0 ? '+' : '';
                    const formattedCurrentBalance = effect.currentBalance.toLocaleString('fa-IR');
                    const formattedNewBalance = effect.newBalance.toLocaleString('fa-IR');
                    const formattedChange = effect.change.toLocaleString('fa-IR');
                    const newBalanceColorClass = effect.newBalance >= 0 ? 'text-success' : 'text-danger';
                    
                    customerHtml += `
                        <tr>
                            <td class="text-center fw-bold">${effect.customerName}</td>
                            <td class="text-center fw-bold">${effect.currency}</td>
                            <td class="text-center" dir="ltr">${formattedCurrentBalance}</td>
                            <td class="text-center fw-bold ${newBalanceColorClass}" dir="ltr">${formattedNewBalance}</td>
                            <td class="text-center ${changeClass}" dir="ltr">${changeIcon}${formattedChange}</td>
                        </tr>
                    `;
                });
                
                customerHtml += `
                                </tbody>
                            </table>
                        </div>
                    </div>
                `;
                
                customerDiv.innerHTML = customerHtml;
                customerDiv.style.display = 'block';
                hasAnyEffects = true;
            } else {
                document.getElementById('customer-effects').style.display = 'none';
            }
            
            // Bank account effects with beautiful table styling
            if (effects.bankAccountEffects && effects.bankAccountEffects.length > 0) {
                const bankDiv = document.getElementById('bank-effects');
                let bankHtml = `
                    <div class="mb-3">
                        <h6 class="text-info"><i class="fas fa-university"></i> تأثیرات حساب‌های بانکی</h6>
                        <div class="table-responsive">
                            <table class="table table-sm table-bordered">
                                <thead class="table-light">
                                    <tr>
                                        <th class="text-center">بانک</th>
                                        <th class="text-center">شماره حساب</th>
                                        <th class="text-center">ارز</th>
                                        <th class="text-center">موجودی قبل</th>
                                        <th class="text-center">موجودی بعد</th>
                                        <th class="text-center">تغییر</th>
                                    </tr>
                                </thead>
                                <tbody>
                `;
                
                effects.bankAccountEffects.forEach(effect => {
                    const changeClass = effect.change >= 0 ? 'text-success' : 'text-danger';
                    const changeIcon = effect.change >= 0 ? '+' : '';
                    const formattedCurrentBalance = effect.currentBalance.toLocaleString('fa-IR');
                    const formattedNewBalance = effect.newBalance.toLocaleString('fa-IR');
                    const formattedChange = effect.change.toLocaleString('fa-IR');
                    const newBalanceColorClass = effect.newBalance >= 0 ? 'text-success' : 'text-danger';
                    
                    bankHtml += `
                        <tr>
                            <td class="text-center fw-bold">${effect.bankName}</td>
                            <td class="text-center no-format-number">${effect.accountNumber}</td>
                            <td class="text-center fw-bold">${effect.currency}</td>
                            <td class="text-center" dir="ltr">${formattedCurrentBalance}</td>
                            <td class="text-center fw-bold ${newBalanceColorClass}" dir="ltr">${formattedNewBalance}</td>
                            <td class="text-center ${changeClass}" dir="ltr">${changeIcon}${formattedChange}</td>
                        </tr>
                    `;
                });
                
                bankHtml += `
                                </tbody>
                            </table>
                        </div>
                    </div>
                `;
                
                bankDiv.innerHTML = bankHtml;
                bankDiv.style.display = 'block';
                hasAnyEffects = true;
            } else {
                document.getElementById('bank-effects').style.display = 'none';
            }
            
            // Show message if no effects found
            if (!hasAnyEffects) {
                document.getElementById('balance-effects-content').innerHTML = 
                    '<div class="alert alert-warning">هیچ تأثیری بر ترازها محاسبه نشد.</div>';
            }

            // Hide loading and show content
            document.getElementById('balance-effects-loading').style.display = 'none';
            document.getElementById('balance-effects-content').style.display = 'block';
        }

        function displayWarnings(warnings) {
            if (warnings && warnings.length > 0) {
                const warningsDiv = document.getElementById('confirmation-warnings');
                const warningsList = document.getElementById('warnings-list');
                
                let warningsHtml = '';
                warnings.forEach(warning => {
                    warningsHtml += `<li>${warning}</li>`;
                });
                
                warningsList.innerHTML = warningsHtml;
                warningsDiv.style.display = 'block';
            } else {
                document.getElementById('confirmation-warnings').style.display = 'none';
            }
        }

        // Confirm submit button handler - AJAX Implementation
        document.getElementById('confirmSubmitBtn').addEventListener('click', function() {
            console.log('=== AJAX Form Submission Started ===');
            
            const confirmBtn = this;
            const originalText = confirmBtn.innerHTML;
            
            // Show beautiful loading overlay
            showLoadingOverlay('در حال ثبت سند...', 'تأیید تراکنش و بروزرسانی ترازها');
            
            // Show loading state on button too
            confirmBtn.disabled = true;
            confirmBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> در حال ثبت...';
            
            // Prepare form data
            const form = document.querySelector('form');
            console.log('Form element:', form);
            console.log('Form action:', form.action);
            console.log('Form method:', form.method);
            console.log('Form enctype:', form.enctype);
            
            const formData = new FormData();
            
            // Add all form fields to FormData
            const formElements = form.elements;
            console.log(`Total form elements: ${formElements.length}`);
            
            for (let i = 0; i < formElements.length; i++) {
                const element = formElements[i];
                console.log(`Element ${i}:`, {
                    name: element.name,
                    type: element.type,
                    tagName: element.tagName,
                    value: element.value,
                    disabled: element.disabled,
                    checked: element.checked,
                    required: element.required
                });
                
                if (element.name && !element.disabled && element.type !== 'submit' && element.type !== 'button') {
                    if (element.type === 'file') {
                        // Handle file upload - only append if file is selected
                        if (element.files && element.files.length > 0) {
                            console.log(`Appending file: ${element.name} = ${element.files[0].name} (${element.files[0].size} bytes)`);
                            formData.append(element.name, element.files[0]);
                        } else {
                            console.log(`No file selected for: ${element.name}`);
                        }
                    } else if (element.type === 'checkbox') {
                        // Handle checkboxes - append true/false values
                        const value = element.checked ? 'true' : 'false';
                        console.log(`Appending checkbox: ${element.name} = ${value}`);
                        formData.append(element.name, value);
                    } else if (element.type === 'radio') {
                        // Handle radio buttons - only append if checked
                        if (element.checked) {
                            console.log(`Appending radio (checked): ${element.name} = ${element.value}`);
                            formData.append(element.name, element.value);
                        } else {
                            console.log(`Skipping radio (not checked): ${element.name}`);
                        }
                    } else if (element.tagName === 'SELECT') {
                        // Handle select elements - always append value (even if empty for validation)
                        console.log(`Appending select: ${element.name} = '${element.value}'`);
                        formData.append(element.name, element.value || '');
                    } else {
                        // Handle all other input types - always append value for proper validation
                        console.log(`Appending input: ${element.name} = '${element.value}'`);
                        formData.append(element.name, element.value || '');
                    }
                } else {
                    console.log(`Skipping element: ${element.name} (disabled: ${element.disabled}, type: ${element.type})`);
                }
            }
            
            // Ensure required anti-forgery token is included
            const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]');
            if (antiForgeryToken) {
                console.log(`Anti-forgery token found: ${antiForgeryToken.value.substring(0, 20)}...`);
                
                // Check if token was already added during form processing
                let tokenAlreadyAdded = false;
                for (let [key, value] of formData.entries()) {
                    if (key === '__RequestVerificationToken') {
                        tokenAlreadyAdded = true;
                        console.log('Anti-forgery token already in FormData, skipping duplicate');
                        break;
                    }
                }
                
                if (!tokenAlreadyAdded) {
                    formData.append('__RequestVerificationToken', antiForgeryToken.value);
                    console.log('Anti-forgery token added to FormData');
                }
            } else {
                console.error('Anti-forgery token NOT found!');
                alert('خطا: توکن امنیتی یافت نشد. لطفاً صفحه را رفرش کنید.');
                confirmBtn.disabled = false;
                confirmBtn.innerHTML = originalText;
                return;
            }
            
            // Debug: Log final FormData contents
            console.log('=== Final FormData Contents ===');
            console.log('Form action:', form.action);
            console.log('Form method:', form.method);
            console.log('Form enctype:', form.enctype);
            
            let formDataCount = 0;
            for (let [key, value] of formData.entries()) {
                formDataCount++;
                if (value instanceof File) {
                    console.log(`${formDataCount}. ${key} = File: ${value.name} (${value.size} bytes, ${value.type})`);
                } else {
                    console.log(`${formDataCount}. ${key} = '${value}'`);
                }
            }
            
            console.log(`Total FormData entries: ${formDataCount}`);
            
            // Basic validation before sending
            const requiredFields = ['Type', 'PayerType', 'ReceiverType', 'Amount', 'CurrencyCode'];
            const missingFields = [];
            
            for (let field of requiredFields) {
                let found = false;
                for (let [key, value] of formData.entries()) {
                    if (key === field && value && value.trim() !== '') {
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    missingFields.push(field);
                }
            }
            
            if (missingFields.length > 0) {
                console.error('Missing required fields:', missingFields);
                alert(`فیلدهای اجباری خالی هستند: ${missingFields.join(', ')}`);
                confirmBtn.disabled = false;
                confirmBtn.innerHTML = originalText;
                return;
            }
            
            if (formDataCount === 0) {
                console.error('ERROR: No FormData entries found!');
                alert('خطا: هیچ داده‌ای برای ارسال یافت نشد.');
                confirmBtn.disabled = false;
                confirmBtn.innerHTML = originalText;
                return;
            }
            
            // Send AJAX request
            console.log('=== Sending AJAX Request ===');
            console.log('URL:', form.action);
            console.log('Method: POST');
            console.log('Body: FormData (see above)');
            console.log('Headers: X-Requested-With = XMLHttpRequest');
            
            const startTime = Date.now();
            
            fetch(form.action, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                    // Note: Don't manually set Content-Type when using FormData
                    // The browser will set it automatically with the boundary
                }
            })
            .then(response => {
                const responseTime = Date.now() - startTime;
                console.log('=== Response Received ===');
                console.log(`Response time: ${responseTime}ms`);
                console.log('Response status:', response.status);
                console.log('Response statusText:', response.statusText);
                console.log('Response ok:', response.ok);
                console.log('Response headers:');
                for (let [key, value] of response.headers.entries()) {
                    console.log(`  ${key}: ${value}`);
                }
                
                if (response.ok) {
                    // Check if response is JSON or HTML
                    const contentType = response.headers.get('content-type');
                    if (contentType && contentType.includes('application/json')) {
                        return response.json();
                    } else {
                        return response.text().then(text => ({ isHtml: true, content: text }));
                    }
                } else {
                    // Try to get error details from response
                    const contentType = response.headers.get('content-type');
                    console.log('Error response content-type:', contentType);
                    
                    if (contentType && contentType.includes('application/json')) {
                        return response.json().then(errorData => {
                            console.log('Error JSON data:', errorData);
                            throw new Error(errorData.message || `HTTP ${response.status}: ${response.statusText}`);
                        });
                    } else {
                        return response.text().then(errorText => {
                            console.log('Error response body length:', errorText.length);
                            console.log('Error response body (first 500 chars):', errorText.substring(0, 500));
                            
                            // Check if it's an anti-forgery token error
                            if (errorText.includes('antiforgery') || errorText.includes('verification') || errorText.includes('token')) {
                                throw new Error('خطای احراز هویت: لطفاً صفحه را رفرش کنید و دوباره تلاش کنید.');
                            }
                            
                            // Check if it's a model validation error
                            if (errorText.includes('validation') || errorText.includes('ModelState')) {
                                throw new Error('خطای اعتبارسنجی داده‌ها: لطفاً فیلدهای اجباری را پر کنید.');
                            }
                            
                            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                        });
                    }
                }
            })
            .then(data => {
                // Hide loading overlay
                hideLoadingOverlay();
                
                // Hide modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('confirmationModal'));
                modal.hide();
                
                if (data.isHtml) {
                    // Handle HTML response (fallback)
                    if (data.content.includes('class="alert alert-success"') || data.content.includes('TempData["SuccessMessage"]')) {
                        showSuccessMessage('سند حسابداری با موفقیت ثبت شد.');
                        setTimeout(() => {
                            window.location.href = '@Url.Action("Index", "AccountingDocuments")';
                        }, 2000);
                    } else {
                        const parser = new DOMParser();
                        const doc = parser.parseFromString(data.content, 'text/html');
                        const errorAlerts = doc.querySelectorAll('.alert-danger, .text-danger');
                        
                        let errorMessages = [];
                        errorAlerts.forEach(alert => {
                            if (alert.textContent.trim()) {
                                errorMessages.push(alert.textContent.trim());
                            }
                        });
                        
                        if (errorMessages.length > 0) {
                            showErrorMessage('خطاهای اعتبارسنجی:', errorMessages);
                        } else {
                            showSuccessMessage('عملیات با موفقیت انجام شد.');
                        }
                    }
                } else {
                    // Handle JSON response
                    if (data.success) {
                        showSuccessMessage(data.message || 'سند حسابداری با موفقیت ثبت شد.');
                        
                        // Reset form
                        form.reset();
                        
                        // Redirect after a delay
                        if (data.redirectUrl) {
                            setTimeout(() => {
                                window.location.href = data.redirectUrl;
                            }, 2000);
                        } else {
                            setTimeout(() => {
                                window.location.href = '@Url.Action("Index", "AccountingDocuments")';
                            }, 2000);
                        }
                    } else {
                        // Show error messages
                        if (data.errors && data.errors.length > 0) {
                            showErrorMessage(data.message || 'خطاهای اعتبارسنجی:', data.errors);
                        } else {
                            showErrorMessage('خطا در ثبت سند:', [data.message || 'خطای نامشخص رخ داده است.']);
                        }
                    }
                }
            })
            .catch(error => {
                console.error('AJAX Error:', error);
                
                // Hide loading overlay
                hideLoadingOverlay();
                
                // Hide modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('confirmationModal'));
                modal.hide();
                
                showErrorMessage('خطا در ارسال اطلاعات:', [error.message]);
            })
            .finally(() => {
                // Restore button state
                confirmBtn.disabled = false;
                confirmBtn.innerHTML = originalText;
            });
        });
        
        // Helper function to show success messages
        function showSuccessMessage(message) {
            // Remove any existing alerts
            removeExistingAlerts();
            
            const successAlert = document.createElement('div');
            successAlert.className = 'alert alert-success alert-dismissible fade show';
            successAlert.innerHTML = `
                <i class="fas fa-check-circle"></i> ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            const container = document.querySelector('.container');
            container.insertBefore(successAlert, container.firstChild);
            window.scrollTo(0, 0);
        }
        
        // Helper function to show error messages
        function showErrorMessage(title, messages) {
            // Remove any existing alerts
            removeExistingAlerts();
            
            const errorAlert = document.createElement('div');
            errorAlert.className = 'alert alert-danger alert-dismissible fade show';
            
            let messageList = '';
            if (Array.isArray(messages)) {
                messageList = '<ul class="mb-0 mt-2">' + messages.map(msg => `<li>${msg}</li>`).join('') + '</ul>';
            } else {
                messageList = `<div class="mt-2">${messages}</div>`;
            }
            
            errorAlert.innerHTML = `
                <i class="fas fa-exclamation-triangle"></i> <strong>${title}</strong>
                ${messageList}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            const container = document.querySelector('.container');
            container.insertBefore(errorAlert, container.firstChild);
            window.scrollTo(0, 0);
        }
        
        // Helper function to remove existing alerts
        function removeExistingAlerts() {
            const existingAlerts = document.querySelectorAll('.alert:not(.alert-info)');
            existingAlerts.forEach(alert => {
                if (alert.parentNode) {
                    alert.parentNode.removeChild(alert);
                }
            });
        }
        
        } // End of initializePageScripts function
    </script>
}
