@model ForexExchange.Models.CustomerCreateViewModel

@{
    ViewData["Title"] = "ثبت مشتری جدید";
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-10">
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title mb-0">ثبت مشتری جدید</h4>
                </div>
                <div class="card-body">
                    <form id="customer-create-form" asp-action="Create" method="post">
                        <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label asp-for="FullName" class="form-label">نام و نام خانوادگی *</label>
                                <input asp-for="FullName" type="text" class="form-control" required />
                                <span asp-validation-for="FullName" class="text-danger"></span>
                            </div>
                            
                            <div class="col-md-6">
                                <label asp-for="PhoneNumber" class="form-label">شماره تلفن</label>
                                <input asp-for="PhoneNumber" type="text" class="form-control" placeholder="هر فرمت شماره تلفن قابل قبول است
                                " />
                                <small class="form-text text-muted">مثال: 0096871746098 یا +98912xxxxxxx یا 0912xxxxxxx</small>
                                <span asp-validation-for="PhoneNumber" class="text-danger"></span>
                            </div>
                        </div>

                      

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label asp-for="Password" class="form-label">رمز عبور *</label>
                                <input asp-for="Password" type="password" class="form-control" required />
                                <span asp-validation-for="Password" class="text-danger"></span>
                            </div>
                            
                            <div class="col-md-6">
                                <label asp-for="ConfirmPassword" class="form-label">تکرار رمز عبور *</label>
                                <input asp-for="ConfirmPassword" type="password" class="form-control" required />
                                <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Address" class="form-label">آدرس</label>
                            <textarea asp-for="Address" class="form-control" rows="3" placeholder="آدرس کامل..."></textarea>
                            <span asp-validation-for="Address" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <div class="form-check">
                                <input asp-for="IsActive" class="form-check-input" type="checkbox" checked />
                                <label asp-for="IsActive" class="form-check-label">
                                    مشتری فعال است
                                </label>
                            </div>
                        </div>

                        <hr />
                        <div class="mb-3">
                            <label class="form-label">موجودی‌های اولیه مشتری (اختیاری)</label>
                            <div id="initial-balances">
                                <div class="row g-2 align-items-center mb-2 balance-row d-none" id="balance-row-template">
                                    <div class="col-4">
                                        <select class="form-select currency-code" name="ib_code">
                                            <option value="" selected disabled>انتخاب ارز</option>
                                        </select>
                                    </div>
                                    <div class="col-6">
                                        <input type="number" step="0.01" class="form-control currency-amount" name="ib_amount" placeholder="مقدار  (منفی یا مثبت)" />
                                    </div>
                                    <div class="col-2 text-start">
                                        <button type="button" class="btn btn-outline-danger btn-sm remove-row">حذف</button>
                                    </div>
                                </div>
                                <div id="balance-rows"></div>
                                <button type="button" class="btn btn-outline-primary btn-sm mt-2" id="add-balance">افزودن ارز</button>
                            </div>
                        </div>

                        <div class="d-flex justify-content-between">
                            <a asp-action="Index" class="btn btn-secondary">بازگشت به لیست</a>
                            <button type="submit" class="btn btn-primary">ثبت مشتری و حساب کاربری</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        // Disable Select2 on this page specifically
        window.disableSelect2 = true;
    </script>
    
    <script>
        // Password confirmation validation
        var confirmPasswordInput = document.querySelector('input[name="ConfirmPassword"]');
        var passwordInput = document.querySelector('input[name="Password"]');
        
        if (confirmPasswordInput && passwordInput) {
            confirmPasswordInput.addEventListener('input', function(e) {
                var password = passwordInput.value;
                var confirmPassword = e.target.value;
                
                if (password !== confirmPassword) {
                    e.target.setCustomValidity('رمز عبور و تکرار آن باید یکسان باشند');
                } else {
                    e.target.setCustomValidity('');
                }
            });
        }

        // Initial balances dynamic rows -> bind to hidden inputs for dictionary
        (function() {
            const currencyOptions = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.CurrencyOptions ?? new object[0]));
            
            const addBtn = document.getElementById('add-balance');
            const rowsContainer = document.getElementById('balance-rows');
            const template = document.getElementById('balance-row-template');

            function buildOptions(selectEl, selectedCode) {
                // Clear and add placeholder
                selectEl.innerHTML = '';
                const ph = document.createElement('option');
                ph.value = '';
                ph.textContent = 'انتخاب ارز';
                ph.disabled = true;
                ph.selected = !selectedCode;
                selectEl.appendChild(ph);
                // Add options
                (currencyOptions || []).forEach(o => {
                    const opt = document.createElement('option');
                    opt.value = o.Code;
                    opt.textContent = `${o.PersianName} (${o.Code})`;
                    if (selectedCode && selectedCode.toUpperCase() === o.Code) opt.selected = true;
                    selectEl.appendChild(opt);
                });
            }

            function isDuplicateCode(selectEl) {
                const code = (selectEl.value || '').toUpperCase();
                if (!code) return false;
                let count = 0;
                document.querySelectorAll('#balance-rows .currency-code').forEach(s => {
                    if ((s.value || '').toUpperCase() === code) count++;
                });
                return count > 1; // include current select
            }

            function addRow(code = '', amount = '') {
                const row = template.cloneNode(true);
                row.id = '';
                row.classList.remove('d-none');
                rowsContainer.appendChild(row);

                const codeInput = row.querySelector('.currency-code');
                const amountInput = row.querySelector('.currency-amount');
                buildOptions(codeInput, code);
                amountInput.value = amount;

                // Apply currency formatting to the new amount input
                setTimeout(() => {
                    if (window.currencyFormatter && typeof window.currencyFormatter.setupInputFormatting === 'function') {
                        window.currencyFormatter.setupInputFormatting(amountInput);
                    } else {
                        // Fallback: trigger a re-scan of all inputs
                        if (window.currencyFormatter && typeof window.currencyFormatter.setupFormatting === 'function') {
                            window.currencyFormatter.setupFormatting();
                        }
                    }
                }, 100);

                codeInput.addEventListener('change', function() {
                    if (isDuplicateCode(this)) {
                        alert('این ارز قبلاً اضافه شده است.');
                        this.value = '';
                    }
                });

                const removeBtn = row.querySelector('.remove-row');
                removeBtn.addEventListener('click', () => row.remove());
            }

            addBtn.addEventListener('click', function() { addRow(); });

            // On submit, convert rows to hidden inputs matching Dictionary binding
            const targetForm = document.getElementById('customer-create-form');
            if (!targetForm) {
                return;
            }
            
            targetForm.addEventListener('submit', function(e) {
                // Remove existing hidden fields
                this.querySelectorAll('input[type="hidden"][data-gen="ib"]').forEach(x => x.remove());
                
                // Get all visible balance rows (not the template)
                const rows = rowsContainer.querySelectorAll('.balance-row:not(.d-none):not(#balance-row-template)');
                
                rows.forEach((row, idx) => {
                    const codeSelect = row.querySelector('.currency-code');
                    const amountInput = row.querySelector('.currency-amount');
                    
                    if (!codeSelect || !amountInput) {
                        return;
                    }
                    
                    const code = (codeSelect.value || '').trim().toUpperCase();
                    const amount = amountInput.value.trim();
                    
                    if (!code || !amount || parseFloat(amount) === 0) {
                        return;
                    }
                    
                    // Create hidden input using dictionary format
                    const keyInput = document.createElement('input');
                    keyInput.type = 'hidden';
                    keyInput.name = `InitialBalances[${code}]`;
                    keyInput.value = amount;
                    keyInput.setAttribute('data-gen', 'ib');
                    this.appendChild(keyInput);
                });
            });
        })();
    </script>
}
