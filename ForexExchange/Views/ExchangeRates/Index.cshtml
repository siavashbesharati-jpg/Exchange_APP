@model IEnumerable<ForexExchange.Models.ExchangeRate>

@{
    ViewData["Title"] = User.Identity?.IsAuthenticated == true && (User.IsInRole("Admin") || User.IsInRole("Manager") || User.IsInRole("Staff")) ? "مدیریت نرخ‌های ارز" : "سامانه معاملات   تابان ";
    
    // Open Graph Tags for better WhatsApp sharing
    ViewData["OGTitle"] = "سامانه معاملات تابان - نرخ‌های روز ارز";
    ViewData["OGDescription"] = "مشاهده آخرین نرخ‌های ارز، دلار، یورو، پوند، درهم و سایر ارزها در سامانه معاملات تابان. نرخ‌های به‌روز و قابل اعتماد.";
    ViewData["OGImage"] = Url.Content("~/favicon/android-chrome-512x512.png");
    ViewData["OGImageAlt"] = "لوگو سامانه معاملات تابان";
    ViewData["OGType"] = "website";
}

<div class="container-fluid">
    <!-- Compact Header -->
    <div class="row mb-3">
        <div class="col-12">
            <div class="d-flex align-items-center justify-content-between">
                <div class="d-flex align-items-center">
                    <img src="~/favicon/android-chrome-512x512.png" alt="تابان" 
                         style="width: 60px; height: 60px;" class="me-3">
                    <div>
                        <h1 class="h3 mb-1 text-primary fw-bold">سامانه معاملات تابان</h1>
                        <p class="text-muted mb-0 small">نرخ‌های ارز به‌روز و تبدیل آنلاین</p>
                    </div>
                </div>
                <div class="btn-group">
                    @if (User.Identity?.IsAuthenticated == true && (User.IsInRole("Admin") || User.IsInRole("Manager") || User.IsInRole("Staff")))
                    {
                        <a asp-action="Manage" class="btn btn-success btn-sm">مدیریت ارزها</a>
                        <!-- DISABLED: Web scraping button
                        <button type="button" class="btn btn-info btn-sm" onclick="updateFromWeb()" title="بروزرسانی خودکار از وب">
                            <i class="fas fa-globe"></i> بروزرسانی
                        </button>
                        -->
                    }
                    <button type="button" class="btn btn-primary btn-sm" onclick="openCalculator()" title="ماشین حساب ارز">
                        <i class="fas fa-calculator"></i> ماشین حساب
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="بستن"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="بستن"></button>
        </div>
    }

    <!-- Current Rates Display -->
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white py-2">
                    <h6 class="card-title mb-0"><i class="fas fa-coins me-2"></i>نرخ‌های فعلی</h6>
                </div>
                <div class="card-body p-3">
                    @if (Model.Any())
                    {
                        var baseRates = Model.Where(r => string.Equals(r.ToCurrency?.Code, "IRR", System.StringComparison.OrdinalIgnoreCase)).ToList();
                        
                        @if (baseRates.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-sm table-hover mb-0">
                                    <thead class="table-light">
                                        <tr>
                                            <th class="border-0">ارز</th>
                                            <th class="border-0 text-center">نرخ (تومان)</th>
                                            <th class="border-0 text-center">آخرین بروزرسانی</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in baseRates.OrderBy(r => r.FromCurrency?.DisplayOrder))
                                        {
                                            var fromCode = item.FromCurrency?.Code?.ToUpper() ?? "?";
                                            var fromName = item.FromCurrency?.PersianName ?? item.FromCurrency?.Name ?? fromCode;
                                            string badgeClass = fromCode switch
                                            {
                                                "USD" => "bg-primary",
                                                "EUR" => "bg-success", 
                                                "AED" => "bg-info",
                                                "OMR" => "bg-warning text-dark",
                                                "TRY" => "bg-danger",
                                                _ => "bg-secondary"
                                            };
                                            <tr>
                                                <td>
                                                    <span class="badge @badgeClass me-2">@fromCode</span>
                                                    <span class="fw-medium">@fromName</span>
                                                </td>
                                                <td class="text-center">
                                                    <span class="fw-bold text-primary">@item.Rate.ToString("N0")</span>
                                                </td>
                                                <td class="text-center">
                                                    <small class="text-muted">@item.UpdatedAt.ToString("HH:mm")</small>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-3">
                            <p class="text-muted">هیچ نرخ ارزی موجود نیست.</p>
                            @if (User.Identity?.IsAuthenticated == true && (User.IsInRole("Admin") || User.IsInRole("Manager") || User.IsInRole("Staff")))
                            {
                                <a asp-action="Create" class="btn btn-primary btn-sm">ثبت اولین نرخ</a>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Cross Currency Rates (Compact) -->
    @if (Model.Any())
    {
        var crossRates = Model.Where(r => !string.Equals(r.ToCurrency?.Code, "IRR", System.StringComparison.OrdinalIgnoreCase) && 
                                          !string.Equals(r.FromCurrency?.Code, "IRR", System.StringComparison.OrdinalIgnoreCase)).ToList();
        
        if (crossRates.Any())
        {
            <div class="row mt-3">
                <div class="col-12">
                    <div class="card shadow-sm">
                        <div class="card-header bg-info text-white py-2">
                            <h6 class="card-title mb-0"><i class="fas fa-exchange-alt me-2"></i>نرخ‌های متقابل ارزها</h6>
                        </div>
                        <div class="card-body p-3">
                            <div class="table-responsive">
                                <table class="table table-sm table-hover mb-0">
                                    <thead class="table-light">
                                        <tr>
                                            <th class="border-0">از ارز</th>
                                            <th class="border-0">به ارز</th>
                                            <th class="border-0 text-center">نرخ</th>
                                            <th class="border-0 text-center">زمان</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in crossRates.OrderBy(r => r.FromCurrency?.DisplayOrder).ThenBy(r => r.ToCurrency?.DisplayOrder))
                                        {
                                            var fromCode = item.FromCurrency?.Code?.ToUpper() ?? "?";
                                            var toCode = item.ToCurrency?.Code?.ToUpper() ?? "?";
                                            var fromName = item.FromCurrency?.PersianName ?? item.FromCurrency?.Name ?? fromCode;
                                            var toName = item.ToCurrency?.PersianName ?? item.ToCurrency?.Name ?? toCode;
                                            
                                            <tr>
                                                <td><span class="badge bg-secondary me-1">@fromCode</span> @fromName</td>
                                                <td><span class="badge bg-secondary me-1">@toCode</span> @toName</td>
                                                <td class="text-center">
                                                    <span class="fw-bold text-primary">@item.Rate.ToString("N2")</span>
                                                </td>
                                                <td class="text-center">
                                                    <small class="text-muted">@item.UpdatedAt.ToString("HH:mm")</small>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }

   
</div>

<!-- Currency Calculator Modal -->
<div class="modal fade" id="calculatorModal" tabindex="-1" aria-labelledby="calculatorModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="calculatorModalLabel">
                    <i class="fas fa-calculator me-2"></i>ماشین حساب ارز
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="بستن"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">مبلغ</label>
                    <input type="number" id="modalConvertAmount" class="form-control" placeholder="مبلغ را وارد کنید" min="0" step="0.01" value="1">
                </div>
                <div class="mb-3">
                    <label class="form-label">از ارز</label>
                    <select id="modalFromCurrency" class="form-select">
                        <option value="">انتخاب کنید</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label">به ارز</label>
                    <select id="modalToCurrency" class="form-select">
                        <option value="">انتخاب کنید</option>
                    </select>
                </div>
                <div class="d-flex gap-2">
                    <button type="button" class="btn btn-outline-secondary flex-fill" onclick="swapModalCurrencies()">
                        <i class="fas fa-sync me-1"></i>معکوس
                    </button>
                </div>
                <div id="modalConversionResult" class="mt-3" style="display: none;">
                    <div class="alert alert-success border-0">
                        <div class="text-center">
                            <div class="fw-bold fs-5" id="modalResultAmount" dir="ltr"></div>
                            <small class="text-muted" id="modalResultRate"></small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Hidden form for web update -->
@if (User.Identity?.IsAuthenticated == true && (User.IsInRole("Admin") || User.IsInRole("Manager") || User.IsInRole("Staff")))
{
    <!-- DISABLED: Hidden form for web update
    <form id="webUpdateForm" asp-action="UpdateFromWeb" method="post" style="display: none;">
        @Html.AntiForgeryToken()
    </form>
    -->
}

@section Scripts {
    <script>
        // Exchange rates data for conversion
        const exchangeRates = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(
            Model.Select(r => new { 
                FromId = r.FromCurrencyId, 
                ToId = r.ToCurrencyId, 
                FromCode = r.FromCurrency?.Code,
                ToCode = r.ToCurrency?.Code,
                FromName = r.FromCurrency?.PersianName ?? r.FromCurrency?.Name,
                ToName = r.ToCurrency?.PersianName ?? r.ToCurrency?.Name,
                BuyRate = r.Rate, 
                SellRate = r.Rate 
            })
        ));

        // Populate currency dropdowns
        const currencies = {};
        exchangeRates.forEach(rate => {
            if (!currencies[rate.FromId]) {
                currencies[rate.FromId] = { 
                    code: rate.FromCode, 
                    name: rate.FromName,
                    id: rate.FromId
                };
            }
            if (!currencies[rate.ToId]) {
                currencies[rate.ToId] = { 
                    code: rate.ToCode, 
                    name: rate.ToName,
                    id: rate.ToId
                };
            }
        });

        function populateDropdowns() {
            const fromSelect = document.getElementById('fromCurrency');
            const toSelect = document.getElementById('toCurrency');
            const modalFromSelect = document.getElementById('modalFromCurrency');
            const modalToSelect = document.getElementById('modalToCurrency');
            
            Object.values(currencies).forEach(currency => {
                const option1 = new Option(`${currency.name} (${currency.code})`, currency.id);
                const option2 = new Option(`${currency.name} (${currency.code})`, currency.id);
                const option3 = new Option(`${currency.name} (${currency.code})`, currency.id);
                const option4 = new Option(`${currency.name} (${currency.code})`, currency.id);
                
                if (fromSelect) fromSelect.add(option1);
                if (toSelect) toSelect.add(option2);
                modalFromSelect.add(option3);
                modalToSelect.add(option4);
            });
            
            // Set default values - USD to IRR as most common conversion
            const usdCurrency = Object.values(currencies).find(c => c.code === 'USD');
            const irrCurrency = Object.values(currencies).find(c => c.code === 'IRR');
            
            if (usdCurrency && irrCurrency) {
                if (fromSelect) fromSelect.value = usdCurrency.id;
                if (toSelect) toSelect.value = irrCurrency.id;
                modalFromSelect.value = usdCurrency.id;
                modalToSelect.value = irrCurrency.id;
            }
        }

        function openCalculator() {
            const modal = new bootstrap.Modal(document.getElementById('calculatorModal'));
            modal.show();
            
            // Auto-convert when modal opens if default values are set
            setTimeout(() => {
                convertModalCurrency();
            }, 100);
        }

        function convertModalCurrency() {
            const amount = parseFloat(document.getElementById('modalConvertAmount').value);
            const fromId = parseInt(document.getElementById('modalFromCurrency').value);
            const toId = parseInt(document.getElementById('modalToCurrency').value);
            
            // Hide result if inputs are invalid
            if (!amount || amount <= 0 || !fromId || !toId || fromId === toId) {
                document.getElementById('modalConversionResult').style.display = 'none';
                return;
            }

            // Find direct rate
            let rate = exchangeRates.find(r => r.FromId === fromId && r.ToId === toId);
            let result, rateUsed, direction;
            
            if (rate) {
                // Direct rate found
                result = amount * rate.SellRate;
                rateUsed = rate.SellRate;
                direction = 'مستقیم';
            } else {
                // Try reverse rate
                rate = exchangeRates.find(r => r.FromId === toId && r.ToId === fromId);
                if (rate) {
                    result = amount / rate.BuyRate;
                    rateUsed = (1 / rate.BuyRate);
                    direction = 'معکوس';
                } else {
                    alert('نرخ تبدیل برای این جفت ارز موجود نیست');
                    return;
                }
            }

            const fromCurrency = currencies[fromId];
            const toCurrency = currencies[toId];
            
            // Format numbers for RTL display
            const formatNumber = (num, currencyCode = '') => {
                return formatCurrency(num, currencyCode);
            };

            const formatRate = (num) => {
                return formatCurrency(num, 'IRR');
            };
            
            // Display result with proper RTL formatting
            document.getElementById('modalResultAmount').innerHTML = 
                `<span class="text-primary">${formatNumber(amount, fromCurrency.code)}</span> ${fromCurrency.code} = ` +
                `<span class="text-success fw-bold">${formatNumber(result, toCurrency.code)}</span> ${toCurrency.code}`;
            
            document.getElementById('modalResultRate').innerHTML = 
                `نرخ تبدیل: ${formatRate(rateUsed)} (${direction})`;
            
            document.getElementById('modalConversionResult').style.display = 'block';
        }

        function swapModalCurrencies() {
            const fromSelect = document.getElementById('modalFromCurrency');
            const toSelect = document.getElementById('modalToCurrency');
            const temp = fromSelect.value;
            fromSelect.value = toSelect.value;
            toSelect.value = temp;
            
            // Auto-convert after swapping if amount is entered
            const amount = document.getElementById('modalConvertAmount').value;
            if (amount && amount > 0) {
                convertModalCurrency();
            } else {
                document.getElementById('modalConversionResult').style.display = 'none';
            }
        }

        function convertCurrency() {
            const amount = parseFloat(document.getElementById('convertAmount').value);
            const fromId = parseInt(document.getElementById('fromCurrency').value);
            const toId = parseInt(document.getElementById('toCurrency').value);
            
            // Hide result if inputs are invalid
            if (!amount || amount <= 0 || !fromId || !toId || fromId === toId) {
                document.getElementById('conversionResult').style.display = 'none';
                return;
            }

            // Find direct rate
            let rate = exchangeRates.find(r => r.FromId === fromId && r.ToId === toId);
            let result, rateUsed, direction;
            
            if (rate) {
                // Direct rate found
                result = amount * rate.SellRate;
                rateUsed = rate.SellRate;
                direction = 'مستقیم';
            } else {
                // Try reverse rate
                rate = exchangeRates.find(r => r.FromId === toId && r.ToId === fromId);
                if (rate) {
                    result = amount / rate.BuyRate;
                    rateUsed = (1 / rate.BuyRate);
                    direction = 'معکوس';
                } else {
                    alert('نرخ تبدیل برای این جفت ارز موجود نیست');
                    return;
                }
            }

            const fromCurrency = currencies[fromId];
            const toCurrency = currencies[toId];
            
            // Format numbers for RTL display
            const formatNumber = (num, currencyCode = '') => {
                return formatCurrency(num, currencyCode);
            };

            const formatRate = (num) => {
                return formatCurrency(num, 'IRR'); // Rates are always displayed as IRR format
            };
            
            // Display result with proper RTL formatting
            document.getElementById('resultAmount').innerHTML = 
                `<span class="text-primary">${formatNumber(amount, fromCurrency.code)}</span> ${fromCurrency.code} = ` +
                `<span class="text-success fw-bold">${formatNumber(result, toCurrency.code)}</span> ${toCurrency.code}`;
            
            document.getElementById('resultRate').innerHTML = 
                `نرخ تبدیل: ${formatRate(rateUsed)} (${direction})`;
            
            document.getElementById('conversionResult').style.display = 'block';
        }

        function swapCurrencies() {
            const fromSelect = document.getElementById('fromCurrency');
            const toSelect = document.getElementById('toCurrency');
            const temp = fromSelect.value;
            fromSelect.value = toSelect.value;
            toSelect.value = temp;
            
            // Auto-convert after swapping if amount is entered
            const amount = document.getElementById('convertAmount').value;
            if (amount && amount > 0) {
                convertCurrency();
            } else {
                // Hide result when swapping without amount
                document.getElementById('conversionResult').style.display = 'none';
            }
        }

        // Initialize dropdowns when page loads
        document.addEventListener('DOMContentLoaded', function() {
            populateDropdowns();
            
            // Add event listeners for real-time conversion in modal
            document.getElementById('modalConvertAmount').addEventListener('input', function() {
                if (this.value && this.value > 0) {
                    convertModalCurrency();
                } else {
                    document.getElementById('modalConversionResult').style.display = 'none';
                }
            });
            
            document.getElementById('modalFromCurrency').addEventListener('change', function() {
                if (document.getElementById('modalConvertAmount').value && document.getElementById('modalConvertAmount').value > 0) {
                    convertModalCurrency();
                }
            });
            
            document.getElementById('modalToCurrency').addEventListener('change', function() {
                if (document.getElementById('modalConvertAmount').value && document.getElementById('modalConvertAmount').value > 0) {
                    convertModalCurrency();
                }
            });
        });

        // DISABLED: Function to update rates from web
        /*
        function updateFromWeb() {
            if (confirm('آیا می‌خواهید نرخ‌ها را از وب بروزرسانی کنید؟\nاین عمل ممکن است چند دقیقه طول بکشد.')) {
                // Show loading indicator
                var button = event.target;
                var originalText = button.innerHTML;
                button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> در حال بروزرسانی...';
                button.disabled = true;

                // Submit the hidden form
                document.getElementById('webUpdateForm').submit();
            }
        }
        */
    </script>
}
