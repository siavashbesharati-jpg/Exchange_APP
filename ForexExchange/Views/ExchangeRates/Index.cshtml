@model IEnumerable<ForexExchange.Models.ExchangeRate>

@{
    ViewData["Title"] = User.Identity?.IsAuthenticated == true && (User.IsInRole("Admin") || User.IsInRole("Manager") || User.IsInRole("Staff")) ? "مدیریت نرخ‌های ارز" : "سامانه صرافی ایران اکسپدیا";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h3">@ViewData["Title"]</h1>
                @if (User.Identity?.IsAuthenticated == true && (User.IsInRole("Admin") || User.IsInRole("Manager") || User.IsInRole("Staff")))
                {
                    <div>
                        <a asp-action="Manage" class="btn btn-success">مدیریت ارزها</a>
                        <button type="button" class="btn btn-info" onclick="updateFromWeb()" title="بروزرسانی خودکار از وب">
                            <i class="fas fa-globe"></i> بروزرسانی از وب
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="بستن"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="بستن"></button>
        </div>
    }

    <!-- Current Rates Display -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">نرخ‌های فعلی</h5>
                </div>
                <div class="card-body">
                    @if (Model.Any())
                    {
                        var baseRates = Model.Where(r => string.Equals(r.ToCurrency?.Code, "IRR", System.StringComparison.OrdinalIgnoreCase)).ToList();
                        var reverseRates = Model.Where(r => string.Equals(r.FromCurrency?.Code, "IRR", System.StringComparison.OrdinalIgnoreCase)).ToList();
                        var crossRates = Model.Where(r => !string.Equals(r.FromCurrency?.Code, "IRR", System.StringComparison.OrdinalIgnoreCase) && 
                                                          !string.Equals(r.ToCurrency?.Code, "IRR", System.StringComparison.OrdinalIgnoreCase)).ToList();

                        <!-- Base Currency Rates (X → IRR) -->
                        @if (baseRates.Any())
                        {
                            <div class="mb-4">
                                <h6 class="text-primary mb-3"><i class="fas fa-coins"></i> نرخ ارزها به تومان</h6>
                                <div class="row">
                                    @foreach (var item in baseRates.OrderBy(r => r.FromCurrency?.DisplayOrder))
                                    {
                                        var fromCode = item.FromCurrency?.Code?.ToUpper() ?? "?";
                                        var fromName = item.FromCurrency?.PersianName ?? item.FromCurrency?.Name ?? fromCode;
                                        string badgeClass = fromCode switch
                                        {
                                            "USD" => "bg-primary",
                                            "EUR" => "bg-success",
                                            "AED" => "bg-info",
                                            "OMR" => "bg-warning",
                                            "TRY" => "bg-danger",
                                            _ => "bg-secondary"
                                        };
                                        <div class="col-md-6 col-lg-4 mb-3">
                                            <div class="card border-0 shadow-sm">
                                                <div class="card-body text-center">
                                                    <span class="badge @badgeClass mb-2">@fromName</span>
                                                    <div class="row">
                                                        <div class="col-6">
                                                            <small class="text-muted">خرید</small>
                                                            <div class="fw-bold text-success">@item.BuyRate.ToString("N0")</div>
                                                        </div>
                                                        <div class="col-6">
                                                            <small class="text-muted">فروش</small>
                                                            <div class="fw-bold text-danger">@item.SellRate.ToString("N0")</div>
                                                        </div>
                                                    </div>
                                                    <small class="text-muted">@item.UpdatedAt.ToString("HH:mm")</small>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <p class="text-muted">هیچ نرخ ارزی موجود نیست.</p>
                            @if (User.Identity?.IsAuthenticated == true && (User.IsInRole("Admin") || User.IsInRole("Manager") || User.IsInRole("Staff")))
                            {
                                <a asp-action="Create" class="btn btn-primary">ثبت اولین نرخ</a>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Currency Converter -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-primary">
                <div class="card-header bg-primary text-white">
                    <h5 class="card-title mb-0"><i class="fas fa-calculator"></i> تبدیل ارز</h5>
                </div>
                <div class="card-body">
                    <div class="row g-3 align-items-end">
                        <div class="col-md-3">
                            <label class="form-label">مبلغ</label>
                            <input type="number" id="convertAmount" class="form-control" placeholder="مبلغ را وارد کنید" min="0" step="0.01" value="1">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">از ارز</label>
                            <select id="fromCurrency" class="form-select">
                                <option value="">انتخاب کنید</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">به ارز</label>
                            <select id="toCurrency" class="form-select">
                                <option value="">انتخاب کنید</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <button type="button" class="btn btn-primary w-100" onclick="convertCurrency()">
                                <i class="fas fa-exchange-alt"></i> تبدیل
                            </button>
                        </div>
                    </div>
                    <div id="conversionResult" class="mt-3" style="display: none;">
                        <div class="alert alert-success border-0 shadow-sm text-center">
                            <div class="mb-2">
                                <i class="fas fa-check-circle text-success me-2"></i>
                                <div class="fw-bold fs-5" id="resultAmount" dir="ltr"></div>
                                <small class="text-muted" id="resultRate"></small>
                            </div>
                            <div>
                                <button type="button" class="btn btn-outline-primary btn-sm" onclick="swapCurrencies()">
                                    <i class="fas fa-exchange-alt"></i> معکوس
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Hidden form for web update -->
@if (User.Identity?.IsAuthenticated == true && (User.IsInRole("Admin") || User.IsInRole("Manager") || User.IsInRole("Staff")))
{
    <form id="webUpdateForm" asp-action="UpdateFromWeb" method="post" style="display: none;">
        @Html.AntiForgeryToken()
    </form>
}

@section Scripts {
    <script>
        // Exchange rates data for conversion
        const exchangeRates = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(
            Model.Select(r => new { 
                FromId = r.FromCurrencyId, 
                ToId = r.ToCurrencyId, 
                FromCode = r.FromCurrency?.Code,
                ToCode = r.ToCurrency?.Code,
                FromName = r.FromCurrency?.PersianName ?? r.FromCurrency?.Name,
                ToName = r.ToCurrency?.PersianName ?? r.ToCurrency?.Name,
                BuyRate = r.BuyRate, 
                SellRate = r.SellRate 
            })
        ));

        // Populate currency dropdowns
        const currencies = {};
        exchangeRates.forEach(rate => {
            if (!currencies[rate.FromId]) {
                currencies[rate.FromId] = { 
                    code: rate.FromCode, 
                    name: rate.FromName,
                    id: rate.FromId
                };
            }
            if (!currencies[rate.ToId]) {
                currencies[rate.ToId] = { 
                    code: rate.ToCode, 
                    name: rate.ToName,
                    id: rate.ToId
                };
            }
        });

        function populateDropdowns() {
            const fromSelect = document.getElementById('fromCurrency');
            const toSelect = document.getElementById('toCurrency');
            
            Object.values(currencies).forEach(currency => {
                const option1 = new Option(`${currency.name} (${currency.code})`, currency.id);
                const option2 = new Option(`${currency.name} (${currency.code})`, currency.id);
                fromSelect.add(option1);
                toSelect.add(option2);
            });
            
            // Set default values - USD to IRR as most common conversion
            const usdCurrency = Object.values(currencies).find(c => c.code === 'USD');
            const irrCurrency = Object.values(currencies).find(c => c.code === 'IRR');
            
            if (usdCurrency) {
                fromSelect.value = usdCurrency.id;
            }
            if (irrCurrency) {
                toSelect.value = irrCurrency.id;
            }
            
            // Auto-convert with default values when page loads
            setTimeout(() => {
                convertCurrency();
            }, 100);
        }

        function convertCurrency() {
            const amount = parseFloat(document.getElementById('convertAmount').value);
            const fromId = parseInt(document.getElementById('fromCurrency').value);
            const toId = parseInt(document.getElementById('toCurrency').value);
            
            if (!amount || !fromId || !toId) {
                alert('لطفاً همه فیلدها را پر کنید');
                return;
            }
            
            if (fromId === toId) {
                alert('ارز مبدأ و مقصد نمی‌توانند یکسان باشند');
                return;
            }

            // Find direct rate
            let rate = exchangeRates.find(r => r.FromId === fromId && r.ToId === toId);
            let result, rateUsed, direction;
            
            if (rate) {
                // Direct rate found
                result = amount * rate.SellRate;
                rateUsed = rate.SellRate;
                direction = 'مستقیم';
            } else {
                // Try reverse rate
                rate = exchangeRates.find(r => r.FromId === toId && r.ToId === fromId);
                if (rate) {
                    result = amount / rate.BuyRate;
                    rateUsed = (1 / rate.BuyRate);
                    direction = 'معکوس';
                } else {
                    alert('نرخ تبدیل برای این جفت ارز موجود نیست');
                    return;
                }
            }

            const fromCurrency = currencies[fromId];
            const toCurrency = currencies[toId];
            
            // Format numbers for RTL display
            const formatNumber = (num) => {
                return new Intl.NumberFormat('fa-IR', { 
                    minimumFractionDigits: 0,
                    maximumFractionDigits: toCurrency.code === 'IRR' ? 0 : 4
                }).format(num);
            };

            const formatRate = (num) => {
                return new Intl.NumberFormat('fa-IR', { 
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 8
                }).format(num);
            };
            
            // Display result with proper RTL formatting
            document.getElementById('resultAmount').innerHTML = 
                `<span class="text-primary">${formatNumber(amount)}</span> ${fromCurrency.code} = ` +
                `<span class="text-success fw-bold">${formatNumber(result)}</span> ${toCurrency.code}`;
            
            document.getElementById('resultRate').innerHTML = 
                `نرخ تبدیل: ${formatRate(rateUsed)} (${direction})`;
            
            document.getElementById('conversionResult').style.display = 'block';
        }

        function swapCurrencies() {
            const fromSelect = document.getElementById('fromCurrency');
            const toSelect = document.getElementById('toCurrency');
            const temp = fromSelect.value;
            fromSelect.value = toSelect.value;
            toSelect.value = temp;
            
            // Auto-convert after swapping if amount is entered
            const amount = document.getElementById('convertAmount').value;
            if (amount && amount > 0) {
                convertCurrency();
            } else {
                // Hide result when swapping without amount
                document.getElementById('conversionResult').style.display = 'none';
            }
        }

        // Initialize dropdowns when page loads
        document.addEventListener('DOMContentLoaded', function() {
            populateDropdowns();
        });

        // Function to update rates from web
        function updateFromWeb() {
            if (confirm('آیا می‌خواهید نرخ‌ها را از وب بروزرسانی کنید؟\nاین عمل ممکن است چند دقیقه طول بکشد.')) {
                // Show loading indicator
                var button = event.target;
                var originalText = button.innerHTML;
                button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> در حال بروزرسانی...';
                button.disabled = true;

                // Submit the hidden form
                document.getElementById('webUpdateForm').submit();
            }
        }
    </script>
}
