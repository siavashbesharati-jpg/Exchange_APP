@model ForexExchange.Models.Order

@{
    ViewData["Title"] = "ثبت سفارش جدید";
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title mb-0">ثبت سفارش جدید</h4>
                </div>
                <div class="card-body">
                    <form asp-action="Create" method="post">
                        <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>
                        
                        <div class="row mb-3">
                         
                                <div class="col-md-6">
                                    <label asp-for="CustomerId" class="form-label">انتخاب مشتری</label>
                                    <select asp-for="CustomerId" class="form-select" required>
                                        <option value="">یک مشتری انتخاب کنید</option>
                                        @if (ViewBag.Customers != null)
                                        {
                                            @foreach (var customer in ViewBag.Customers)
                                            {
                                                <option value="@customer.Id">@customer.FullName - @customer.PhoneNumber</option>
                                            }
                                        }
                                    </select>
                                    <span asp-validation-for="CustomerId" class="text-danger"></span>
                                </div>
                            
                          
                            
                            <div class="col-md-6">
                                <label asp-for="OrderType" class="form-label">نوع سفارش</label>
                                <select asp-for="OrderType" class="form-select" required>
                                    <option value="">انتخاب کنید</option>
                                    <option value="0">خرید</option>
                                    <option value="1">فروش</option>
                                </select>
                                <span asp-validation-for="OrderType" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label asp-for="FromCurrencyId" class="form-label">از ارز (مبدأ)</label>
                                <select asp-for="FromCurrencyId" class="form-select" id="fromCurrencySelect" required>
                                    <option value="">انتخاب کنید</option>
                                    @if (ViewBag.FromCurrencies != null)
                                    {
                                        @foreach (var currency in (List<ForexExchange.Models.Currency>)ViewBag.FromCurrencies)
                                        {
                                            <option value="@currency.Id">@currency.PersianName (@currency.Code)</option>
                                        }
                                    }
                                </select>
                                <span asp-validation-for="FromCurrencyId" class="text-danger"></span>
                            </div>
                            
                            <div class="col-md-4">
                                <label asp-for="ToCurrencyId" class="form-label">به ارز (مقصد)</label>
                                <select asp-for="ToCurrencyId" class="form-select" id="toCurrencySelect" required>
                                    <option value="">انتخاب کنید</option>
                                    @if (ViewBag.ToCurrencies != null)
                                    {
                                        @foreach (var currency in (List<ForexExchange.Models.Currency>)ViewBag.ToCurrencies)
                                        {
                                            <option value="@currency.Id">@currency.PersianName (@currency.Code)</option>
                                        }
                                    }
                                </select>
                                <span asp-validation-for="ToCurrencyId" class="text-danger"></span>
                            </div>
                            
                            <div class="col-md-4">
                                <label asp-for="Amount" class="form-label">مبلغ (ارز مبدأ)</label>
                                <input asp-for="Amount" type="number" class="form-control" step="0.01" min="0" id="amountInput" required />
                                <span asp-validation-for="Amount" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- Currency Pair Information -->
                        <div class="row mb-3">
                            <div class="col-12">
                                <div class="alert alert-info" id="currencyPairInfo" style="display: none;">
                                    <h6>اطلاعات جفت ارز:</h6>
                                    <p id="currencyPairText"></p>
                                    <p id="orderTypeExplanation"></p>
                                </div>
                            </div>
                        </div>

                        <!-- Exchange Rate Display -->
                        <div class="row mb-3">
                            <div class="col-12">
                                <div class="card bg-light">
                                    <div class="card-body">
                                        <h6 class="card-title">نرخ‌های ارز فعلی:</h6>
                                        <div class="row" id="exchangeRates">
                                            @if (ViewBag.ExchangeRates != null)
                                            {
                                                @foreach (var rate in ViewBag.ExchangeRates)
                                                {
                                                    <div class="col-md-4 mb-2" data-from-currency="@rate.FromCurrencyId" data-to-currency="@rate.ToCurrencyId">
                                                        <div class="small">
                                                            <strong>@rate.FromCurrency.PersianName ← @rate.ToCurrency.PersianName</strong><br>
                                                            خرید: <span class="text-success">@rate.BuyRate.ToString("N0")</span><br>
                                                            فروش: <span class="text-danger">@rate.SellRate.ToString("N0")</span>
                                                        </div>
                                                    </div>
                                                }
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Calculation Result -->
                        <div class="row mb-3">
                            <div class="col-12">
                                <div class="alert alert-info" id="calculationResult" style="display: none;">
                                    <h6>محاسبه خودکار:</h6>
                                    <p id="calculationText"></p>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Notes" class="form-label">توضیحات (اختیاری)</label>
                            <textarea asp-for="Notes" class="form-control" rows="3" placeholder="توضیحات اضافی در مورد سفارش..."></textarea>
                            <span asp-validation-for="Notes" class="text-danger"></span>
                        </div>

                        <div class="d-flex justify-content-between">
                            <a asp-action="Index" class="btn btn-secondary">بازگشت به لیست</a>
                            <button type="submit" class="btn btn-primary">ثبت سفارش</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        // Exchange rates data from ViewBag
        var exchangeRates = @Html.Raw(Json.Serialize(ViewBag.ExchangeRates));
        
        // Currency names mapping
        function getCurrencyName(currencyValue) {
            switch(parseInt(currencyValue)) {
                case 0: return 'تومان';
                case 1: return 'دلار آمریکا';
                case 2: return 'یورو';
                case 3: return 'درهم امارات';
                case 4: return 'ریال عمان';
                case 5: return 'لیر ترکیه';
                default: return '';
            }
        }
        
        function getCurrencyCode(currencyValue) {
            switch(parseInt(currencyValue)) {
                case 0: return 'IRR';
                case 1: return 'USD';
                case 2: return 'EUR';
                case 3: return 'AED';
                case 4: return 'OMR';
                case 5: return 'TRY';
                default: return '';
            }
        }
        
        function updateCurrencyPairInfo() {
            var fromCurrency = document.getElementById('fromCurrencySelect').value;
            var toCurrency = document.getElementById('toCurrencySelect').value;
            var orderType = document.querySelector('select[name="OrderType"]').value;
            var amount = document.getElementById('amountInput').value;
            
            // Prevent same currency selection
            if (fromCurrency && toCurrency && fromCurrency === toCurrency) {
                document.getElementById('currencyPairInfo').style.display = 'block';
                document.getElementById('currencyPairText').innerHTML = '<span class="text-danger">خطا: ارز مبدأ و مقصد نمی‌توانند یکسان باشند</span>';
                document.getElementById('orderTypeExplanation').innerHTML = '';
                document.getElementById('calculationResult').style.display = 'none';
                return;
            }
            
            if (fromCurrency && toCurrency) {
                var fromName = getCurrencyName(fromCurrency);
                var toName = getCurrencyName(toCurrency);
                var fromCode = getCurrencyCode(fromCurrency);
                var toCode = getCurrencyCode(toCurrency);
                
                document.getElementById('currencyPairText').innerHTML = 
                    `جفت ارز: <strong>${fromName} (${fromCode}) → ${toName} (${toCode})</strong>`;
                
                if (orderType) {
                    var orderTypeText = orderType == '0' ? 'خرید' : 'فروش';
                    var explanation = '';
                    
                    if (orderType == '0') { // Buy
                        explanation = `شما در حال ${orderTypeText} ${toName} با ${fromName} هستید`;
                    } else { // Sell
                        explanation = `شما در حال ${orderTypeText} ${fromName} به ${toName} هستید`;
                    }
                    
                    document.getElementById('orderTypeExplanation').innerHTML = explanation;
                }
                
                document.getElementById('currencyPairInfo').style.display = 'block';
                updateCalculation();
            } else {
                document.getElementById('currencyPairInfo').style.display = 'none';
                document.getElementById('calculationResult').style.display = 'none';
            }
        }
        
        function findExchangeRate(fromCurrency, toCurrency) {
            // Try to find direct rate
            var directRate = exchangeRates.find(r => 
                r.fromCurrency == fromCurrency && r.toCurrency == toCurrency);
            if (directRate) return directRate;
            
            // Try reverse rate
            var reverseRate = exchangeRates.find(r => 
                r.fromCurrency == toCurrency && r.toCurrency == fromCurrency);
            if (reverseRate) {
                return {
                    buyRate: 1 / reverseRate.sellRate,
                    sellRate: 1 / reverseRate.buyRate,
                    isReverse: true
                };
            }
            
            // Try via Toman (legacy rates)
            var fromTomanRate = exchangeRates.find(r => r.currency == fromCurrency);
            var toTomanRate = exchangeRates.find(r => r.currency == toCurrency);
            
            if (fromTomanRate && toTomanRate) {
                return {
                    buyRate: toTomanRate.sellRate / fromTomanRate.buyRate,
                    sellRate: toTomanRate.buyRate / fromTomanRate.sellRate,
                    isCrossRate: true
                };
            }
            
            return null;
        }
        
        function updateCalculation() {
            var fromCurrency = document.getElementById('fromCurrencySelect').value;
            var toCurrency = document.getElementById('toCurrencySelect').value;
            var amount = document.getElementById('amountInput').value;
            var orderType = document.querySelector('select[name="OrderType"]').value;
            
            if (fromCurrency && toCurrency && amount && orderType && fromCurrency !== toCurrency) {
                var rate = findExchangeRate(fromCurrency, toCurrency);
                
                if (rate) {
                    var rateValue = orderType == '0' ? rate.buyRate : rate.sellRate; // 0 = Buy, 1 = Sell
                    var total = amount * rateValue;
                    var orderTypeText = orderType == '0' ? 'خرید' : 'فروش';
                    
                    var fromName = getCurrencyName(fromCurrency);
                    var toName = getCurrencyName(toCurrency);
                    
                    var rateInfo = '';
                    if (rate.isReverse) {
                        rateInfo = ' (نرخ معکوس)';
                    } else if (rate.isCrossRate) {
                        rateInfo = ' (نرخ متقابل)';
                    }
                    
                    document.getElementById('calculationText').innerHTML = 
                        `${orderTypeText} ${parseFloat(amount).toLocaleString()} ${fromName} به نرخ ${rateValue.toLocaleString()} = <strong>${total.toLocaleString()} ${toName}</strong>${rateInfo}`;
                    document.getElementById('calculationResult').style.display = 'block';
                } else {
                    document.getElementById('calculationText').innerHTML = 
                        '<span class="text-warning">نرخ ارز برای این جفت ارز موجود نیست</span>';
                    document.getElementById('calculationResult').style.display = 'block';
                }
            } else {
                document.getElementById('calculationResult').style.display = 'none';
            }
        }
        
        // Add event listeners
        document.getElementById('fromCurrencySelect').addEventListener('change', updateCurrencyPairInfo);
        document.getElementById('toCurrencySelect').addEventListener('change', updateCurrencyPairInfo);
        document.getElementById('amountInput').addEventListener('input', updateCalculation);
        document.querySelector('select[name="OrderType"]').addEventListener('change', updateCurrencyPairInfo);
    </script>
}
