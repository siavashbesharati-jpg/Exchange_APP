@model ForexExchange.Models.Order

@{
    ViewData["Title"] = "ثبت معامله جدید";
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title mb-0">ثبت معامله جدید</h4>
                </div>
                <div class="card-body">
                    <form asp-action="Create" method="post">
                        @Html.AntiForgeryToken()
                        @if (!ViewData.ModelState.IsValid && ViewData.ModelState.Values.Any(v => v.Errors.Count > 0)) {
                            <div class="alert alert-danger mt-2" id="validationSummaryBox">
                                <ul class="mb-0">
                                @foreach (var state in ViewData.ModelState.Values)
                                    {
                                        foreach (var error in state.Errors)
                                        {
                                            var msg = error.ErrorMessage;
                                            // Localize known messages
                                            if (msg == "The CustomerId field is required.") msg = "انتخاب مشتری الزامی است.";
                                            if (msg == "The FromCurrencyId field is required.") msg = "انتخاب ارز مبدأ الزامی است.";
                                            if (msg == "The ToCurrencyId field is required.") msg = "انتخاب ارز مقصد الزامی است.";
                                            if (msg == "The Amount field is required.") msg = "مقدار معامله الزامی است.";
                                            <li>@msg</li>
                                        }
                                    }
                                }
                                </ul>
                            </div>
                        }
                        <div class="alert alert-info mt-2" id="currencyPairMsgBox" style="display: none;"></div>

                        <div class="row mb-3">
                            <!-- Currency Pool Information -->
                            <div class="row mb-3">
                                <div class="col-12">
                                    <div class="alert alert-warning" id="currencyPoolInfo" style="display: none;"
                                        dir=ltr>
                                        <h6>موجودی صندوق  ارزها:</h6>
                                        <p id="currencyPoolText"></p>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <label asp-for="CustomerId" class="form-label">انتخاب مشتری</label>
                                <select asp-for="CustomerId" asp-items="ViewBag.Customers" class="form-select"
                                    id="customerSelect" required>
                                    <option value="">یک مشتری انتخاب کنید</option>
                                </select>
                                <span asp-validation-for="CustomerId" class="text-danger"></span>
                            </div>



                            <!-- Removed OrderType dropdown -->
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label asp-for="FromCurrencyId" class="form-label"> دریافت می کنیم </label>
                                <select asp-for="FromCurrencyId" asp-items="ViewBag.FromCurrencies" class="form-select"
                                    id="fromCurrencySelect" required>
                                    <option value="">انتخاب کنید</option>
                                </select>
                                <span asp-validation-for="FromCurrencyId" class="text-danger"></span>
                            </div>

                            <div class="col-md-4">
                                <label asp-for="ToCurrencyId" class="form-label">  پرداخت می کنیم   </label>
                                <select asp-for="ToCurrencyId" asp-items="ViewBag.ToCurrencies" class="form-select"
                                    id="toCurrencySelect" required>
                                    <option value="">انتخاب کنید</option>
                                </select>
                                <span asp-validation-for="ToCurrencyId" class="text-danger"></span>
                            </div>

                            <div class="col-md-4">
                                <label asp-for="Amount" class="form-label">مقدار  (ارز دریافتی)</label>
                                <input asp-for="Amount" type="number" class="form-control" step="0.01"
                                    id="amountInput" required />
                                <span asp-validation-for="Amount" class="text-danger"></span>
                                <div class="form-text">مقادیر منفی برای تراکنش‌های برگشتی مجاز است</div>
                            </div>
                        </div>

                        <!-- Currency Pair Information (moved below pool info if needed) -->

                        <!-- Exchange Rate Display -->
                        <div class="row mb-3">
                            <div class="col-12">
                                <div class="card bg-light">
                                    <div class="card-body">
                                        <h6 class="card-title">نرخ ارز:</h6>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div id="selectedExchangeRate" class="alert alert-info" style="display: none;">
                                                    <div id="rateInfo"></div>
                                                    <div class="spinner-border spinner-border-sm" id="rateLoader"
                                                        style="display: none;" role="status">
                                                        <span class="visually-hidden">در حال بارگذاری...</span>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <label asp-for="Rate" class="form-label">نرخ قابل ویرایش</label>
                                                <div class="input-group">
                                                    <input asp-for="Rate" type="number" class="form-control" step="any"
                                                        id="rateInput" placeholder="نرخ ارز را وارد کنید" />
                                                    <button class="btn btn-outline-secondary" type="button" id="loadSuggestedRateBtn"
                                                        title="بارگذاری نرخ پیشنهادی" disabled>
                                                        <i class="fas fa-sync-alt"></i>
                                                    </button>
                                                    <button class="btn btn-outline-primary" type="button" id="openCalculatorBtn"
                                                        title="باز کردن ماشین حساب" disabled>
                                                        <i class="fas fa-calculator"></i>
                                                    </button>
                                                </div>
                                                <div class="form-text">
                                                    <small class="text-muted">
                                                        نرخ ارز را به صورت دستی وارد کنید یا از نرخ پیشنهادی استفاده کنید
                                                    </small>
                                                </div>
                                                <span asp-validation-for="Rate" class="text-danger"></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Calculation Result -->
                        <div class="row mb-3">
                            <div class="col-12">
                                <div class="alert alert-info" id="calculationResult" style="display: none;">
                                    <h6>محاسبه خودکار:</h6>
                                    <p id="calculationText" dir=ltr></p>
                                </div>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label asp-for="CreatedAt" class="form-label">تاریخ و زمان معامله</label>
                                <input asp-for="CreatedAt" type="datetime-local" class="form-control" id="createdAtInput" />
                                <span asp-validation-for="CreatedAt" class="text-danger"></span>
                                <div class="form-text">تاریخ و زمان ثبت معامله (پیش‌فرض: زمان فعلی)</div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Notes" class="form-label">توضیحات (اختیاری)</label>
                            <textarea asp-for="Notes" class="form-control" rows="3"
                                placeholder="توضیحات اضافی در مورد معامله..."></textarea>
                            <span asp-validation-for="Notes" class="text-danger"></span>
                        </div>

                        <div class="d-flex justify-content-between">
                            <a asp-action="Index" class="btn btn-secondary">بازگشت به لیست</a>
                            <button type="submit" class="btn btn-primary">ثبت معامله</button>
                        </div>

                        <!-- Hidden fields for calculated values -->
                        <input type="hidden" asp-for="TotalAmount" id="hiddenTotalAmount" value="0" />
                        <input type="hidden" asp-for="Rate" id="hiddenRate" value="0" />
                        <input type="hidden" asp-for="FilledAmount" value="0" />
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Calculator Modal -->
<div class="modal fade" id="calculatorModal" tabindex="-1" aria-labelledby="calculatorModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-md">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="calculatorModalLabel">ماشین حساب ارز</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Currency Pair Display -->
                <div class="row mb-3">
                    <div class="col-12">
                        <div class="alert alert-info text-center">
                            <h6 class="mb-1">جفت ارز انتخاب شده:</h6>
                            <div class="d-flex justify-content-center align-items-center">
                                <span id="calcFromCurrencyDisplay" class="badge bg-primary fs-6 me-2">---</span>
                                <i class="fas fa-arrow-left mx-2"></i>
                                <span id="calcToCurrencyDisplay" class="badge bg-success fs-6">---</span>
                            </div>
                            <small class="text-muted mt-1 d-block">
                                از <span id="calcFromCurrencyName">---</span> به <span id="calcToCurrencyName">---</span>
                            </small>
                        </div>
                    </div>
                </div>

                <!-- Rate Input -->
                <div class="row mb-3">
                    <div class="col-12">
                        <label class="form-label">
                            نرخ تبدیل 
                            <small class="text-muted">(هر واحد <span id="calcToCurrencyInRate">---</span> چند <span id="calcFromCurrencyInRate">---</span>)</small>
                        </label>
                        <input type="number" id="calcRate" class="form-control" step="any" placeholder="نرخ">
                        <small class="text-muted">نرخ را ویرایش کنید یا از نرخ محاسبه شده استفاده کنید</small>
                    </div>
                </div>

                <!-- Both Currency Amount Inputs -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">مقدار <span id="fromCurrencyLabel">---</span> مورد نیاز</label>
                        <input type="number" id="calcFromAmount" class="form-control" step="any" placeholder="مقدار">
                        <small class="text-muted">مقدار ارز مبدأ که باید پرداخت شود</small>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">مقدار <span id="toCurrencyLabel">---</span> مورد نیاز</label>
                        <input type="number" id="calcToAmount" class="form-control" step="any" placeholder="مقدار">
                        <small class="text-muted">مقدار ارز مقصد که دریافت می‌شود</small>
                    </div>
                </div>

                <!-- Calculation Result Display -->
                <div class="alert alert-success" id="calcResult" style="display: none;">
                    <h6>نتیجه محاسبه:</h6>
                    <div class="text-center">
                        <div class="h6 mb-1" id="calculationFormula">-</div>
                        <small class="text-muted" id="calculationDetails">-</small>
                    </div>
                </div>

                <!-- Sync Status -->
                <div class="alert alert-warning" id="syncStatus" style="display: none;">
                    <small><i class="fas fa-sync-alt"></i> تغییرات به طور خودکار در فرم اصلی اعمال می‌شود</small>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">بستن</button>
                <button type="button" class="btn btn-primary" id="applyCalculationBtn">اعمال و بستن</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <!-- Include Currency Formatter -->
    <script src="~/js/currency-formatter.js"></script>

    <script>
        let currentRate = null;
        // Currency pool data loaded from server-side ViewBag (dictionary: code => balance)
        let currencyPools = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.PoolData ?? new Dictionary<string, decimal>()));

        // Calculator functionality
        let calculatorModal;
        let calcFromCurrencyId = null;
        let calcToCurrencyId = null;
        let calcFromCurrencyCode = null;
        let calcToCurrencyCode = null;
        
        function initializeCalculator() {
            // Get current selections from main form using jQuery
            const fromSelect = $('#fromCurrencySelect');
            const toSelect = $('#toCurrencySelect');

            // Check if both currencies are selected in main form
            if (!fromSelect.val() || !toSelect.val()) {
                alert('لطفا ابتدا ارزهای مبدا و مقصد را انتخاب کنید');
                return;
            }

            // Get currency codes and names from main form using Select2 data
            const fromData = fromSelect.select2('data')[0];
            const toData = toSelect.select2('data')[0];
            
            // Extract code from text (format: "CODE - Name")
            const fromCode = fromData.text.split(' - ')[0].trim(); // What user pays
            const toCode = toData.text.split(' - ')[0].trim(); // What user gets
            const fromName = fromData.text.split(' - ')[1] ? fromData.text.split(' - ')[1].trim() : fromCode;
            const toName = toData.text.split(' - ')[1] ? toData.text.split(' - ')[1].trim() : toCode;
            
            // Store for calculations
            calcFromCurrencyCode = fromCode; // What user pays (IRR)
            calcToCurrencyCode = toCode;     // What user gets (USD)

            // Update calculator display elements
            document.getElementById('calcFromCurrencyDisplay').textContent = fromCode;
            document.getElementById('calcToCurrencyDisplay').textContent = toCode;
            document.getElementById('calcFromCurrencyName').textContent = fromName;
            document.getElementById('calcToCurrencyName').textContent = toName;
            document.getElementById('fromCurrencyLabel').textContent = fromCode;
            document.getElementById('toCurrencyLabel').textContent = toCode;
            
            // Always display rate as "1 Non-IRR = X IRR" format
            const nonIrrCode = fromCode.toUpperCase() === 'IRR' ? toCode : fromCode;
            const irrCode = 'IRR';
            document.getElementById('calcToCurrencyInRate').textContent = nonIrrCode;
            document.getElementById('calcFromCurrencyInRate').textContent = irrCode;

            // Get current values from main form
            const currentAmount = parseFloat(document.getElementById('amountInput').value) || '';
            const currentRate = parseFloat(document.getElementById('rateInput').value) || '';

            // Pre-fill calculator with main form values
            if (currentAmount) {
                document.getElementById('calcFromAmount').value = currentAmount; // Amount goes to "From" currency
            }

            if (currentRate && currentRate > 0) {
                // Always display rate as "1 Non-IRR = X IRR"
                let displayRate;
                if (fromCode.toUpperCase() === 'IRR') {
                    // FROM is IRR, TO is foreign currency
                    // Main form rate: how much IRR per foreign currency unit
                    // Display rate should be: 1 foreign currency = X IRR
                    displayRate = 1 / currentRate;
                } else {
                    // FROM is foreign currency, TO is IRR
                    // Main form rate: how much foreign currency per IRR unit
                    // Display rate should be: 1 foreign currency = X IRR
                    displayRate = currentRate;
                }
                
                // Always round IRR amounts
                displayRate = Math.round(displayRate);
                
                document.getElementById('calcRate').value = displayRate;
            }

            // Show sync status
            document.getElementById('syncStatus').style.display = 'block';

            // Calculate initial result if both values are present
            if (currentAmount && currentRate) {
                calculateToFromAmount(); // Calculate TO amount from FROM amount
            }
        }

        // Calculate FROM amount based on TO amount and rate
        function calculateFromToAmount() {
            const toAmount = parseFloat(document.getElementById('calcToAmount').value);
            const rate = parseFloat(document.getElementById('calcRate').value); // Rate is always "1 Non-IRR = X IRR"
            
            if (toAmount && rate && rate > 0) {
                let fromAmount;
                
                if (calcFromCurrencyCode.toUpperCase() === 'IRR') {
                    // FROM is IRR, TO is foreign currency
                    // rate = 1 foreign currency = X IRR
                    // fromAmount (IRR) = toAmount (foreign) * rate
                    fromAmount = toAmount * rate;
                    fromAmount = Math.round(fromAmount); // Round IRR amounts
                } else {
                    // FROM is foreign currency, TO is IRR
                    // rate = 1 foreign currency = X IRR
                    // fromAmount (foreign) = toAmount (IRR) / rate
                    fromAmount = toAmount / rate;
                    fromAmount = Math.round(fromAmount * 1000) / 1000; // Round to 3 decimal places
                }
                
                // Update from amount input using the universal formatter
                document.getElementById('calcFromAmount').value = fromAmount;
                
                // Show calculation result
                showCalculationResult(toAmount, fromAmount, rate);
                
                // Auto-update main form with FROM amount (what user is paying)
                updateMainForm(fromAmount, rate);
                
                return fromAmount;
            } else {
                document.getElementById('calcResult').style.display = 'none';
                return null;
            }
        }

        // Calculate TO amount based on FROM amount and rate
        function calculateToFromAmount() {
            const fromAmount = parseFloat(document.getElementById('calcFromAmount').value);
            const rate = parseFloat(document.getElementById('calcRate').value); // Rate is always "1 Non-IRR = X IRR"
            
            if (fromAmount && rate && rate > 0) {
                let toAmount;
                
                if (calcFromCurrencyCode.toUpperCase() === 'IRR') {
                    // FROM is IRR, TO is foreign currency
                    // rate = 1 foreign currency = X IRR
                    // toAmount (foreign) = fromAmount (IRR) / rate
                    toAmount = fromAmount / rate;
                    toAmount = Math.round(toAmount * 1000) / 1000; // Round to 3 decimal places
                } else {
                    // FROM is foreign currency, TO is IRR
                    // rate = 1 foreign currency = X IRR
                    // toAmount (IRR) = fromAmount (foreign) * rate
                    toAmount = fromAmount * rate;
                    toAmount = Math.round(toAmount); // Round IRR amounts
                }
                
                // Update to amount input using the universal formatter
                document.getElementById('calcToAmount').value = toAmount;
                
                // Show calculation result
                showCalculationResult(toAmount, fromAmount, rate);
                
                // Auto-update main form with FROM amount (what user is paying)
                updateMainForm(fromAmount, rate);
                
                return toAmount;
            } else {
                document.getElementById('calcResult').style.display = 'none';
                return null;
            }
        }

        // Calculate rate based on both amounts
        function calculateRateFromAmounts() {
            const fromAmount = parseFloat(document.getElementById('calcFromAmount').value);
            const toAmount = parseFloat(document.getElementById('calcToAmount').value);
            
            if (fromAmount && toAmount && fromAmount > 0 && toAmount > 0) {
                let rate;
                
                if (calcFromCurrencyCode.toUpperCase() === 'IRR') {
                    // FROM is IRR, TO is foreign currency
                    // rate = 1 foreign currency = X IRR
                    // rate = fromAmount (IRR) / toAmount (foreign)
                    rate = fromAmount / toAmount;
                } else {
                    // FROM is foreign currency, TO is IRR
                    // rate = 1 foreign currency = X IRR
                    // rate = toAmount (IRR) / fromAmount (foreign)
                    rate = toAmount / fromAmount;
                }
                
                // Always round IRR rates
                rate = Math.round(rate);
                
                // Update rate input
                document.getElementById('calcRate').value = rate;
                
                // Show calculation result
                showCalculationResult(toAmount, fromAmount, rate);
                
                // Auto-update main form with FROM amount (what user is paying)
                updateMainForm(fromAmount, rate);
                
                return rate;
            } else {
                document.getElementById('calcResult').style.display = 'none';
                return null;
            }
        }

        // Show calculation result display
        function showCalculationResult(toAmount, fromAmount, rate) {
            // Use the universal currency formatter
            const formattedToAmount = formatCurrency(toAmount, calcToCurrencyCode);
            const formattedFromAmount = formatCurrency(fromAmount, calcFromCurrencyCode);
            const formattedRate = formatCurrency(rate, 'IRR'); // Rate is always displayed as IRR format
                
            const formula = `${formattedToAmount} ${calcToCurrencyCode} × ${formattedRate} = ${formattedFromAmount} ${calcFromCurrencyCode}`;
            
            // Always display rate as "1 Non-IRR = X IRR"
            const nonIrrCode = calcFromCurrencyCode.toUpperCase() === 'IRR' ? calcToCurrencyCode : calcFromCurrencyCode;
            const details = `نرخ: ۱ ${nonIrrCode} = ${formattedRate} IRR`;
            
            document.getElementById('calculationFormula').textContent = formula;
            document.getElementById('calculationDetails').textContent = details;
            document.getElementById('calcResult').style.display = 'block';
        }

        // Update main form with calculator values
        function updateMainForm(fromAmount, rate, isFromAmountSource = false) {
            // Put FROM amount back to main form (this represents what user is paying/receiving)
            document.getElementById('amountInput').value = fromAmount;
            
            // Convert calculator rate back to main form format
            let mainFormRate;
            if (calcFromCurrencyCode.toUpperCase() === 'IRR') {
                // FROM is IRR, TO is foreign currency
                // Calculator rate: 1 foreign = X IRR
                // Main form rate: 1 IRR = Y foreign
                mainFormRate = 1 / rate;
            } else {
                // FROM is foreign currency, TO is IRR
                // Calculator rate: 1 foreign = X IRR
                // Main form rate: 1 foreign = X IRR (same)
                mainFormRate = rate;
            }
            
            document.getElementById('rateInput').value = mainFormRate;
            document.getElementById('hiddenRate').value = mainFormRate;
            
            // Trigger calculation update in main form
            updateCalculation();
        }

        // Helper function to update rate input step based on currency
        function updateRateInputStep(fromCurrencyCode = null) {
            // Since we use step="any", we don't need to update the HTML step attribute
            // But we keep this function for potential future use or rounding logic
            return;
        }

        // Helper function to format numbers by removing trailing zeros
        function formatNumber(num, fromCurrencyCode = null) {
            // Use the universal formatter for consistency
            return formatCurrency(num, fromCurrencyCode);
        }

        // Calculate FROM amount based on TO amount and rate
        function calculateFromToAmount() {
            const toAmount = parseFloat(document.getElementById('calcToAmount').value);
            const rate = parseFloat(document.getElementById('calcRate').value); // Rate is always "1 Non-IRR = X IRR"
            
            if (toAmount && rate && rate > 0) {
                let fromAmount;
                
                if (calcFromCurrencyCode.toUpperCase() === 'IRR') {
                    // FROM is IRR, TO is foreign currency
                    // rate = 1 foreign currency = X IRR
                    // fromAmount (IRR) = toAmount (foreign) * rate
                    fromAmount = toAmount * rate;
                    fromAmount = Math.round(fromAmount); // Round IRR amounts
                } else {
                    // FROM is foreign currency, TO is IRR
                    // rate = 1 foreign currency = X IRR
                    // fromAmount (foreign) = toAmount (IRR) / rate
                    fromAmount = toAmount / rate;
                    fromAmount = Math.round(fromAmount * 1000) / 1000; // Round to 3 decimal places
                }
                
                // Update from amount input using the universal formatter
                document.getElementById('calcFromAmount').value = fromAmount;
                
                // Show calculation result
                showCalculationResult(toAmount, fromAmount, rate);
                
                // Auto-update main form with FROM amount (what user is paying)
                updateMainForm(fromAmount, rate);
                
                return fromAmount;
            } else {
                document.getElementById('calcResult').style.display = 'none';
                return null;
            }
        }

        // Calculate TO amount based on FROM amount and rate
        function calculateToFromAmount() {
            const fromAmount = parseFloat(document.getElementById('calcFromAmount').value);
            const rate = parseFloat(document.getElementById('calcRate').value); // Rate is always "1 Non-IRR = X IRR"
            
            if (fromAmount && rate && rate > 0) {
                let toAmount;
                
                if (calcFromCurrencyCode.toUpperCase() === 'IRR') {
                    // FROM is IRR, TO is foreign currency
                    // rate = 1 foreign currency = X IRR
                    // toAmount (foreign) = fromAmount (IRR) / rate
                    toAmount = fromAmount / rate;
                    toAmount = Math.round(toAmount * 1000) / 1000; // Round to 3 decimal places
                } else {
                    // FROM is foreign currency, TO is IRR
                    // rate = 1 foreign currency = X IRR
                    // toAmount (IRR) = fromAmount (foreign) * rate
                    toAmount = fromAmount * rate;
                    toAmount = Math.round(toAmount); // Round IRR amounts
                }
                
                // Update to amount input using the universal formatter
                document.getElementById('calcToAmount').value = toAmount;
                
                // Show calculation result
                showCalculationResult(toAmount, fromAmount, rate);
                
                // Auto-update main form with FROM amount (what user is paying)
                updateMainForm(fromAmount, rate);
                
                return toAmount;
            } else {
                document.getElementById('calcResult').style.display = 'none';
                return null;
            }
        }

        // Calculate rate based on both amounts
        function calculateRateFromAmounts() {
            const fromAmount = parseFloat(document.getElementById('calcFromAmount').value);
            const toAmount = parseFloat(document.getElementById('calcToAmount').value);
            
            if (fromAmount && toAmount && fromAmount > 0 && toAmount > 0) {
                let rate;
                
                if (calcFromCurrencyCode.toUpperCase() === 'IRR') {
                    // FROM is IRR, TO is foreign currency
                    // rate = 1 foreign currency = X IRR
                    // rate = fromAmount (IRR) / toAmount (foreign)
                    rate = fromAmount / toAmount;
                } else {
                    // FROM is foreign currency, TO is IRR
                    // rate = 1 foreign currency = X IRR
                    // rate = toAmount (IRR) / fromAmount (foreign)
                    rate = toAmount / fromAmount;
                }
                
                // Always round IRR rates
                rate = Math.round(rate);
                
                // Update rate input
                document.getElementById('calcRate').value = rate;
                
                // Show calculation result
                showCalculationResult(toAmount, fromAmount, rate);
                
                // Auto-update main form with FROM amount (what user is paying)
                updateMainForm(fromAmount, rate);
                
                return rate;
            } else {
                document.getElementById('calcResult').style.display = 'none';
                return null;
            }
        }

        // Show calculation result display
        function showCalculationResult(toAmount, fromAmount, rate) {
            // Use the universal currency formatter
            const formattedToAmount = formatCurrency(toAmount, calcToCurrencyCode);
            const formattedFromAmount = formatCurrency(fromAmount, calcFromCurrencyCode);
            const formattedRate = formatCurrency(rate, 'IRR'); // Rate is always displayed as IRR format
                
            const formula = `${formattedToAmount} ${calcToCurrencyCode} × ${formattedRate} = ${formattedFromAmount} ${calcFromCurrencyCode}`;
            
            // Always display rate as "1 Non-IRR = X IRR"
            const nonIrrCode = calcFromCurrencyCode.toUpperCase() === 'IRR' ? calcToCurrencyCode : calcFromCurrencyCode;
            const details = `نرخ: ۱ ${nonIrrCode} = ${formattedRate} IRR`;
            
            document.getElementById('calculationFormula').textContent = formula;
            document.getElementById('calculationDetails').textContent = details;
            document.getElementById('calcResult').style.display = 'block';
        }

        // Update main form with calculator values
        function updateMainForm(fromAmount, rate, isFromAmountSource = false) {
            // Put FROM amount back to main form (this represents what user is paying/receiving)
            document.getElementById('amountInput').value = fromAmount;
            
            // Convert calculator rate back to main form format
            let mainFormRate;
            if (calcFromCurrencyCode.toUpperCase() === 'IRR') {
                // FROM is IRR, TO is foreign currency
                // Calculator rate: 1 foreign = X IRR
                // Main form rate: 1 IRR = Y foreign
                mainFormRate = 1 / rate;
            } else {
                // FROM is foreign currency, TO is IRR
                // Calculator rate: 1 foreign = X IRR
                // Main form rate: 1 foreign = X IRR (same)
                mainFormRate = rate;
            }
            
            document.getElementById('rateInput').value = mainFormRate;
            document.getElementById('hiddenRate').value = mainFormRate;
            
            // Trigger calculation update in main form
            updateCalculation();
        }

        // Helper function to update rate input step based on currency
        function updateRateInputStep(fromCurrencyCode = null) {
            // Since we use step="any", we don't need to update the HTML step attribute
            // But we keep this function for potential future use or rounding logic
            return;
        }




        function showCurrencyPoolInfo(fromCurrencyId, toCurrencyId) {
            // Get currency codes from Select2 data
            const fromSelect = $('#fromCurrencySelect');
            const toSelect = $('#toCurrencySelect');
            
            let fromCode = null, toCode = null;
            
            if (fromSelect.val()) {
                const fromData = fromSelect.select2('data')[0];
                fromCode = fromData.text.split(' - ')[0].trim();
            }
            
            if (toSelect.val()) {
                const toData = toSelect.select2('data')[0];
                toCode = toData.text.split(' - ')[0].trim();
            }
            
            // Debug logs
            console.log('currencyPools:', currencyPools);
            console.log('fromCode:', fromCode, 'toCode:', toCode);
            console.log('fromPoolValue:', currencyPools[fromCode]);
            console.log('toPoolValue:', currencyPools[toCode]);
            let html = '';
            if (fromCode && currencyPools.hasOwnProperty(fromCode)) {
                const fromVal = currencyPools[fromCode];
                const fromBadge = fromVal < 0 ? 'badge bg-danger' : 'badge bg-success';
                html += `<strong>موجودی ${fromCode}:</strong> <span class="${fromBadge}">${formatCurrency(fromVal, fromCode)}</span>`;
            }
            if (toCode && currencyPools.hasOwnProperty(toCode)) {
                const toVal = currencyPools[toCode];
                const toBadge = toVal < 0 ? 'badge bg-danger' : 'badge bg-success';
                html += `<br><strong>موجودی ${toCode}:</strong> <span class="${toBadge}">${formatCurrency(toVal, toCode)}</span>`;
            }
            if (html) {
                document.getElementById('currencyPoolText').innerHTML = html;
                document.getElementById('currencyPoolInfo').style.display = 'block';
            } else {
                document.getElementById('currencyPoolInfo').style.display = 'none';
            }
        }

        function loadExchangeRate(fromCurrencyId, toCurrencyId) {
            console.log('loadExchangeRate called with:', fromCurrencyId, toCurrencyId);
            document.getElementById('selectedExchangeRate').style.display = 'block';
            document.getElementById('rateLoader').style.display = 'inline-block';
            document.getElementById('rateInfo').innerHTML = 'در حال بارگذاری نرخ ارز...';
            const url = `/Orders/GetExchangeRate?fromCurrencyId=${fromCurrencyId}&toCurrencyId=${toCurrencyId}&orderType=Buy`;
            console.log('Fetching rate from URL:', url);
            fetch(url)
                .then(response => {
                    console.log('Response status:', response.status);
                    return response.json();
                })
                .then(data => {
                    console.log('Rate data received:', data);
                    document.getElementById('rateLoader').style.display = 'none';
                    if (data.success) {
                        if (data.rate > 0) {
                            // Get from currency code for conditional rounding using Select2
                            const fromSelect = $('#fromCurrencySelect');
                            let fromCode = null;
                            if (fromSelect.val()) {
                                const fromData = fromSelect.select2('data')[0];
                                fromCode = fromData.text.split(' - ')[0].trim();
                            }
                            
                            // Determine rounding precision based on currency
                            const roundingFactor = (fromCode && fromCode.toUpperCase() === 'IRR') ? 10000000 : 100;
                            
                            // Round rate to appropriate decimal places
                            const roundedRate = Math.round(data.rate * roundingFactor) / roundingFactor;
                            currentRate = roundedRate;
                            
                            // Build rate info HTML with average rates
                            let rateInfoHtml = `<strong>نرخ پیشنهادی:</strong> ${formatNumber(roundedRate, fromCode)} <small class="text-muted">(${data.source})</small>`;
                            
                            if (data.averageBuyRate) {
                                const roundedBuyRate = Math.round(data.averageBuyRate * roundingFactor) / roundingFactor;
                                rateInfoHtml += `<br><strong>میانگین نرخ :</strong> ${formatNumber(roundedBuyRate, fromCode)}`;
                            }
                            
                            if (data.averageSellRate) {
                                const roundedSellRate = Math.round(data.averageSellRate * roundingFactor) / roundingFactor;
                                rateInfoHtml += `<br><strong>میانگین نرخ :</strong> ${formatNumber(roundedSellRate, fromCode)}`;
                            }
                            
                            document.getElementById('rateInfo').innerHTML = rateInfoHtml;
                            
                            // Always update the rate input with the new suggested rate when currencies change
                            const rateInput = document.getElementById('rateInput');
                            rateInput.value = roundedRate;
                            document.getElementById('hiddenRate').value = roundedRate;
                            updateCalculation();
                        } else {
                            document.getElementById('rateInfo').innerHTML =
                                '<span class="text-warning">نرخ ارز برای این جفت ارز موجود نیست</span>';
                        }
                    } else {
                        document.getElementById('rateInfo').innerHTML =
                            `<span class="text-danger">خطا: ${data.error}</span>`;
                    }
                })
                .catch(error => {
                    document.getElementById('rateLoader').style.display = 'none';
                    document.getElementById('rateInfo').innerHTML =
                        '<span class="text-danger">خطا در بارگذاری نرخ ارز</span>';
                    console.error('Error loading exchange rate:', error);
                });
        }

        function updateCalculation() {
            var amount = document.getElementById('amountInput').value;
            var rate = document.getElementById('rateInput').value;
            
            // Get from currency code for formatting
            const fromSelect = document.getElementById('fromCurrencySelect');
            const fromCode = fromSelect.value ? fromSelect.options[fromSelect.selectedIndex].text.split(' - ')[0].trim() : null;

            if (amount && rate && parseFloat(rate) > 0) {
                var total = parseFloat(amount) * parseFloat(rate);

                document.getElementById('calculationText').innerHTML =
                    `${formatCurrency(parseFloat(amount), fromCode)} × ${formatCurrency(parseFloat(rate), fromCode)} = <strong>${formatCurrency(total, 'IRR')}</strong>`;
                document.getElementById('calculationResult').style.display = 'block';

                // Update hidden total amount field
                document.getElementById('hiddenTotalAmount').value = total;
                // Update hidden rate field
                document.getElementById('hiddenRate').value = rate;
            } else {
                document.getElementById('calculationResult').style.display = 'none';
                document.getElementById('hiddenTotalAmount').value = '0';
                document.getElementById('hiddenRate').value = '0';
            }
        }

        // Function to update button states based on currency selection
        function updateButtonStates() {
            const fromCurrency = $('#fromCurrencySelect').val();
            const toCurrency = $('#toCurrencySelect').val();
            const hasValidCurrencies = fromCurrency && toCurrency && fromCurrency !== toCurrency;
            
            // Enable/disable buttons based on currency selection
            document.getElementById('loadSuggestedRateBtn').disabled = !hasValidCurrencies;
            document.getElementById('openCalculatorBtn').disabled = !hasValidCurrencies;
        }

        // Add event listeners - Use Select2 events since Select2 replaces the original elements
        $('#fromCurrencySelect').on('select2:select', function (e) {
            console.log('From currency changed via Select2');
            var fromCurrency = $('#fromCurrencySelect').val();
            var toCurrency = $('#toCurrencySelect').val();
            console.log('From currency:', fromCurrency, 'To currency:', toCurrency);
            updateButtonStates(); // Update button states
            
            if (fromCurrency && toCurrency && fromCurrency !== toCurrency) {
                console.log('Loading exchange rate...');
                loadExchangeRate(fromCurrency, toCurrency);
                showCurrencyPoolInfo(fromCurrency, toCurrency);
            } else {
                console.log('Hiding rate display - invalid currencies');
                document.getElementById('selectedExchangeRate').style.display = 'none';
                document.getElementById('calculationResult').style.display = 'none';
                document.getElementById('currencyPoolInfo').style.display = 'none';
            }
        });
        
        $('#toCurrencySelect').on('select2:select', function (e) {
            console.log('To currency changed via Select2');
            var fromCurrency = $('#fromCurrencySelect').val();
            var toCurrency = $('#toCurrencySelect').val();
            console.log('From currency:', fromCurrency, 'To currency:', toCurrency);
            updateButtonStates(); // Update button states
            
            if (fromCurrency && toCurrency && fromCurrency !== toCurrency) {
                console.log('Loading exchange rate...');
                loadExchangeRate(fromCurrency, toCurrency);
                showCurrencyPoolInfo(fromCurrency, toCurrency);
            } else {
                console.log('Hiding rate display - invalid currencies');
                document.getElementById('selectedExchangeRate').style.display = 'none';
                document.getElementById('calculationResult').style.display = 'none';
                document.getElementById('currencyPoolInfo').style.display = 'none';
            }
        });
        document.getElementById('amountInput').addEventListener('input', updateCalculation);

        // Add event listener for manual rate input with validation
        document.getElementById('rateInput').addEventListener('input', function() {
            var rateValue = parseFloat(this.value);
            if (!isNaN(rateValue) && rateValue > 0) {
                // Get from currency code to determine rounding precision using Select2
                const fromSelect = $('#fromCurrencySelect');
                let fromCode = null;
                if (fromSelect.val()) {
                    const fromData = fromSelect.select2('data')[0];
                    fromCode = fromData.text.split(' - ')[0].trim();
                }
                
                // Determine rounding precision based on currency
                const roundingFactor = (fromCode && fromCode.toUpperCase() === 'IRR') ? 10000000 : 100;
                
                // Round to appropriate decimal places
                var roundedRate = Math.round(rateValue * roundingFactor) / roundingFactor;
                
                if (roundedRate !== rateValue) {
                    this.value = roundedRate;
                }
            }
            updateCalculation();
        });

        // Add event listener for load suggested rate button
        document.getElementById('loadSuggestedRateBtn').addEventListener('click', function() {
            var fromCurrency = $('#fromCurrencySelect').val();
            var toCurrency = $('#toCurrencySelect').val();
            console.log('Load suggested rate clicked - From:', fromCurrency, 'To:', toCurrency);
            if (fromCurrency && toCurrency && fromCurrency !== toCurrency) {
                loadExchangeRate(fromCurrency, toCurrency);
            } else {
                alert('لطفاً ابتدا ارز مبدأ و مقصد را انتخاب کنید.');
            }
        });

        // Add form submission validation
        document.querySelector('form').addEventListener('submit', function (e) {
            var fromCurrency = $('#fromCurrencySelect').val();
            var toCurrency = $('#toCurrencySelect').val();
            var amount = document.getElementById('amountInput').value;
            var customerId = document.getElementById('customerSelect').value;
            var rate = document.getElementById('rateInput').value;
            if (!customerId || !fromCurrency || !toCurrency || !amount || !rate || rate === '0') {
                e.preventDefault();
                alert('لطفاً تمام فیلدهای ضروری را تکمیل کنید.');
                return false;
            }
            if (fromCurrency === toCurrency) {
                e.preventDefault();
                alert('ارز مبدأ و مقصد نمی‌توانند یکسان باشند.');
                return false;
            }
            if (parseFloat(rate) <= 0) {
                e.preventDefault();
                alert('نرخ ارز باید بزرگتر از صفر باشد.');
                return false;
            }
        });

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            // Set default date and time to current date/time
            const now = new Date();
            const formattedDateTime = now.getFullYear() + '-' + 
                String(now.getMonth() + 1).padStart(2, '0') + '-' + 
                String(now.getDate()).padStart(2, '0') + 'T' + 
                String(now.getHours()).padStart(2, '0') + ':' + 
                String(now.getMinutes()).padStart(2, '0');
            document.getElementById('createdAtInput').value = formattedDateTime;
            
            // No need to set step since we use step="any"
            // The updateRateInputStep function is kept for potential future use
            
            // Initialize calculator modal
            calculatorModal = new bootstrap.Modal(document.getElementById('calculatorModal'));
            
            // Initialize button states
            updateButtonStates();
        });

        // Calculator event listeners
        document.getElementById('openCalculatorBtn').addEventListener('click', function() {
            // Double-check currencies are selected (button should be disabled if not)
            const fromCurrency = $('#fromCurrencySelect').val();
            const toCurrency = $('#toCurrencySelect').val();
            
            if (!fromCurrency || !toCurrency || fromCurrency === toCurrency) {
                alert('لطفا ابتدا ارزهای مبدا و مقصد را انتخاب کنید');
                return;
            }
            
            initializeCalculator();
            calculatorModal.show();
        });

        document.getElementById('calcRate').addEventListener('input', function() {
            // When rate changes, recalculate based on TO amount if it exists
            const toAmount = parseFloat(document.getElementById('calcToAmount').value);
            const fromAmount = parseFloat(document.getElementById('calcFromAmount').value);
            
            if (toAmount) {
                calculateFromToAmount();
            } else if (fromAmount) {
                calculateToFromAmount();
            }
        });

        document.getElementById('calcToAmount').addEventListener('input', function() {
            // Format the input value based on currency type using the universal formatter
            let value = parseFloat(this.value);
            if (!isNaN(value)) {
                this.value = value;
            }
            
            // When TO amount changes, calculate FROM amount based on rate
            calculateFromToAmount();
        });

        document.getElementById('calcFromAmount').addEventListener('input', function() {
            // Format the input value based on currency type using the universal formatter
            let value = parseFloat(this.value);
            if (!isNaN(value)) {
                this.value = value;
            }
            
            // When FROM amount changes, calculate TO amount based on rate
            calculateToFromAmount();
        });

        document.getElementById('applyCalculationBtn').addEventListener('click', function() {
            // Ensure the main form is updated with final calculator values
            const fromAmount = parseFloat(document.getElementById('calcFromAmount').value);
            const rate = parseFloat(document.getElementById('calcRate').value);
            
            if (fromAmount && rate && rate > 0) {
                updateMainForm(fromAmount, rate);
            }
            
            calculatorModal.hide();
        });
    </script>
}
