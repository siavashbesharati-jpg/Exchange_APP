@model ForexExchange.Models.Order

@{
    ViewData["Title"] = "ثبت معامله جدید";
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title mb-0">ثبت معامله جدید</h4>
                </div>
                <div class="card-body">
                    <form asp-action="Create" method="post">
                        @if (!ViewData.ModelState.IsValid && ViewData.ModelState.Values.Any(v => v.Errors.Count > 0)) {
                            <div class="alert alert-danger mt-2" id="validationSummaryBox">
                                <ul class="mb-0">
                                @foreach (var state in ViewData.ModelState.Values)
                                    {
                                        foreach (var error in state.Errors)
                                        {
                                            var msg = error.ErrorMessage;
                                            // Localize known messages
                                            if (msg == "The CustomerId field is required.") msg = "انتخاب مشتری الزامی است.";
                                            if (msg == "The FromCurrencyId field is required.") msg = "انتخاب ارز مبدأ الزامی است.";
                                            if (msg == "The ToCurrencyId field is required.") msg = "انتخاب ارز مقصد الزامی است.";
                                            if (msg == "The Amount field is required.") msg = "مبلغ معامله الزامی است.";
                                            <li>@msg</li>
                                        }
                                    }
                                }
                                </ul>
                            </div>
                        }
                        <div class="alert alert-info mt-2" id="currencyPairMsgBox" style="display: none;"></div>
                        <div class="alert alert-danger mt-2" id="validationSummaryBox" style="display: none;"></div>

                        <div class="row mb-3">
                            <!-- Currency Pool Information -->
                            <div class="row mb-3">
                                <div class="col-12">
                                    <div class="alert alert-warning" id="currencyPoolInfo" style="display: none;"
                                        dir=ltr>
                                        <h6>موجودی استخر ارزها:</h6>
                                        <p id="currencyPoolText"></p>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <label asp-for="CustomerId" class="form-label">انتخاب مشتری</label>
                                <select asp-for="CustomerId" asp-items="ViewBag.Customers" class="form-select"
                                    id="customerSelect" required>
                                    <option value="">یک مشتری انتخاب کنید</option>
                                </select>
                                <span asp-validation-for="CustomerId" class="text-danger"></span>
                            </div>



                            <!-- Removed OrderType dropdown -->
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label asp-for="FromCurrencyId" class="form-label"> خرید </label>
                                <select asp-for="FromCurrencyId" asp-items="ViewBag.FromCurrencies" class="form-select"
                                    id="fromCurrencySelect" required>
                                    <option value="">انتخاب کنید</option>
                                </select>
                                <span asp-validation-for="FromCurrencyId" class="text-danger"></span>
                            </div>

                            <div class="col-md-4">
                                <label asp-for="ToCurrencyId" class="form-label">  فروش </label>
                                <select asp-for="ToCurrencyId" asp-items="ViewBag.ToCurrencies" class="form-select"
                                    id="toCurrencySelect" required>
                                    <option value="">انتخاب کنید</option>
                                </select>
                                <span asp-validation-for="ToCurrencyId" class="text-danger"></span>
                            </div>

                            <div class="col-md-4">
                                <label asp-for="Amount" class="form-label">مبلغ (ارز مبدأ)</label>
                                <input asp-for="Amount" type="number" class="form-control" step="0.01" min="0"
                                    id="amountInput" required />
                                <span asp-validation-for="Amount" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- Currency Pair Information (moved below pool info if needed) -->

                        <!-- Exchange Rate Display -->
                        <div class="row mb-3">
                            <div class="col-12">
                                <div class="card bg-light">
                                    <div class="card-body">
                                        <h6 class="card-title">نرخ ارز:</h6>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div id="selectedExchangeRate" class="alert alert-info" style="display: none;">
                                                    <div id="rateInfo"></div>
                                                    <div class="spinner-border spinner-border-sm" id="rateLoader"
                                                        style="display: none;" role="status">
                                                        <span class="visually-hidden">در حال بارگذاری...</span>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <label asp-for="Rate" class="form-label">نرخ قابل ویرایش</label>
                                                <div class="input-group">
                                                    <input asp-for="Rate" type="number" class="form-control" step="0.0001" min="0"
                                                        id="rateInput" placeholder="نرخ ارز را وارد کنید" />
                                                    <button class="btn btn-outline-secondary" type="button" id="loadSuggestedRateBtn"
                                                        title="بارگذاری نرخ پیشنهادی">
                                                        <i class="bi bi-arrow-clockwise"></i>
                                                    </button>
                                                </div>
                                                <div class="form-text">
                                                    <small class="text-muted">
                                                        نرخ ارز را به صورت دستی وارد کنید یا از نرخ پیشنهادی استفاده کنید
                                                    </small>
                                                </div>
                                                <span asp-validation-for="Rate" class="text-danger"></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Calculation Result -->
                        <div class="row mb-3">
                            <div class="col-12">
                                <div class="alert alert-info" id="calculationResult" style="display: none;">
                                    <h6>محاسبه خودکار:</h6>
                                    <p id="calculationText" dir=ltr></p>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Notes" class="form-label">توضیحات (اختیاری)</label>
                            <textarea asp-for="Notes" class="form-control" rows="3"
                                placeholder="توضیحات اضافی در مورد معامله..."></textarea>
                            <span asp-validation-for="Notes" class="text-danger"></span>
                        </div>

                        <div class="d-flex justify-content-between">
                            <a asp-action="Index" class="btn btn-secondary">بازگشت به لیست</a>
                            <button type="submit" class="btn btn-primary">ثبت معامله</button>
                        </div>

                        <!-- Hidden fields for calculated values -->
                        <input type="hidden" asp-for="TotalAmount" id="hiddenTotalAmount" value="0" />
                        <input type="hidden" asp-for="Rate" id="hiddenRate" value="0" />
                        <input type="hidden" asp-for="Status" value="0" />
                        <input type="hidden" asp-for="FilledAmount" value="0" />
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }


    <script>
        let currentRate = null;
        // Currency pool data loaded from server-side ViewBag (dictionary: code => balance)
        let currencyPools = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.PoolData ?? new Dictionary<string, decimal>()));




        function showCurrencyPoolInfo(fromCurrencyId, toCurrencyId) {
            // Get currency codes from dropdown values (not text)
            const fromSelect = document.getElementById('fromCurrencySelect');
            const toSelect = document.getElementById('toCurrencySelect');
            const fromCode = fromSelect.value ? fromSelect.options[fromSelect.selectedIndex].text.split(' - ')[0].trim() : null;
            const toCode = toSelect.value ? toSelect.options[toSelect.selectedIndex].text.split(' - ')[0].trim() : null;
            // Debug logs
            console.log('currencyPools:', currencyPools);
            console.log('fromCode:', fromCode, 'toCode:', toCode);
            console.log('fromPoolValue:', currencyPools[fromCode]);
            console.log('toPoolValue:', currencyPools[toCode]);
            let html = '';
            if (fromCode && currencyPools.hasOwnProperty(fromCode)) {
                const fromVal = currencyPools[fromCode];
                const fromBadge = fromVal < 0 ? 'badge bg-danger' : 'badge bg-success';
                html += `<strong>موجودی ${fromCode}:</strong> <span class="${fromBadge}">${fromVal.toLocaleString()}</span>`;
            }
            if (toCode && currencyPools.hasOwnProperty(toCode)) {
                const toVal = currencyPools[toCode];
                const toBadge = toVal < 0 ? 'badge bg-danger' : 'badge bg-success';
                html += `<br><strong>موجودی ${toCode}:</strong> <span class="${toBadge}">${toVal.toLocaleString()}</span>`;
            }
            if (html) {
                document.getElementById('currencyPoolText').innerHTML = html;
                document.getElementById('currencyPoolInfo').style.display = 'block';
            } else {
                document.getElementById('currencyPoolInfo').style.display = 'none';
            }
        }

        function loadExchangeRate(fromCurrencyId, toCurrencyId) {
            document.getElementById('selectedExchangeRate').style.display = 'block';
            document.getElementById('rateLoader').style.display = 'inline-block';
            document.getElementById('rateInfo').innerHTML = 'در حال بارگذاری نرخ ارز...';
            fetch(`/Orders/GetExchangeRate?fromCurrencyId=${fromCurrencyId}&toCurrencyId=${toCurrencyId}`)
                .then(response => response.json())
                .then(data => {
                    document.getElementById('rateLoader').style.display = 'none';
                    if (data.success) {
                        if (data.rate > 0) {
                            // Round rate to 4 decimal places for consistency
                            const roundedRate = Math.round(data.rate * 10000) / 10000;
                            currentRate = roundedRate;
                            
                            // Build rate info HTML with average rates
                            let rateInfoHtml = `<strong>نرخ پیشنهادی:</strong> ${roundedRate.toFixed(4)} <small class="text-muted">(${data.source})</small>`;
                            
                            if (data.averageBuyRate) {
                                const roundedBuyRate = Math.round(data.averageBuyRate * 10000) / 10000;
                                rateInfoHtml += `<br><strong>میانگین نرخ خرید:</strong> ${roundedBuyRate.toFixed(4)}`;
                            }
                            
                            if (data.averageSellRate) {
                                const roundedSellRate = Math.round(data.averageSellRate * 10000) / 10000;
                                rateInfoHtml += `<br><strong>میانگین نرخ فروش:</strong> ${roundedSellRate.toFixed(4)}`;
                            }
                            
                            document.getElementById('rateInfo').innerHTML = rateInfoHtml;
                            
                            // Always update the rate input with the new suggested rate when currencies change
                            const rateInput = document.getElementById('rateInput');
                            rateInput.value = roundedRate;
                            document.getElementById('hiddenRate').value = roundedRate;
                            updateCalculation();
                        } else {
                            document.getElementById('rateInfo').innerHTML =
                                '<span class="text-warning">نرخ ارز برای این جفت ارز موجود نیست</span>';
                        }
                    } else {
                        document.getElementById('rateInfo').innerHTML =
                            `<span class="text-danger">خطا: ${data.error}</span>`;
                    }
                })
                .catch(error => {
                    document.getElementById('rateLoader').style.display = 'none';
                    document.getElementById('rateInfo').innerHTML =
                        '<span class="text-danger">خطا در بارگذاری نرخ ارز</span>';
                    console.error('Error loading exchange rate:', error);
                });
        }

        function updateCalculation() {
            var amount = document.getElementById('amountInput').value;
            var rate = document.getElementById('rateInput').value;

            if (amount && rate && parseFloat(rate) > 0) {
                var total = parseFloat(amount) * parseFloat(rate);

                document.getElementById('calculationText').innerHTML =
                    `${parseFloat(amount).toLocaleString()} × ${parseFloat(rate).toFixed(4)} = <strong>${total.toLocaleString()}</strong>`;
                document.getElementById('calculationResult').style.display = 'block';

                // Update hidden total amount field
                document.getElementById('hiddenTotalAmount').value = total;
                // Update hidden rate field
                document.getElementById('hiddenRate').value = rate;
            } else {
                document.getElementById('calculationResult').style.display = 'none';
                document.getElementById('hiddenTotalAmount').value = '0';
                document.getElementById('hiddenRate').value = '0';
            }
        }

        // Add event listeners
        document.getElementById('fromCurrencySelect').addEventListener('change', function () {
            var fromCurrency = document.getElementById('fromCurrencySelect').value;
            var toCurrency = document.getElementById('toCurrencySelect').value;
            if (fromCurrency && toCurrency && fromCurrency !== toCurrency) {
                loadExchangeRate(fromCurrency, toCurrency);
                showCurrencyPoolInfo(fromCurrency, toCurrency);
            } else {
                document.getElementById('selectedExchangeRate').style.display = 'none';
                document.getElementById('calculationResult').style.display = 'none';
                document.getElementById('currencyPoolInfo').style.display = 'none';
            }
        });
        document.getElementById('toCurrencySelect').addEventListener('change', function () {
            var fromCurrency = document.getElementById('fromCurrencySelect').value;
            var toCurrency = document.getElementById('toCurrencySelect').value;
            if (fromCurrency && toCurrency && fromCurrency !== toCurrency) {
                loadExchangeRate(fromCurrency, toCurrency);
                showCurrencyPoolInfo(fromCurrency, toCurrency);
            } else {
                document.getElementById('selectedExchangeRate').style.display = 'none';
                document.getElementById('calculationResult').style.display = 'none';
                document.getElementById('currencyPoolInfo').style.display = 'none';
            }
        });
        document.getElementById('amountInput').addEventListener('input', updateCalculation);

        // Add event listener for manual rate input with validation
        document.getElementById('rateInput').addEventListener('input', function() {
            var rateValue = parseFloat(this.value);
            if (rateValue > 0) {
                // Round to 4 decimal places to ensure it's a multiple of 0.0001
                var roundedRate = Math.round(rateValue * 10000) / 10000;
                if (roundedRate !== rateValue) {
                    this.value = roundedRate;
                }
            }
            updateCalculation();
        });

        // Add event listener for load suggested rate button
        document.getElementById('loadSuggestedRateBtn').addEventListener('click', function() {
            var fromCurrency = document.getElementById('fromCurrencySelect').value;
            var toCurrency = document.getElementById('toCurrencySelect').value;
            if (fromCurrency && toCurrency && fromCurrency !== toCurrency) {
                loadExchangeRate(fromCurrency, toCurrency);
            } else {
                alert('لطفاً ابتدا ارز مبدأ و مقصد را انتخاب کنید.');
            }
        });

        // Add form submission validation
        document.querySelector('form').addEventListener('submit', function (e) {
            var fromCurrency = document.getElementById('fromCurrencySelect').value;
            var toCurrency = document.getElementById('toCurrencySelect').value;
            var amount = document.getElementById('amountInput').value;
            var customerId = document.getElementById('customerSelect').value;
            var rate = document.getElementById('rateInput').value;
            if (!customerId || !fromCurrency || !toCurrency || !amount || !rate || rate === '0') {
                e.preventDefault();
                alert('لطفاً تمام فیلدهای ضروری را تکمیل کنید.');
                return false;
            }
            if (fromCurrency === toCurrency) {
                e.preventDefault();
                alert('ارز مبدأ و مقصد نمی‌توانند یکسان باشند.');
                return false;
            }
            if (parseFloat(rate) <= 0) {
                e.preventDefault();
                alert('نرخ ارز باید بزرگتر از صفر باشد.');
                return false;
            }
        });
    </script>
}
