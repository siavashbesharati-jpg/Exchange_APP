@model ForexExchange.Models.Order

@{
    ViewData["Title"] = "ثبت معامله جدید";
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title mb-0">ثبت معامله جدید</h4>
                </div>
                <div class="card-body">
                    <form asp-action="Create" method="post">
                        @Html.AntiForgeryToken()
                        @if (!ViewData.ModelState.IsValid && ViewData.ModelState.Values.Any(v => v.Errors.Count > 0))
                        {
                            <div class="alert alert-danger mt-2" id="validationSummaryBox">
                                <ul class="mb-0">
                                    @foreach (var state in ViewData.ModelState.Values)
                                    {
                                        foreach (var error in state.Errors)
                                        {
                                            var msg = error.ErrorMessage;
                                            // Localize known messages
                                            if (msg == "The CustomerId field is required.") msg = "انتخاب مشتری الزامی است.";
                                            if (msg == "The FromCurrencyId field is required.") msg = "انتخاب ارز مبدأ الزامی است.";
                                            if (msg == "The ToCurrencyId field is required.") msg = "انتخاب ارز مقصد الزامی است.";
                                            if (msg == "The Amount field is required.") msg = "مقدار معامله الزامی است.";
                                            <li>@msg</li>
                                        }
                                    }
                                    }
                                </ul>
                            </div>
                        }
                        <div class="alert alert-info mt-2" id="currencyPairMsgBox" style="display: none;"></div>

                        <div class="row mb-3">
                            <!-- Currency Pool Information -->
                            <div class="row mb-3">
                                <div class="col-12">
                                    <div class="alert alert-warning" id="currencyPoolInfo" style="display: none;"
                                        dir=ltr>
                                        <h6>موجودی داشبورد ارزها:</h6>
                                        <p id="currencyPoolText"></p>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <label asp-for="CustomerId" class="form-label">انتخاب مشتری</label>
                                <select asp-for="CustomerId" asp-items="ViewBag.Customers" class="form-select"
                                    id="customerSelect" required>
                                    <option value="">یک مشتری انتخاب کنید</option>
                                </select>
                                <span asp-validation-for="CustomerId" class="text-danger"></span>
                            </div>

                            <div class="col-md-6">
                                <label asp-for="CreatedAt" class="form-label">تاریخ و زمان معامله</label>
                                <input asp-for="CreatedAt" type="datetime-local" class="form-control"
                                    id="createdAtInput" />
                                <span asp-validation-for="CreatedAt" class="text-danger"></span>
                                <div class="form-text">تاریخ و زمان ثبت معامله (پیش‌فرض: زمان فعلی)</div>
                            </div>




                            <!-- Removed OrderType dropdown -->
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label asp-for="FromCurrencyId" class="form-label"> دریافت می کنیم </label>
                                <select asp-for="FromCurrencyId" asp-items="ViewBag.FromCurrencies" class="form-select"
                                    id="fromCurrencySelect" required>
                                    <option value="">انتخاب کنید</option>
                                </select>
                                <span asp-validation-for="FromCurrencyId" class="text-danger"></span>
                            </div>

                            <div class="col-md-4">
                                <label asp-for="ToCurrencyId" class="form-label"> پرداخت می کنیم </label>
                                <select asp-for="ToCurrencyId" asp-items="ViewBag.ToCurrencies" class="form-select"
                                    id="toCurrencySelect" required>
                                    <option value="">انتخاب کنید</option>
                                </select>
                                <span asp-validation-for="ToCurrencyId" class="text-danger"></span>
                            </div>

                            <div class="col-md-4">
                                <label asp-for="Rate" class="form-label">نرخ ارز</label>
                                <input asp-for="Rate" type="number" id="calcRateInput" class="form-control" step="any"
                                    placeholder="نرخ ارز را وارد کنید">
                                <span asp-validation-for="Rate" class="text-danger"></span>
                            </div>

                        </div>

                        <!-- Amount Input Row -->
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label asp-for="FromAmount" class="form-label"> <span
                                        id="calcFromAmountLabel">---</span></label>
                                <input asp-for="FromAmount" type="number" id="calcFromAmountInput" class="form-control"
                                    step="any" placeholder="مقدار">
                                <span asp-validation-for="FromAmount" class="text-danger"></span>
                            </div>
                            <div class="col-md-6">
                                <label asp-for="ToAmount" class="form-label"> <span
                                        id="calcToAmountLabel">---</span></label>
                                <input asp-for="ToAmount" type="number" id="calcToAmountInput" class="form-control"
                                    step="any" placeholder="مقدار">
                                <span asp-validation-for="ToAmount" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- Hidden elements for JavaScript reference -->
                        <div style="display: none;">
                            <span id="calcRateFromCurrency">---</span>
                            <span id="calcRateLabel">---</span>
                            <span id="calcRateToCurrency">IRR</span>
                            <span id="calcFromCurrencyCode">---</span>
                            <span id="calcFromCurrencyName">انتخاب نشده</span>
                            <span id="calcToCurrencyCode">---</span>
                            <span id="calcToCurrencyName">انتخاب نشده</span>
                            <button type="button" id="loadSuggestedRateBtn">Load Rate</button>
                        </div>

                        <!-- Currency Pair Information (moved below pool info if needed) -->

                        <!-- Calculation Result -->
                        <div class="row mb-3" style="display: none;">
                            <div class="col-12">
                                <div class="alert alert-info" id="calculationResult" style="display: none;">
                                    <h6>محاسبه خودکار:</h6>
                                    <p id="calculationText" dir=ltr></p>
                                </div>
                            </div>
                        </div>



                        <div class="mb-3">
                            <label asp-for="Notes" class="form-label">توضیحات (اختیاری)</label>
                            <textarea asp-for="Notes" class="form-control" rows="3"
                                placeholder="توضیحات اضافی در مورد معامله..."></textarea>
                            <span asp-validation-for="Notes" class="text-danger"></span>
                        </div>


                        <div class="d-flex justify-content-between">
                            <a asp-action="Index" class="btn btn-secondary">بازگشت به لیست</a>
                            <button type="button" class="btn btn-info" id="previewEffectsBtn">پیش‌نمایش تاثیر</button>
                        </div>

                        <!-- Order Preview Modal - Beautiful Styling -->
                        <div class="modal fade" id="previewModal" tabindex="-1" aria-labelledby="previewModalLabel"
                            aria-hidden="true">
                            <div class="modal-dialog modal-lg">
                                <div class="modal-content">
                                    <div class="modal-header bg-info text-white">
                                        <h5 class="modal-title" id="previewModalLabel">
                                            <i class="fas fa-eye"></i> پیش‌نمایش تاثیر معامله
                                        </h5>
                                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                                            aria-label="بستن"></button>
                                    </div>
                                    <div class="modal-body">
                                        <div class="alert alert-info">
                                            <i class="fas fa-info-circle"></i> لطفاً جزئیات معامله و تأثیرات آن را بررسی
                                            کنید.
                                        </div>

                                        <!-- Order Summary -->
                                        <div class="card mb-3">
                                            <div class="card-header">
                                                <h6 class="mb-0"><i class="fas fa-exchange-alt"></i> خلاصه معامله</h6>
                                            </div>
                                            <div class="card-body">
                                                <div id="previewOrderDetails" class="row">
                                                    <!-- Order details will be populated here -->
                                                </div>
                                            </div>
                                        </div>

                                        <!-- Balance Effects -->
                                        <div class="card mb-3">
                                            <div class="card-header">
                                                <h6 class="mb-0"><i class="fas fa-balance-scale"></i> تأثیرات بر ترازها
                                                </h6>
                                            </div>
                                            <div class="card-body">
                                                <div id="balance-effects-loading" class="text-center py-3"
                                                    style="display: none;">
                                                    <div class="spinner-border text-primary" role="status">
                                                        <span class="visually-hidden">در حال بارگذاری...</span>
                                                    </div>
                                                    <div class="mt-2">در حال محاسبه تأثیرات...</div>
                                                </div>
                                                <div id="previewOrderEffects">
                                                    <!-- Balance effects will be populated here -->
                                                </div>
                                            </div>
                                        </div>

                                        <!-- Warning Messages -->
                                        <div id="order-warnings" style="display: none;">
                                            <div class="alert alert-warning">
                                                <i class="fas fa-exclamation-triangle"></i>
                                                <div id="warning-messages"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                                            <i class="fas fa-times"></i> انصراف
                                        </button>
                                        <button type="button" id="finalSubmitBtn" class="btn btn-primary">
                                            <i class="fas fa-check"></i> تایید و ثبت نهایی
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@Html.Partial("_LoadingOverlay")

@{
    await Html.RenderPartialAsync("_ValidationScriptsPartial");
}
@section Scripts {
    <link rel="stylesheet" href="~/css/loading-overlay.css" />
    <script src="~/js/loading-overlay.js"></script>

    <script src="~/js/currency-formatter.js"></script>
    <script src="~/js/order-preview.js"></script> <!-- فایل جداگانه -->

    <script>
        // --- داده‌ها از سرور ---
        let currencyPools = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.PoolData ?? new Dictionary<string, decimal>()));
        const currenciesData = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.CurrenciesData));

        // --- Helper ---
        function getRatePriorityById(id) {
            if (!id || !currenciesData[id]) return 99;
            return currenciesData[id].RatePriority || 99;
        }

        function getCurrencyCodeById(id, selectId) {
            const sel = document.getElementById(selectId);
            if (!sel) return null;
            const opt = sel.querySelector(`option[value='${id}']`);
            if (!opt) return null;
            return opt.textContent.split(' - ')[0].trim();
        }

        function getCalcDirection() {
            const fromPriority = getRatePriorityById(document.getElementById('fromCurrencySelect').value);
            const toPriority = getRatePriorityById(document.getElementById('toCurrencySelect').value);
            if (fromPriority < toPriority) return 'multiply';
            if (fromPriority > toPriority) return 'divide';
            return 'multiply';
        }

        function showCurrencyPoolInfo(fromCurrencyId, toCurrencyId) {
            const fromSelect = $('#fromCurrencySelect');
            const toSelect = $('#toCurrencySelect');
            let fromCode = fromSelect.val() ? fromSelect.select2('data')[0].text.split(' - ')[0].trim() : null;
            let toCode = toSelect.val() ? toSelect.select2('data')[0].text.split(' - ')[0].trim() : null;

            let html = '';
            if (fromCode && currencyPools.hasOwnProperty(fromCode)) {
                const fromVal = currencyPools[fromCode];
                html += `<strong>موجودی ${fromCode}:</strong> <span class="badge ${fromVal < 0 ? 'bg-danger' : 'bg-success'}">${formatCurrency(fromVal, fromCode)}</span>`;
            }
            if (toCode && currencyPools.hasOwnProperty(toCode)) {
                const toVal = currencyPools[toCode];
                html += `<br><strong>موجودی ${toCode}:</strong> <span class="badge ${toVal < 0 ? 'bg-danger' : 'bg-success'}">${formatCurrency(toVal, toCode)}</span>`;
            }

            document.getElementById('currencyPoolText').innerHTML = html;
            document.getElementById('currencyPoolInfo').style.display = html ? 'block' : 'none';
        }

        function calculateFromAmountChange() {
            const direction = getCalcDirection();
            const fromAmount = parseFloat(document.getElementById('calcFromAmountInput').value);
            const rate = parseFloat(document.getElementById('calcRateInput').value);
            const toCode = getCurrencyCodeById(document.getElementById('toCurrencySelect').value, 'toCurrencySelect') || '';

            // Only update ToAmount if we have valid inputs for calculation
            if (fromAmount && rate && rate > 0) {
                let toAmount = direction === "divide" ? fromAmount / rate : fromAmount * rate;
                // Use unified formatter: IRR = truncate decimals, non-IRR = truncate to 2 decimals
                if (toCode.toUpperCase() === 'IRR') {
                    toAmount = Math.trunc(toAmount);
                } else {
                    toAmount = Math.trunc(toAmount * 100) / 100;
                }
                document.getElementById('calcToAmountInput').value = toAmount;
            }
            // Don't clear ToAmount if calculation fails - preserve user input
        }

        function calculateToAmountChange() {
            const toAmount = parseFloat(document.getElementById('calcToAmountInput').value);
            const rate = parseFloat(document.getElementById('calcRateInput').value);
            const direction = getCalcDirection();
            const fromCode = getCurrencyCodeById(document.getElementById('fromCurrencySelect').value, 'fromCurrencySelect') || '';

            // Only update FromAmount if we have valid inputs for calculation
            if (toAmount && rate && rate > 0) {
                let fromAmount = direction === "divide" ? toAmount * rate : toAmount / rate;
                // Use unified formatter: IRR = truncate decimals, non-IRR = truncate to 2 decimals
                if (fromCode.toUpperCase() === 'IRR') {
                    fromAmount = Math.trunc(fromAmount);
                } else {
                    fromAmount = Math.trunc(fromAmount * 100) / 100;
                }
                document.getElementById('calcFromAmountInput').value = fromAmount;
            }
            // Don't clear FromAmount if calculation fails - preserve user input
        }

        function getOrderPreviewData() {
            return {
                customerId: parseInt(document.getElementById('customerSelect').value) || 0,
                fromCurrencyId: parseInt(document.getElementById('fromCurrencySelect').value) || 0,
                toCurrencyId: parseInt(document.getElementById('toCurrencySelect').value) || 0,
                fromAmount: parseFloat(document.getElementById('calcFromAmountInput').value) || 0,
                toAmount: parseFloat(document.getElementById('calcToAmountInput').value) || 0,
                rate: parseFloat(document.getElementById('calcRateInput').value) || 0,
                createdAt: document.getElementById('createdAtInput')?.value || null,
                notes: document.getElementById('Notes')?.value || null
            };
        }

        document.addEventListener('DOMContentLoaded', function () {
            const now = new Date();
            document.getElementById('createdAtInput').value =
                now.getFullYear() + '-' + String(now.getMonth() + 1).padStart(2, '0') + '-' + String(now.getDate()).padStart(2, '0') +
                'T' + String(now.getHours()).padStart(2, '0') + ':' + String(now.getMinutes()).padStart(2, '0');

            if (typeof $.fn.select2 !== 'undefined') {
                $('#fromCurrencySelect').select2();
                $('#toCurrencySelect').select2();
                $('#customerSelect').select2();
            }

            $('#fromCurrencySelect,#toCurrencySelect').on('select2:select', function () {
                $('#calcFromAmountLabel').text($("#fromCurrencySelect").select2('data')[0].text);
                $('#calcToAmountLabel').text($("#toCurrencySelect").select2('data')[0].text);
                
                // Only clear values if user is not currently focused on them
                const activeElement = document.activeElement;
                const fromAmountInput = document.getElementById('calcFromAmountInput');
                const toAmountInput = document.getElementById('calcToAmountInput');
                const rateInput = document.getElementById('calcRateInput');
                
                if (activeElement !== fromAmountInput) {
                    fromAmountInput.value = '';
                }
                if (activeElement !== toAmountInput) {
                    toAmountInput.value = '';
                }
                if (activeElement !== rateInput) {
                    rateInput.value = '';
                }

                const f = $('#fromCurrencySelect').val();
                const t = $('#toCurrencySelect').val();
                if (f && t && f !== t) showCurrencyPoolInfo(f, t);
                else document.getElementById('currencyPoolInfo').style.display = 'none';
            });

            document.getElementById('calcFromAmountInput')?.addEventListener('keyup', calculateFromAmountChange);
            document.getElementById('calcToAmountInput')?.addEventListener('keyup', calculateToAmountChange);
            document.getElementById('calcRateInput')?.addEventListener('keyup', calculateFromAmountChange);

            // --- دکمه ثبت نهایی ایجکسی ---
            document.getElementById('finalSubmitBtn').addEventListener('click', function (e) {
                e.preventDefault();
                const btn = e.target;
                const originalText = btn.innerHTML;

                // Show beautiful loading overlay
                showLoadingWithMessage('CREATING_ORDER');

                // تغییر به حالت لودینگ
                btn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> در حال ثبت...';
                btn.disabled = true;

                const data = getOrderPreviewData();

                fetch('/Orders/Create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value,
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify(data)
                })
                    .then(async res => {
                        if (!res.ok) {
                            hideLoadingOverlay();
                            let msg = 'خطا در ثبت معامله';
                            try { msg += ': ' + await res.text(); } catch { }
                            alert(msg);
                            return;
                        }
                        return res.json();
                    })
                    .then(result => {
                        hideLoadingOverlay();
                        if (result && result.success) {
                            // نمایش پیام موفقیت بدون بستن مودال
                            alert('معامله با موفقیت ثبت شد!');
                            window.location.href = result.redirectUrl;
                        } else {
                            alert(result.message);
                        }
                    })
                    .catch(err => {
                        hideLoadingOverlay();
                        alert('خطا در ارتباط با سرور: ' + err);
                    })
                    .finally(() => {
                        // بازگرداندن دکمه به حالت اولیه
                        btn.innerHTML = originalText;
                        btn.disabled = false;
                    });
            });
        });
    </script>
}