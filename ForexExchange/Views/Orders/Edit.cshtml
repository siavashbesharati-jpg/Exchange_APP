@model ForexExchange.Models.Order

@{
    ViewData["Title"] = "ویرایش معامله";
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-lg-10 col-xl-8">
            <div class="card shadow-sm">
                <div class="card-body">
                    <form asp-action="Edit" method="post">
                        @Html.AntiForgeryToken()
                        @if (!ViewData.ModelState.IsValid && ViewData.ModelState.Values.Any(v => v.Errors.Count > 0)) {
                            <div class="alert alert-danger mt-2" id="validationSummaryBox">
                                <ul class="mb-0">
                                @foreach (var state in ViewData.ModelState.Values)
                                    {
                                        foreach (var error in state.Errors)
                                        {
                                            var msg = error.ErrorMessage;
                                            if (msg == "The CustomerId field is required.") msg = "انتخاب مشتری الزامی است.";
                                            if (msg == "The FromCurrencyId field is required.") msg = "انتخاب ارز مبدأ الزامی است.";
                                            if (msg == "The ToCurrencyId field is required.") msg = "انتخاب ارز مقصد الزامی است.";
                                            if (msg == "The Amount field is required.") msg = "مقدار  معامله الزامی است.";
                                            <li>@msg</li>
                                        }
                                    }
                                }
                                </ul>
                            </div>
                        }
                        <div class="alert alert-info mt-2" id="currencyPairMsgBox" style="display: none;"></div>

                        <input asp-for="Id" type="hidden" />

                        <div class="row mb-3">
                            <!-- Currency Pool Information -->
                            <div class="row mb-3">
                                <div class="col-12">
                                    <div class="alert alert-warning" id="currencyPoolInfo" style="display: none;"
                                        dir=ltr>
                                        <h6>موجودی صندوق  ارزها:</h6>
                                        <p id="currencyPoolText"></p>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <label asp-for="CustomerId" class="form-label">انتخاب مشتری</label>
                                <select asp-for="CustomerId" asp-items="ViewBag.Customers" class="form-select"
                                    id="customerSelect" required>
                                    <option value="">یک مشتری انتخاب کنید</option>
                                </select>
                                <span asp-validation-for="CustomerId" class="text-danger"></span>
                            </div>

                            <div class="col-md-6">
                                <label asp-for="CreatedAt" class="form-label">تاریخ و زمان معامله</label>
                                <input asp-for="CreatedAt" type="datetime-local" class="form-control" id="createdAtInput" />
                                <span asp-validation-for="CreatedAt" class="text-danger"></span>
                                <div class="form-text">تاریخ و زمان ثبت معامله</div>
                            </div>
       



                            <!-- Removed OrderType dropdown -->
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label asp-for="FromCurrencyId" class="form-label"> دریافت می کنیم </label>
                                <select asp-for="FromCurrencyId" asp-items="ViewBag.FromCurrencies" class="form-select"
                                    id="fromCurrencySelect" required>
                                    <option value="">انتخاب کنید</option>
                                </select>
                                <span asp-validation-for="FromCurrencyId" class="text-danger"></span>
                            </div>

                            <div class="col-md-4">
                                <label asp-for="ToCurrencyId" class="form-label">  پرداخت می کنیم   </label>
                                <select asp-for="ToCurrencyId" asp-items="ViewBag.ToCurrencies" class="form-select"
                                    id="toCurrencySelect" required>
                                    <option value="">انتخاب کنید</option>
                                </select>
                                <span asp-validation-for="ToCurrencyId" class="text-danger"></span>
                            </div>

                            <div class="col-md-4">
                                <label class="form-label">نرخ ارز</label>
                                <input type="number" id="calcRateInput" class="form-control" step="any" placeholder="نرخ ارز را وارد کنید">
                            </div>

                            <div class="col-md-4" style="display: none;">
                                <label asp-for="Amount" class="form-label">مقدار  (ارز دریافتی)</label>
                                <input asp-for="Amount" type="number" class="form-control" step="0.01"
                                    id="amountInput" required />
                                <span asp-validation-for="Amount" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- Amount Input Row -->
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="form-label"> <span id="calcFromAmountLabel">---</span></label>
                                <input type="number" id="calcFromAmountInput" class="form-control" step="any" placeholder="مقدار">
                            </div>
                            <div class="col-md-6">
                                <label class="form-label"> <span id="calcToAmountLabel">---</span></label>
                                <input type="number" id="calcToAmountInput" class="form-control" step="any" placeholder="مقدار">
                            </div>
                        </div>

                        <!-- Hidden elements for JavaScript reference -->
                        <div style="display: none;">
                            <span id="calcRateFromCurrency">---</span>
                            <span id="calcRateLabel">---</span>
                            <span id="calcRateToCurrency">IRR</span>
                            <span id="calcFromCurrencyCode">---</span>
                            <span id="calcFromCurrencyName">انتخاب نشده</span>
                            <span id="calcToCurrencyCode">---</span>
                            <span id="calcToCurrencyName">انتخاب نشده</span>
                            <!-- Hidden inputs for main form compatibility -->
                            <input type="number" id="rateInput" step="any">
                            <button type="button" id="loadSuggestedRateBtn">Load Rate</button>
                        </div>

                        <!-- Currency Pair Information (moved below pool info if needed) -->

                        <!-- Calculation Result -->
                        <div class="row mb-3" style="display: none;">
                            <div class="col-12">
                                <div class="alert alert-info" id="calculationResult" style="display: none;">
                                    <h6>محاسبه خودکار:</h6>
                                    <p id="calculationText" dir=ltr></p>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Notes" class="form-label">توضیحات (اختیاری)</label>
                            <textarea asp-for="Notes" class="form-control" rows="3" placeholder="توضیحات اضافی در مورد معامله..."></textarea>
                            <span asp-validation-for="Notes" class="text-danger"></span>
                        </div>

                        <div class="d-flex justify-content-between">
                            <a asp-action="Index" class="btn btn-secondary">بازگشت به لیست</a>
                            <button type="submit" class="btn btn-primary">بروزرسانی معامله</button>
                        </div>

                        <!-- Hidden fields for calculated values -->
                        <input type="hidden" asp-for="TotalAmount" id="hiddenTotalAmount" />
                        <input type="hidden" asp-for="Rate" id="hiddenRate" />
                        <input type="hidden" asp-for="FilledAmount" />
                        
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <!-- Include Currency Formatter -->
    <script src="~/js/currency-formatter.js"></script>

    <script>
        let currentRate = null;
        // Currency pool data loaded from server-side ViewBag (dictionary: code => balance)
        let currencyPools = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.PoolData ?? new Dictionary<string, decimal>()));

        // Calculator functionality - variables for inline calculator
        let calcFromCurrencyId = null;
        let calcToCurrencyId = null;
        let calcFromCurrencyCode = null;
        let calcToCurrencyCode = null;
        
        function clearCalculatorInputs() {
            console.log('=== clearCalculatorInputs called ===');
            
            // Clear previous values
            document.getElementById('calcFromAmountInput').value = '';
            document.getElementById('calcToAmountInput').value = '';
            document.getElementById('calcRateInput').value = '';
            
            console.log('Cleared calculator inputs');
            
            // Automatically load and set the rate
            if (typeof $.fn.select2 !== 'undefined' && $('#fromCurrencySelect').hasClass('select2-hidden-accessible')) {
                loadRateForCalculator($('#fromCurrencySelect').val(), $('#toCurrencySelect').val());
            } else {
                loadRateForCalculator(document.getElementById('fromCurrencySelect').value, document.getElementById('toCurrencySelect').value);
            }
        }

        // Load exchange rate for calculator
        function loadRateForCalculator(fromCurrencyId, toCurrencyId) {
            console.log('=== loadRateForCalculator called ===');
            console.log('fromCurrencyId:', fromCurrencyId, 'toCurrencyId:', toCurrencyId);
            
            if (!fromCurrencyId || !toCurrencyId || fromCurrencyId === toCurrencyId) {
                console.log('Invalid currency selection for rate loading');
                return;
            }
            
            // Fetch exchange rate
            fetch(`/api/exchangerate/get?fromCurrencyId=${fromCurrencyId}&toCurrencyId=${toCurrencyId}`)
                .then(response => response.json())
                .then(data => {
                    console.log('Exchange rate response:', data);
                    if (data.success && data.rate) {
                        const rate = Math.round(data.rate);
                        document.getElementById('calcRateInput').value = rate;
                        console.log('Set calculator rate to:', rate);
                    } else {
                        console.log('No rate available, keeping manual input');
                    }
                })
                .catch(error => {
                    console.error('Error loading rate for calculator:', error);
                });
        }

        // Calculate when FROM amount changes
        function calculateFromAmountChange() {
            console.log('=== calculateFromAmountChange called ===');
            const fromAmount = parseFloat(document.getElementById('calcFromAmountInput').value);
            const rate = parseFloat(document.getElementById('calcRateInput').value);
            
            console.log('fromAmount:', fromAmount, 'rate:', rate);
            
            if (fromAmount && rate && rate > 0) {
                // Calculate TO amount
                let toAmount;
                if (calcFromCurrencyCode && calcFromCurrencyCode.toUpperCase() === 'IRR') {
                    // From IRR to foreign currency
                    toAmount = fromAmount / rate;
                    toAmount = Math.round(toAmount * 1000) / 1000;
                } else {
                    // From foreign currency to IRR  
                    toAmount = fromAmount * rate;
                    toAmount = Math.round(toAmount);
                }
                
                console.log('Calculated toAmount:', toAmount);
                document.getElementById('calcToAmountInput').value = toAmount;
                showInlineCalculationResult(fromAmount, toAmount, rate);
                
                // Immediately update main form
                updateMainFormFromCalculator(fromAmount, rate);
            } else {
                console.log('Clearing toAmount - invalid inputs');
                document.getElementById('calcToAmountInput').value = '';
                clearMainForm();
            }
        }

        // Calculate when TO amount changes
        function calculateToAmountChange() {
            console.log('=== calculateToAmountChange called ===');
            const toAmount = parseFloat(document.getElementById('calcToAmountInput').value);
            const rate = parseFloat(document.getElementById('calcRateInput').value);
            
            console.log('toAmount:', toAmount, 'rate:', rate);
            
            if (toAmount && rate && rate > 0) {
                // Calculate FROM amount
                let fromAmount;
                if (calcFromCurrencyCode && calcFromCurrencyCode.toUpperCase() === 'IRR') {
                    // From IRR to foreign currency
                    fromAmount = toAmount * rate;
                    fromAmount = Math.round(fromAmount);
                } else {
                    // From foreign currency to IRR
                    fromAmount = toAmount / rate;
                    fromAmount = Math.round(fromAmount * 1000) / 1000;
                }
                
                console.log('Calculated fromAmount:', fromAmount);
                document.getElementById('calcFromAmountInput').value = fromAmount;
                showInlineCalculationResult(fromAmount, toAmount, rate);
                
                // Immediately update main form
                updateMainFormFromCalculator(fromAmount, rate);
            } else {
                console.log('Clearing fromAmount - invalid inputs');
                document.getElementById('calcFromAmountInput').value = '';
                clearMainForm();
            }
        }

        // Calculate when rate changes
        function calculateRateChange() {
            console.log('=== calculateRateChange called ===');
            const rate = parseFloat(document.getElementById('calcRateInput').value);
            const fromAmount = parseFloat(document.getElementById('calcFromAmountInput').value);
            
            // Update hidden rate input
            const hiddenRateInput = document.getElementById('hiddenRate');
            if (hiddenRateInput && rate) {
                hiddenRateInput.value = rate;
            }
            
            if (rate && rate > 0 && fromAmount) {
                // Recalculate TO amount based on FROM amount and new rate
                calculateFromAmountChange();
            } else if (rate && rate > 0) {
                // Just clear TO amount if no FROM amount
                console.log('Rate valid but no fromAmount, clearing toAmount');
                document.getElementById('calcToAmountInput').value = '';
            } else {
                console.log('Invalid rate, clearing everything');
                clearMainForm();
            }
        }

        // Update main form immediately from calculator values
        function updateMainFormFromCalculator(fromAmount, rate) {
            console.log('=== updateMainFormFromCalculator called ===');
            console.log('fromAmount:', fromAmount, 'rate:', rate);
            
            // Update the main form amount input
            document.getElementById('amountInput').value = fromAmount;
            
            // Update hidden fields
            document.getElementById('hiddenRate').value = rate;
            
            // Update rate input if it exists
            const rateInput = document.getElementById('rateInput');
            if (rateInput) {
                rateInput.value = rate;
            }
            
            // Trigger calculation update
            updateCalculation();
        }

        // Clear main form
        function clearMainForm() {
            console.log('=== clearMainForm called ===');
            document.getElementById('amountInput').value = '';
            document.getElementById('hiddenRate').value = '0';
            const rateInput = document.getElementById('rateInput');
            if (rateInput) {
                rateInput.value = '';
            }
            // Hide calculation result
            const calculationResult = document.getElementById('calculationResult');
            if (calculationResult) {
                calculationResult.style.display = 'none';
            }
        }

        // Show calculation result
        function showInlineCalculationResult(fromAmount, toAmount, rate) {
            console.log('=== showInlineCalculationResult called ===');
            console.log('Parameters:', fromAmount, toAmount, rate);
            console.log('Currency codes:', calcFromCurrencyCode, calcToCurrencyCode);
            
            const fromCode = calcFromCurrencyCode;
            const toCode = calcToCurrencyCode;
            
            // Check if currency codes are defined
            if (!fromCode || !toCode) {
                console.error('Currency codes not defined:', fromCode, toCode);
                return;
            }
            
            const formattedFromAmount = formatCurrency(fromAmount, fromCode);
            const formattedToAmount = formatCurrency(toAmount, toCode);
            const formattedRate = formatCurrency(rate, 'IRR');
            
            const formula = `${formattedFromAmount} ${fromCode} → ${formattedToAmount} ${toCode}`;
            const details = `نرخ: ۱ ${fromCode.toUpperCase() === 'IRR' ? toCode : fromCode} = ${formattedRate} IRR`;
            
            console.log('Calculation result:', formula, details);
            
            // Note: Display elements removed - calculation result only logged
        }

        // Update calculation display
        function updateCalculation() {
            var amount = document.getElementById('amountInput').value;
            var rate = document.getElementById('rateInput').value;
            
            // Get from currency code using Select2
            const fromSelect = $('#fromCurrencySelect');
            let fromCode = null;
            if (fromSelect.val()) {
                const fromData = fromSelect.select2('data')[0];
                fromCode = fromData.text.split(' - ')[0].trim();
            }
            
            if (amount && rate && parseFloat(rate) > 0) {
                var total = parseFloat(amount) * parseFloat(rate);
                document.getElementById('calculationText').innerHTML = `${formatCurrency(parseFloat(amount), fromCode)} × ${formatNumber(parseFloat(rate), fromCode)} = <strong>${formatCurrency(total, 'IRR')}</strong>`;
                document.getElementById('calculationResult').style.display = 'block';
                document.getElementById('hiddenTotalAmount').value = total;
                document.getElementById('hiddenRate').value = rate;
            } else {
                document.getElementById('calculationResult').style.display = 'none';
                document.getElementById('hiddenTotalAmount').value = '0';
                document.getElementById('hiddenRate').value = '0';
            }
        }

        // Function to update currency labels
        function updateCurrencyLabels() {
            console.log('=== updateCurrencyLabels called ===');
            
            const fromSelect = $('#fromCurrencySelect');
            const toSelect = $('#toCurrencySelect');
            
            if (fromSelect.val() && toSelect.val()) {
                const fromData = fromSelect.select2('data')[0];
                const toData = toSelect.select2('data')[0];
                
                const fromCode = fromData.text.split(' - ')[0].trim();
                const toCode = toData.text.split(' - ')[0].trim();
                
                // Store for calculations
                calcFromCurrencyCode = fromCode;
                calcToCurrencyCode = toCode;
                
                // Update labels
                document.getElementById('calcFromAmountLabel').textContent = `مقدار ${fromCode}`;
                document.getElementById('calcToAmountLabel').textContent = `مقدار ${toCode}`;
                
                console.log('Updated labels:', fromCode, toCode);
                
                // Clear calculator inputs when currencies change
                clearCalculatorInputs();
            }
        }

        // Show currency pool information
        function showCurrencyPoolInfo(fromCurrencyId, toCurrencyId) {
            console.log('=== showCurrencyPoolInfo called ===');
            const poolText = document.getElementById('currencyPoolText');
            const poolInfo = document.getElementById('currencyPoolInfo');
            
            if (!poolText || !poolInfo) return;
            
            // Get currency codes using Select2
            const fromSelect = $('#fromCurrencySelect');
            const toSelect = $('#toCurrencySelect');
            
            let fromCode = null, toCode = null;
            
            if (fromSelect.val()) {
                const fromData = fromSelect.select2('data')[0];
                fromCode = fromData.text.split(' - ')[0].trim();
            }
            
            if (toSelect.val()) {
                const toData = toSelect.select2('data')[0];
                toCode = toData.text.split(' - ')[0].trim();
            }
            
            if (fromCode && toCode && currencyPools) {
                let poolTextContent = '';
                
                if (currencyPools[fromCode] !== undefined) {
                    poolTextContent += `${fromCode}: ${formatCurrency(currencyPools[fromCode], fromCode)} `;
                }
                
                if (currencyPools[toCode] !== undefined) {
                    poolTextContent += `${toCode}: ${formatCurrency(currencyPools[toCode], toCode)}`;
                }
                
                if (poolTextContent) {
                    poolText.textContent = poolTextContent;
                    poolInfo.style.display = 'block';
                } else {
                    poolInfo.style.display = 'none';
                }
            } else {
                poolInfo.style.display = 'none';
            }
        }

        // Function to update button states based on currency selection
        function updateButtonStates() {
            let fromCurrency, toCurrency;
            
            // Try Select2 first, then fallback to regular select
            if (typeof $.fn.select2 !== 'undefined' && $('#fromCurrencySelect').hasClass('select2-hidden-accessible')) {
                fromCurrency = $('#fromCurrencySelect').val();
                toCurrency = $('#toCurrencySelect').val();
            } else {
                fromCurrency = document.getElementById('fromCurrencySelect').value;
                toCurrency = document.getElementById('toCurrencySelect').value;
            }
            
            const hasValidCurrencies = fromCurrency && toCurrency && fromCurrency !== toCurrency;
            
            console.log('updateButtonStates - fromCurrency:', fromCurrency, 'toCurrency:', toCurrency, 'hasValidCurrencies:', hasValidCurrencies);
            
            // Enable/disable buttons based on currency selection
            const loadSuggestedBtn = document.getElementById('loadSuggestedRateBtn');
            
            if (loadSuggestedBtn) {
                loadSuggestedBtn.disabled = !hasValidCurrencies;
            }
        }

        // Use Select2 events since Select2 replaces the original elements
        $('#fromCurrencySelect').on('select2:select', function (e) {
            console.log('From currency changed via Select2');
            var fromCurrency = $('#fromCurrencySelect').val();
            var toCurrency = $('#toCurrencySelect').val();
            console.log('From currency:', fromCurrency, 'To currency:', toCurrency);
            updateButtonStates(); // Update button states
            
            if (fromCurrency && toCurrency && fromCurrency !== toCurrency) {
                console.log('Loading exchange rate...');
                showCurrencyPoolInfo(fromCurrency, toCurrency);
                updateCurrencyLabels();
            } else {
                console.log('Hiding rate display - invalid currencies');
                document.getElementById('calculationResult').style.display = 'none';
                document.getElementById('currencyPoolInfo').style.display = 'none';
            }
        });
        
        $('#toCurrencySelect').on('select2:select', function (e) {
            console.log('To currency changed via Select2');
            var fromCurrency = $('#fromCurrencySelect').val();
            var toCurrency = $('#toCurrencySelect').val();
            console.log('From currency:', fromCurrency, 'To currency:', toCurrency);
            updateButtonStates(); // Update button states
            
            if (fromCurrency && toCurrency && fromCurrency !== toCurrency) {
                console.log('Loading exchange rate...');
                showCurrencyPoolInfo(fromCurrency, toCurrency);
                updateCurrencyLabels();
            } else {
                console.log('Hiding rate display - invalid currencies');
                document.getElementById('calculationResult').style.display = 'none';
                document.getElementById('currencyPoolInfo').style.display = 'none';
            }
        });
        
        // Add event listeners with null checks
        const amountInput = document.getElementById('amountInput');
        if (amountInput) {
            amountInput.addEventListener('input', updateCalculation);
        }

        const rateInput = document.getElementById('rateInput');
        if (rateInput) {
            rateInput.addEventListener('input', function() {
                var rateValue = parseFloat(this.value);
                if (!isNaN(rateValue) && rateValue > 0) {
                    // Get from currency code to determine rounding precision using Select2
                    const fromSelect = $('#fromCurrencySelect');
                    let fromCode = null;
                    if (fromSelect.val()) {
                        const fromData = fromSelect.select2('data')[0];
                        fromCode = fromData.text.split(' - ')[0].trim();
                    }
                    const roundingFactor = (fromCode && fromCode.toUpperCase() === 'IRR') ? 10000000 : 100;
                    var roundedRate = Math.round(rateValue * roundingFactor) / roundingFactor;
                    if (roundedRate !== rateValue) { this.value = roundedRate; }
                }
                updateCalculation();
            });
        }

        // Add event listener for load suggested rate button  
        const loadSuggestedRateBtn = document.getElementById('loadSuggestedRateBtn');
        if (loadSuggestedRateBtn) {
            loadSuggestedRateBtn.addEventListener('click', function() {
                var fromCurrency = $('#fromCurrencySelect').val();
                var toCurrency = $('#toCurrencySelect').val();
                console.log('Load suggested rate clicked - From:', fromCurrency, 'To:', toCurrency);
                if (fromCurrency && toCurrency && fromCurrency !== toCurrency) {
                    // Note: Exchange rate loading functionality has been removed
                    console.log('Exchange rate loading is no longer available');
                } else {
                    alert('لطفاً ابتدا ارز مبدأ و مقصد را انتخاب کنید.');
                }
            });
        }

        // Add calculator input event listeners
        const calcFromAmountInput = document.getElementById('calcFromAmountInput');
        if (calcFromAmountInput) {
            calcFromAmountInput.addEventListener('input', calculateFromAmountChange);
        }

        const calcToAmountInput = document.getElementById('calcToAmountInput');
        if (calcToAmountInput) {
            calcToAmountInput.addEventListener('input', calculateToAmountChange);
        }

        const calcRateInput = document.getElementById('calcRateInput');
        if (calcRateInput) {
            calcRateInput.addEventListener('input', calculateRateChange);
        }

        // Add form submission validation
        document.querySelector('form').addEventListener('submit', function (e) {
            var fromCurrency = $('#fromCurrencySelect').val();
            var toCurrency = $('#toCurrencySelect').val();
            var amount = document.getElementById('amountInput').value;

            if (!fromCurrency || !toCurrency) {
                e.preventDefault();
                alert('لطفاً ارز مبدأ و مقصد را انتخاب کنید.');
                return false;
            }

            if (fromCurrency === toCurrency) {
                e.preventDefault();
                alert('ارز مبدأ و مقصد نمی‌توانند یکسان باشند.');
                return false;
            }

            if (!amount || parseFloat(amount) <= 0) {
                e.preventDefault();
                alert('لطفاً مقدار معامله را وارد کنید.');
                return false;
            }

            console.log('Form submission - Amount:', amount, 'Rate:', document.getElementById('hiddenRate').value);
        });

        // Initialize currency labels on page load
        $(document).ready(function() {
            console.log('Document ready - initializing Edit page');
            updateButtonStates();
            
            // Initialize currency labels if currencies are already selected
            setTimeout(function() {
                updateCurrencyLabels();
                const fromCurrency = $('#fromCurrencySelect').val();
                const toCurrency = $('#toCurrencySelect').val();
                if (fromCurrency && toCurrency) {
                    showCurrencyPoolInfo(fromCurrency, toCurrency);
                }
            }, 500);
        });

        // Helper function to format numbers by removing trailing zeros
        function formatNumber(num, fromCurrencyCode = null) {
            return formatCurrency(num, fromCurrencyCode);
        }
    </script>
}
