@{
    ViewData["Title"] = "گزارشات مشتریان";
}

<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex align-items-center justify-content-between">
                <h2><i class="fas fa-users text-primary me-2"></i>گزارشات مشتریان</h2>
                <a href="@Url.Action("Index", "Reports")" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-right me-1"></i>بازگشت
                </a>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm border-3">
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-2">
                            <label class="form-label">از تاریخ</label>
                            <div class="input-group">
                                <input type="date" class="form-control" id="fromDate">
                                <button type="button" class="btn btn-outline-secondary" onclick="clearDate('fromDate')" title="پاک کردن">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">تا تاریخ</label>
                            <div class="input-group">
                                <input type="date" class="form-control" id="toDate">
                                <button type="button" class="btn btn-outline-secondary" onclick="clearDate('toDate')" title="پاک کردن">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">مشتری <span class="text-danger">*</span></label>
                            <select class="form-select" id="customerFilter">
                                <option value="">انتخاب مشتری</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">ارز</label>
                            <select class="form-select" id="currencyFilter">
                                <option value="">همه ارزها</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">&nbsp;</label>
                            <button class="btn btn-primary w-100" onclick="loadData()">
                                <i class="fas fa-search me-1"></i>جستجو
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Content -->
    <div class="row">
        <div class="col-12">

            <!-- Financial Timeline Content -->
            <!-- New Simplified Timeline Table -->
                    <div class="card shadow-sm border-3">
                        <div class="card-header bg-gradient-primary text-white">
                            <div class="d-flex justify-content-between align-items-center">
                                <h5 class="mb-0">
                                    <i class="fas fa-history me-2"></i>
                                    تاریخچه مالی مشتری
                                </h5>
                                <div class="d-flex gap-2">
                                    <button class="btn btn-light btn-sm" onclick="exportTimelineData()">
                                        <i class="fas fa-file-excel me-1"></i>صادرات Excel
                                    </button>
                                    <button class="btn btn-outline-light btn-sm" onclick="printTimeline()">
                                        <i class="fas fa-print me-1"></i>چاپ
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="card-body p-0">
                            <!-- Customer Info Header -->
                            <div id="customerInfoHeader" class="bg-light p-3 border-bottom" style="display: none;">
                                <div class="row">
                                    <div class="col-md-6">
                                        <h6 class="mb-1">اطلاعات مشتری</h6>
                                        <p class="mb-0" id="customerInfoText">-</p>
                                    </div>
                                    <div class="col-md-6 text-center">
                                        <h6 class="mb-1">بازه زمانی گزارش</h6>
                                        <p class="mb-0" id="reportPeriodText">-</p>
                                    </div>
                                </div>
                            </div>

                            <!-- Balance Summary -->
                            <div id="balanceSummarySection" class="p-3 border-bottom bg-light" style="display: none;">
                                <h6 class="mb-3 text-center">
                                    <i class="fas fa-wallet text-primary me-2"></i>
                                    موجودی‌های فعلی
                                </h6>
                                <div id="balanceSummaryContent" class="row">
                                    <!-- Balance cards will be inserted here -->
                                </div>
                            </div>

                            <!-- New Simplified Timeline Table -->
                            <div class="table-responsive">
                                <table class="table table-hover mb-0" id="timelineTable">
                                    <thead class="table-dark sticky-top">
                                        <tr class="text-center">
                                            <th width="15%">تاریخ</th>
                                            <th width="20%">نوع</th>
                                            <th width="15%">ارز</th>
                                            <th width="20%">مقدار</th>
                                            <th width="20%">موجودی</th>
                                        </tr>
                                    </thead>
                                    <tbody id="timelineTableBody">
                                        <tr>
                                            <td colspan="5" class="text-center py-5 text-muted">
                                                <i class="fas fa-user-plus fa-2x mb-2"></i>
                                                <br>لطفا برای دریافت تاریخچه مالی یک مشتری را انتخاب کنید
                                            </td>
                                        </tr>
                                b    </tbody>
                                </table>
                            </div>

                            <!-- Timeline Pagination -->
                            <div class="p-3 border-top bg-light">
                                <nav id="timelinePagination" class="d-flex justify-content-center">
                                    <!-- Pagination will be inserted here -->
                                </nav>
                            </div>
                        </div>
                    </div>
                </div>
        </div>
    </div>
</div>

<script>
let currentPage = { timeline: 1 };
let pageSize = 10;
let currentTimeline = null;

document.addEventListener('DOMContentLoaded', function() {
    // Load currencies for filter
    loadCurrencies();
    
    // Load customers for filter
    loadCustomers();
    
    // Initialize empty tables
    showEmptyState();
    
    // Customer filter change event
    document.getElementById('customerFilter').addEventListener('change', function() {
        loadDataForActiveTab();
    });
    
    // Date filter change event
    document.getElementById('fromDate').addEventListener('change', function() {
        loadDataForActiveTab();
    });
    document.getElementById('toDate').addEventListener('change', function() {
        loadDataForActiveTab();
    });
    
    // Currency filter change event
    document.getElementById('currencyFilter').addEventListener('change', function() {
        loadDataForActiveTab();
    });
});


function loadCurrencies() {
    console.log('Loading currencies...');
    fetch('@Url.Action("GetCurrencies", "Api")')
        .then(response => {
            console.log('Currency response status:', response.status);
            return response.json();
        })
        .then(currencies => {
            console.log('Currency data received:', currencies);
            const select = document.getElementById('currencyFilter');
            select.innerHTML = '<option value="">همه ارزها</option>';
            
            if (Array.isArray(currencies)) {
                console.log('Number of currencies:', currencies.length);
                currencies.forEach(currency => {
                    select.innerHTML += `<option value="${currency.code}">${currency.name} (${currency.code})</option>`;
                });
            } else {
                console.log('Invalid currency data structure');
            }
        })
        .catch(error => {
            console.error('Error loading currencies:', error);
            const select = document.getElementById('currencyFilter');
            select.innerHTML = '<option value="">خطا در بارگذاری ارزها</option>';
        });
}

function loadCustomers() {
    console.log('Loading customers...');
    fetch('@Url.Action("GetCustomersData", "Reports")')
        .then(response => {
            console.log('Customer response status:', response.status);
            return response.json();
        })
        .then(data => {
            console.log('Customer data received:', data);
            const select = document.getElementById('customerFilter');
            select.innerHTML = '<option value="">انتخاب مشتری</option>';
            
            // The API returns customers directly in the data.customers array
            if (data.customers && Array.isArray(data.customers)) {
                console.log('Number of customers:', data.customers.length);
                data.customers.forEach(customer => {
                    select.innerHTML += `<option value="${customer.id}">${customer.fullName}</option>`;
                });
            } else {
                console.log('No customers found or invalid data structure');
            }
        })
        .catch(error => {
            console.error('Error loading customers:', error);
            const select = document.getElementById('customerFilter');
            select.innerHTML = '<option value="">خطا در بارگذاری مشتریان</option>';
        });
}

function loadData() {
    loadDataForActiveTab();
}

function loadDataForActiveTab() {
    loadCustomerTimeline();
}

function showEmptyState() {
    // Show empty state for timeline
    document.getElementById('timelineTableBody').innerHTML = 
        '<tr><td colspan="5" class="text-center py-5 text-muted"><i class="fas fa-user-plus fa-2x mb-2"></i><br>لطفا برای دریافت تاریخچه مالی یک مشتری را انتخاب کنید</td></tr>';
}

function clearDate(inputId) {
    document.getElementById(inputId).value = '';
    loadDataForActiveTab();
}

function updatePagination(containerId, totalPages, currentPageNum, loadFunction) {
    const container = document.getElementById(containerId);
    if (totalPages <= 1) {
        container.innerHTML = '';
        return;
    }
    
    let pagination = '<ul class="pagination justify-content-center">';
    
    // Previous button
    if (currentPageNum > 1) {
        pagination += `<li class="page-item"><a class="page-link" href="#" onclick="${loadFunction.name}(${currentPageNum - 1}); return false;">قبلی</a></li>`;
    }
    
    // Page numbers
    for (let i = Math.max(1, currentPageNum - 2); i <= Math.min(totalPages, currentPageNum + 2); i++) {
        const active = i === currentPageNum ? 'active' : '';
        pagination += `<li class="page-item ${active}"><a class="page-link" href="#" onclick="${loadFunction.name}(${i}); return false;">${i}</a></li>`;
    }
    
    // Next button
    if (currentPageNum < totalPages) {
        pagination += `<li class="page-item"><a class="page-link" href="#" onclick="${loadFunction.name}(${currentPageNum + 1}); return false;">بعدی</a></li>`;
    }
    
    pagination += '</ul>';
    container.innerHTML = pagination;
}

function exportData() {
    exportTimelineData();
}

function formatCurrency(amount, currencyCode) {
    if (currencyCode === 'IRR') {
        return new Intl.NumberFormat('fa-IR').format(amount) + ' تومان';
    }
    return new Intl.NumberFormat('en-US', {
        minimumFractionDigits: 2,
        maximumFractionDigits: 8
    }).format(amount) + ' ' + currencyCode;
}

function formatDate(dateString) {
    if (!dateString) return '-';
    const date = new Date(dateString);
    return date.toLocaleDateString('en-GB'); // Georgian format: DD/MM/YYYY
}

// ========== FINANCIAL TIMELINE FUNCTIONS (BANK STYLE) ==========

function loadCustomerTimeline() {
    const customerId = document.getElementById('customerFilter').value;
    if (!customerId) {
        showTimelineEmptyState();
        hideTimelineSections();
        return;
    }

    const fromDate = document.getElementById('fromDate').value || null;
    const toDate = document.getElementById('toDate').value || null;
    const currencyCode = document.getElementById('currencyFilter').value || null;
    
    // Show loading state
    showTimelineLoading();
    showTimelineSections();
    
    $.get('@Url.Action("GetCustomerTimeline", "CustomerFinancialHistory")', {
        customerId: customerId,
        fromDate: fromDate,
        toDate: toDate,
        currencyCode: currencyCode
    })
    .done(function(response) {
        if (response.success) {
            currentTimeline = response.data;
            renderBankStyleTimeline(response.data);
            updateCustomerInfo(response.data);
        } else {
            showTimelineError('خطا در بارگذاری تاریخچه: ' + response.message);
        }
    })
    .fail(function() {
        showTimelineError('خطا در ارتباط با سرور');
    });
}

function renderBankStyleTimeline(timeline) {
    const tbody = document.getElementById('timelineTableBody');
    
    if (!timeline.transactions || timeline.transactions.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="5" class="text-center py-5 text-muted">
                    <i class="fas fa-info-circle fa-2x mb-2"></i>
                    <br>تراکنشی در بازه زمانی انتخاب شده یافت نشد
                </td>
            </tr>
        `;
        return;
    }
    
    let timelineHtml = '';
    
    // Group transactions by currency for bank-style presentation
    const currencyGroups = {};
    timeline.transactions.forEach(transaction => {
        if (!currencyGroups[transaction.currencyCode]) {
            currencyGroups[transaction.currencyCode] = [];
        }
        currencyGroups[transaction.currencyCode].push(transaction);
    });

    // Render each currency group
    Object.entries(currencyGroups).forEach(([currency, transactions]) => {
        // Currency header row
        timelineHtml += `
            <tr class="table-info">
                <td colspan="5" class="fw-bold text-center">
                    <i class="fas fa-coins me-2"></i>
                    تراکنش‌های ${currency}
                    <small class="ms-2">(${transactions.length} تراکنش)</small>
                </td>
            </tr>
        `;

        // Add initial balance row
        const initialBalance = timeline.initialBalances[currency] || 0;
        timelineHtml += `
            <tr class="table-light">
                <td class="text-center">  </td>
                <td class="text-center"><span class="badge bg-secondary">موجودی اولیه</span></td>
                <td class="text-center">${currency}</td>
                <td class="text-center ltr-direction">-</td>
                <td class="text-center ltr-direction fw-bold">${formatCurrency(initialBalance, currency)}</td>
            </tr>
        `;

        // Add transaction rows
        transactions.forEach(transaction => {
            // Transaction types: OrderSell=1, OrderBuy=2, DocumentCredit=3, DocumentDebit=4
            const isOrderTransaction = transaction.type === 1 || transaction.type === 2; // OrderSell or OrderBuy
            const isManualTransaction = !transaction.referenceId; // Manual transactions have no referenceId
            
            let typeText, transactionId, clickHandler, cursorStyle;
            
            if (isManualTransaction) {
                // Manual transaction - no click handler
                typeText = 'تعدیل دستی';
                transactionId = '';
                clickHandler = '';
                cursorStyle = 'cursor: default;';
            } else {
                // Order or Document transaction - clickable
                typeText = isOrderTransaction ? 'معامله' : 'سند';
                transactionId = transaction.referenceId;
                clickHandler = isOrderTransaction ? 
                    `onclick="goToOrderDetail(${transactionId})"` : 
                    `onclick="goToDocumentDetail(${transactionId})"`;
                cursorStyle = 'cursor: pointer;';
            }
            
            timelineHtml += `
                <tr class="transaction-row" style="${cursorStyle}" ${clickHandler}>
                    <td class="text-center">${formatDate(transaction.transactionDate)}</td>
                    <td class="text-center">
                        ${isManualTransaction ? 
                            `<span class="badge bg-info">${typeText}</span>` :
                            `<a href="#" class="text-decoration-none">${typeText} #${transactionId}</a>`
                        }
                    </td>
                    <td class="text-center">${currency}</td>
                    <td class="text-center ltr-direction ${transaction.amount >= 0 ? 'text-success' : 'text-danger'}">${formatCurrency(transaction.amount, currency)}</td>
                    <td class="text-center ltr-direction fw-bold">${formatCurrency(transaction.runningBalance, currency)}</td>
                </tr>
            `;
        });

        // Add spacing row
        timelineHtml += `<tr><td colspan="5" style="height: 15px; border: none;"></td></tr>`;
    });
    
    tbody.innerHTML = timelineHtml;
    renderBalanceSummary(timeline.finalBalances);
}

function updateCustomerInfo(timeline) {
    document.getElementById('customerInfoText').textContent = timeline.customerName;
    const fromDate = timeline.fromDate ? new Date(timeline.fromDate).toLocaleDateString('en-GB') : 'ابتدای زمان';
    const toDate = timeline.toDate ? new Date(timeline.toDate).toLocaleDateString('en-GB') : 'انتهای زمان';
    document.getElementById('reportPeriodText').textContent = `${fromDate} تا ${toDate}`;
}

function renderBalanceSummary(balances) {
    const container = document.getElementById('balanceSummaryContent');
    
    if (!balances || Object.keys(balances).length === 0) {
        container.innerHTML = '<div class="col-12 text-center text-muted">موجودی‌ای یافت نشد</div>';
        return;
    }
    
    let balanceHtml = '';
    Object.entries(balances).forEach(([currency, amount]) => {
        const isPositive = amount >= 0;
        const colorClass = isPositive ? 'success' : 'danger';
        const iconClass = isPositive ? 'fa-arrow-up' : 'fa-arrow-down';
        const sign = isPositive ? '+' : '-';
        
        balanceHtml += `
            <div class="col-md-3 mb-2">
                <div class="d-flex align-items-center p-2 bg-white rounded shadow-sm">
                    <div class="me-2">
                        <i class="fas ${iconClass} text-${colorClass}"></i>
                    </div>
                    <div class="flex-grow-1">
                        <div class="text-center">
                            <span class="badge bg-primary mb-1">${currency}</span>
                        </div>
                        <h6 class="mb-0 text-${colorClass} text-center ltr-direction">
                            ${formatCurrency(amount, currency)}
                        </h6>
                        <small class="text-muted d-block text-center">${isPositive ? 'بستانکار' : 'بدهکار'}</small>
                    </div>
                </div>
            </div>
        `;
    });
    
    container.innerHTML = balanceHtml;
}

function getTransactionTypeIcon(type) {
    const icons = {
        0: 'fas fa-balance-scale',     // InitialBalance
        1: 'fas fa-arrow-down',        // OrderSell
        2: 'fas fa-arrow-up',          // OrderBuy
        3: 'fas fa-plus-circle',       // DocumentCredit
        4: 'fas fa-minus-circle',      // DocumentDebit
        5: 'fas fa-edit'               // ManualAdjustment
    };
    return icons[type] || 'fas fa-exchange-alt';
}

function getTransactionTypeText(type) {
    const texts = {
        0: 'موجودی اولیه',
        1: 'فروش ارز',
        2: 'خرید ارز',
        3: 'واریز',
        4: 'برداشت',
        5: 'تعدیل'
    };
    return texts[type] || 'تراکنش';
}

function getTransactionBadgeClass(type) {
    const classes = {
        0: 'bg-secondary',    // InitialBalance
        1: 'bg-danger',       // OrderSell
        2: 'bg-success',      // OrderBuy
        3: 'bg-success',      // DocumentCredit
        4: 'bg-danger',       // DocumentDebit
        5: 'bg-warning'       // ManualAdjustment
    };
    return classes[type] || 'bg-primary';
}

function showTimelineEmptyState() {
    document.getElementById('timelineTableBody').innerHTML = `
        <tr>
            <td colspan="7" class="text-center py-5 text-muted">
                <i class="fas fa-user-plus fa-2x mb-2"></i>
                <br>لطفا برای دریافت تاریخچه مالی یک مشتری را انتخاب کنید
            </td>
        </tr>
    `;
}

function showTimelineLoading() {
    document.getElementById('timelineTableBody').innerHTML = `
        <tr>
            <td colspan="7" class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">در حال بارگذاری...</span>
                </div>
                <br><br>در حال بارگذاری تاریخچه مالی...
            </td>
        </tr>
    `;
}

function showTimelineError(message) {
    document.getElementById('timelineTableBody').innerHTML = `
        <tr>
            <td colspan="7" class="text-center py-5 text-danger">
                <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
                <br>${message}
            </td>
        </tr>
    `;
}

function showTimelineSections() {
    document.getElementById('customerInfoHeader').style.display = 'block';
    document.getElementById('balanceSummarySection').style.display = 'block';
}

function hideTimelineSections() {
    document.getElementById('customerInfoHeader').style.display = 'none';
    document.getElementById('balanceSummarySection').style.display = 'none';
}

function exportTimelineData() {
    const customerId = document.getElementById('customerFilter').value;
    if (!customerId) {
        alert('لطفاً ابتدا مشتری را انتخاب کنید');
        return;
    }

    const fromDate = document.getElementById('fromDate').value || null;
    const toDate = document.getElementById('toDate').value || null;
    
    const params = new URLSearchParams({
        customerId: customerId,
        fromDate: fromDate,
        toDate: toDate
    });
    
    // For now, show success message - Excel export can be implemented later
    alert('صادرات تاریخچه مالی به فرمت Excel در ادامه پیاده‌سازی خواهد شد');
}

function printTimeline() {
    if (!currentTimeline) {
        alert('ابتدا تاریخچه مالی را بارگذاری کنید');
        return;
    }
    
    // Create print-friendly version
    const printWindow = window.open('', '_blank');
    const customerName = currentTimeline.customerName;
    
    printWindow.document.write(`
        <html>
        <head>
            <title>تاریخچه مالی - ${customerName}</title>
            <style>
                body { font-family: Arial, sans-serif; direction: rtl; }
                table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                th, td { border: 1px solid #ddd; padding: 8px; text-align: right; }
                th { background-color: #f5f5f5; }
                .text-center { text-align: center; }
                .fw-bold { font-weight: bold; }
                @@media print { body { margin: 0; } }
            </style>
        </head>
        <body>
            <h2 class="text-center">تاریخچه مالی مشتری</h2>
            <h3 class="text-center">${customerName}</h3>
            ${document.getElementById('timelineTable').outerHTML}
        </body>
        </html>
    `);
    
    printWindow.document.close();
    printWindow.focus();
    printWindow.print();
    printWindow.close();
}

// Navigation functions for clickable rows
function goToOrderDetail(orderId) {
    window.open(`/Orders/Details/${orderId}`, '_blank');
}

function goToDocumentDetail(documentId) {
    window.open(`/AccountingDocuments/Details/${documentId}`, '_blank');
}
</script>

<style>
.card {
    border-radius: 15px;
    border: 3px solid #e9ecef;
}

.card:hover {
    border-color: #e9ecef;
    transition: border-color 0.3s ease;
}

.nav-tabs .nav-link {
    border-radius: 10px 10px 0 0;
    border: 2px solid transparent;
    margin-right: 2px;
}

.nav-tabs .nav-link.active {
    border-color: #6c757d #6c757d #fff #6c757d;
    font-weight: bold;
}

.table th {
    border-top: none;
    font-weight: 600;
    background-color: #343a40;
    color: white;
}

/* Center align all table content by default */
.table td, .table th {
    text-align: center;
    vertical-align: middle;
}

.badge {
    font-size: 0.75rem;
    padding: 0.375em 0.75em;
}

.page-link {
    border-radius: 8px;
    margin: 0 2px;
    border: 2px solid #dee2e6;
}

.page-item.active .page-link {
    background-color: #6c757d;
    border-color: #6c757d;
}

.btn {
    border-radius: 8px;
    border-width: 2px;
}

.form-control, .form-select {
    border-radius: 8px;
    border: 2px solid #ced4da;
}

.form-control:focus, .form-select:focus {
    border-color: #6c757d;
    box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.25);
}

/* Currency styling consistency */
.text-end {
    text-align: left !important;
}

/* LTR direction for numbers */
.ltr-direction {
    direction: ltr;
}

/* RTL adjustments */
.me-1 { margin-left: 0.25rem !important; margin-right: 0 !important; }
.me-2 { margin-left: 0.5rem !important; margin-right: 0 !important; }

/* Clickable elements */
a:not(.btn):not(.page-link) {
    color: #007bff;
    text-decoration: none;
}

a:not(.btn):not(.page-link):hover {
    color: #0056b3;
    text-decoration: underline;
}

/* Loading states */
.spinner-border {
    width: 1.5rem;
    height: 1.5rem;
}

/* Mobile responsiveness */
@@media (max-width: 768px) {
    .table-responsive {
        font-size: 0.875rem;
    }
    
    .nav-tabs .nav-link {
        font-size: 0.875rem;
        padding: 0.5rem 0.75rem;
    }
}

/* Timeline Bank Style Enhancements */
.transaction-row:hover {
    background-color: #f8f9fa;
    transition: background-color 0.2s ease;
}

.table-info td {
    background-color: #d1ecf1 !important;
    border-color: #b8daff !important;
}

.table-light td {
    background-color: #f8f9fa !important;
}

.table-warning td {
    background-color: #fff3cd !important;
    border-color: #ffeaa7 !important;
    font-weight: 500;
}

.bg-gradient-primary {
    background: linear-gradient(87deg, #5e72e4 0, #825ee4 100%) !important;
}

.bg-gradient-success {
    background: linear-gradient(87deg, #2dce89 0, #2dcecc 100%) !important;
}

.bg-gradient-info {
    background: linear-gradient(87deg, #11cdef 0, #1171ef 100%) !important;
}

.bg-gradient-warning {
    background: linear-gradient(87deg, #fb6340 0, #fbb140 100%) !important;
}

#timelineTable thead th {
    position: sticky;
    top: 0;
    z-index: 10;
    background-color: #343a40 !important;
}

.timeline-summary-card {
    transition: transform 0.2s ease;
}

.timeline-summary-card:hover {
    transform: translateY(-2px);
}

/* Print styles for timeline */
@@media print {
    .timeline-tab .card-header,
    .timeline-tab .btn {
        display: none !important;
    }
    
    .timeline-tab .table {
        font-size: 12px;
    }
    
    .timeline-tab .table th,
    .timeline-tab .table td {
        padding: 4px;
        border: 1px solid #000;
    }
}
</style>
