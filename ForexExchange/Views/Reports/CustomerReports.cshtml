@{
    ViewData["Title"] = "گزارشات مشتریان";
}

@using Microsoft.AspNetCore.Antiforgery
@inject IAntiforgery Antiforgery
@{
    var requestToken = Antiforgery.GetAndStoreTokens(Context).RequestToken;
}

<input type="hidden" name="__RequestVerificationToken" value="@requestToken" />

<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex align-items-center justify-content-between">
                <h2><i class="fas fa-users text-primary me-2"></i>گزارشات مشتریان</h2>
                <a href="@Url.Action("Index", "Reports")" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-right me-1"></i>بازگشت
                </a>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm border-3">
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-2">
                            <label class="form-label">از تاریخ</label>
                            <div class="input-group">
                                <input type="date" class="form-control" id="fromDate">
                                <button type="button" class="btn btn-outline-secondary" onclick="clearDate('fromDate')"
                                    title="پاک کردن">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">تا تاریخ</label>
                            <div class="input-group">
                                <input type="date" class="form-control" id="toDate">
                                <button type="button" class="btn btn-outline-secondary" onclick="clearDate('toDate')"
                                    title="پاک کردن">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">مشتری <span class="text-danger">*</span></label>
                            <select class="form-select" id="customerFilter">
                                <option value="">انتخاب مشتری</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">ارز</label>
                            <select class="form-select" id="currencyFilter">
                                <option value="">همه ارزها</option>
                            </select>
                        </div>
                        <div class="col-md-1">
                            <label class="form-label">&nbsp;</label>
                            <button class="btn btn-primary w-100" onclick="loadData()">
                                <i class="fas fa-search me-1"></i>
                            </button>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>


    <!-- Admin Actions -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm border-3">
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-2">
                            <label class="form-label">&nbsp;</label>
                            <button id="manualBalanceBtn" class="btn btn-success w-100" onclick="openManualBalanceModal()"
                                title="افزودن تعدیل دستی">
                                <i class="fas fa-plus me-1"></i>تعدیل دستی
                            </button>
                        </div>
                      
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Content -->
    <div class="row">
        <div class="col-12">

            <!-- Financial Timeline Content -->
            <!-- New Simplified Timeline Table -->
            <div class="card shadow-sm border-3">
                <div class="card-header bg-gradient-primary text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="fas fa-history me-2"></i>
                            تاریخچه مالی مشتری
                        </h5>
                        <div class="d-flex gap-2">
                            <button class="btn btn-light btn-sm" onclick="copyTimelineToClipboard()">
                                <i class="fas fa-copy me-1"></i>کپی به کلیپ‌بورد
                            </button>
                            @* <button class="btn btn-outline-light btn-sm" onclick="printTimeline()">
                                <i class="fas fa-print me-1"></i>چاپ
                            </button> *@
                            <button class="btn btn-success btn-sm" onclick="openBankReceipt()">
                                <i class="fas fa-receipt me-1"></i> چاپ 
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body p-0">
                    <!-- Customer Info Header -->
                    <div id="customerInfoHeader" class="bg-light p-3 border-bottom" style="display: none;">
                        <div class="row">
                            <div class="col-md-6">
                                <h6 class="mb-1">اطلاعات مشتری</h6>
                                <p class="mb-0" id="customerInfoText">-</p>
                            </div>
                            <div class="col-md-6 text-center">
                                <h6 class="mb-1">بازه زمانی گزارش</h6>
                                <p class="mb-0" id="reportPeriodText">-</p>
                            </div>
                        </div>
                    </div>

                    <!-- Balance Summary -->
                    <div id="balanceSummarySection" class="p-3 border-bottom bg-light" style="display: none;">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h6 class="mb-0">
                                <i class="fas fa-wallet text-primary me-2"></i>
                                موجودی‌های فعلی
                            </h6>
                            <button class="btn btn-outline-primary btn-sm" onclick="shareBalanceSummary()">
                                <i class="fas fa-share-alt me-1"></i>اشتراک‌گذاری
                            </button>
                        </div>
                        <div id="balanceSummaryContent" class="row">
                            <!-- Balance cards will be inserted here -->
                        </div>
                    </div>

                    <!-- New Simplified Timeline Table -->
                    <div class="table-responsive">
                        <table class="table table-hover mb-0" id="timelineTable">
                            <thead class="table-dark sticky-top">
                                <tr class="text-center">
                                    <th width="12%">تاریخ</th>
                                    <th width="15%">نوع</th>
                                    <th width="10%">ارز</th>
                                    <th width="15%">مقدار</th>
                                    <th width="15%">موجودی</th>
                                    <th width="33%">توضیحات</th>
                                </tr>
                            </thead>
                            <tbody id="timelineTableBody">
                                <tr>
                                    <td colspan="6" class="text-center py-5 text-muted">
                                        <i class="fas fa-user-plus fa-2x mb-2"></i>
                                        <br>لطفا برای دریافت تاریخچه مالی یک مشتری را انتخاب کنید
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- Timeline Pagination -->
                    <div class="p-3 border-top bg-light">
                        <nav id="timelinePagination" class="d-flex justify-content-center">
                            <!-- Pagination will be inserted here -->
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</div>

<!-- Manual Balance History Modal -->
<div class="modal fade" id="manualBalanceModal" tabindex="-1" aria-labelledby="manualBalanceModalLabel"
    aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="manualBalanceModalLabel">
                    <i class="fas fa-plus-circle me-2"></i>افزودن تراکنش دستی
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="manualBalanceForm">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        <strong>مشتری انتخاب شده:</strong> <span id="selectedCustomerName">-</span>
                    </div>

                    <!-- Hidden customer ID field -->
                    <input type="hidden" id="modalCustomerId" name="customerId" value="">

                    <div class="row g-3">
                        <div class="col-md-6">
                            <label for="modalCurrencyCode" class="form-label">ارز <span
                                    class="text-danger">*</span></label>
                            <select class="form-select no-select2" id="modalCurrencyCode" name="currencyCode" required>
                                <option value="">انتخاب ارز</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="modalAmount" class="form-label">مبلغ <span class="text-danger">*</span></label>
                            <input type="number" step="0.00000001" class="form-control" id="modalAmount" name="amount"
                                required>
                            <div class="form-text">مبلغ مثبت: افزایش موجودی، مبلغ منفی: کاهش موجودی</div>
                        </div>
                        <div class="col-12">
                            <label for="modalReason" class="form-label">دلیل <span class="text-danger">*</span></label>
                            <textarea class="form-control" id="modalReason" name="reason" rows="3" required
                                placeholder="دلیل این تراکنش دستی را وارد کنید...">تعدیل دستی</textarea>
                        </div>
                        <div class="col-12">
                            <label for="modalTransactionDate" class="form-label">تاریخ و زمان تراکنش <span
                                    class="text-danger">*</span></label>
                            <input type="datetime-local" class="form-control" id="modalTransactionDate"
                                name="transactionDate" required>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-1"></i>انصراف
                    </button>
                    <button type="submit" class="btn btn-success">
                        <i class="fas fa-save me-1"></i>ثبت تراکنش
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Transaction Details Popup -->
<div id="transactionDetailPopup" style="display:none; position:fixed; z-index:1050;"></div>

<script>
    let currentPage = { timeline: 1 };
    let pageSize = 10;
    let currentTimeline = null;

    document.addEventListener('DOMContentLoaded', function () {
        // Load currencies for filter
        loadCurrencies();

        // Load customers for filter
        loadCustomers();

        // Initialize empty tables
        showEmptyState();

        // Customer filter change event (manual button is always enabled now)
        document.getElementById('customerFilter').addEventListener('change', function () {
            loadDataForActiveTab();
        });

        // Date filter change event
        document.getElementById('fromDate').addEventListener('change', function () {
            loadDataForActiveTab();
        });
        document.getElementById('toDate').addEventListener('change', function () {
            loadDataForActiveTab();
        });

        // Currency filter change event
        document.getElementById('currencyFilter').addEventListener('change', function () {
            loadDataForActiveTab();
        });
    });


    function loadCurrencies() {
        fetch('@Url.Action("GetCurrencies", "Api")')
            .then(response => {
                return response.json();
            })
            .then(currencies => {
                const select = document.getElementById('currencyFilter');
                select.innerHTML = '<option value="">همه ارزها</option>';

                if (Array.isArray(currencies)) {
                    currencies.forEach(currency => {
                        select.innerHTML += `<option value="${currency.code}">${currency.name} (${currency.code})</option>`;
                    });
                } else {
                }
            })
            .catch(error => {
                const select = document.getElementById('currencyFilter');
                select.innerHTML = '<option value="">خطا در بارگذاری ارزها</option>';
            });
    }

    function loadCustomers() {
        fetch('@Url.Action("GetCustomersData", "Reports")')
            .then(response => {
                return response.json();
            })
            .then(data => {
                const select = document.getElementById('customerFilter');
                select.innerHTML = '<option value="">انتخاب مشتری</option>';

                // The API returns customers directly in the data.customers array
                if (data.customers && Array.isArray(data.customers)) {
                    data.customers.forEach(customer => {
                        select.innerHTML += `<option value="${customer.id}">${customer.fullName}</option>`;
                    });
                } else {
                }
            })
            .catch(error => {
                const select = document.getElementById('customerFilter');
                select.innerHTML = '<option value="">خطا در بارگذاری مشتریان</option>';
            });
    }

    function loadData() {
        loadDataForActiveTab();
    }

    function loadDataForActiveTab() {
        // Reset pagination to page 1 when filters change
        currentPage.timeline = 1;
        loadCustomerTimeline(1);
    }

    function showEmptyState() {
        // Show empty state for timeline
        document.getElementById('timelineTableBody').innerHTML =
            '<tr><td colspan="6" class="text-center py-5 text-muted"><i class="fas fa-user-plus fa-2x mb-2"></i><br>لطفا برای دریافت تاریخچه مالی یک مشتری را انتخاب کنید</td></tr>';
    }

    function clearDate(inputId) {
        document.getElementById(inputId).value = '';
        // Reset pagination to page 1 when clearing dates
        currentPage.timeline = 1;
        loadDataForActiveTab();
    }

    function updatePagination(containerId, totalPages, currentPageNum, loadFunction) {
        const container = document.getElementById(containerId);
        if (totalPages <= 1) {
            container.innerHTML = '';
            return;
        }

        let pagination = '<ul class="pagination justify-content-center">';

        // Previous button
        if (currentPageNum > 1) {
            pagination += `<li class="page-item"><a class="page-link" href="#" onclick="loadCustomerTimeline(${currentPageNum - 1}); return false;">قبلی</a></li>`;
        }

        // Page numbers
        for (let i = Math.max(1, currentPageNum - 2); i <= Math.min(totalPages, currentPageNum + 2); i++) {
            const active = i === currentPageNum ? 'active' : '';
            pagination += `<li class="page-item ${active}"><a class="page-link" href="#" onclick="loadCustomerTimeline(${i}); return false;">${i}</a></li>`;
        }

        // Next button
        if (currentPageNum < totalPages) {
            pagination += `<li class="page-item"><a class="page-link" href="#" onclick="loadCustomerTimeline(${currentPageNum + 1}); return false;">بعدی</a></li>`;
        }

        pagination += '</ul>';
        container.innerHTML = pagination;
    }

    function exportData() {
        exportTimelineData();
    }


    function formatDate(dateString) {
        if (!dateString) return '-';
        const date = new Date(dateString);
        return date.toLocaleDateString('en-GB'); // Georgian format: DD/MM/YYYY
    }

    // ========== FINANCIAL TIMELINE FUNCTIONS (BANK STYLE) ==========

    function loadCustomerTimeline(page = 1) {
        const customerId = document.getElementById('customerFilter').value;
        if (!customerId) {
            showTimelineEmptyState();
            hideTimelineSections();
            return;
        }

        const fromDate = document.getElementById('fromDate').value || null;
        const toDate = document.getElementById('toDate').value || null;
        const currencyCode = document.getElementById('currencyFilter').value || null;

        // Show loading state
        showTimelineLoading();
        showTimelineSections();

        // Update current page
        currentPage.timeline = page;

        $.get('@Url.Action("GetCustomerTimeline", "CustomerFinancialHistory")', {
            customerId: customerId,
            fromDate: fromDate,
            toDate: toDate,
            currencyCode: currencyCode,
            page: page,
            pageSize: pageSize
        })
            .done(function (response) {
                if (response.success) {
                    currentTimeline = response.data;
                    renderBankStyleTimeline(response.data);
                    updateCustomerInfo(response.data);
                    
                    // Update pagination if pagination info is available
                    if (response.pagination) {
                        updatePagination('timelinePagination', response.pagination.totalPages, response.pagination.currentPage, loadCustomerTimeline);
                    } else {
                        // Clear pagination if no pagination info
                        document.getElementById('timelinePagination').innerHTML = '';
                    }
                } else {
                    showTimelineError('خطا در بارگذاری تاریخچه: ' + response.message);
                }
            })
            .fail(function () {
                showTimelineError('خطا در ارتباط با سرور');
            });
    }

    function renderBankStyleTimeline(timeline) {
        const tbody = document.getElementById('timelineTableBody');

        if (!timeline.transactions || timeline.transactions.length === 0) {
            tbody.innerHTML = `
            <tr>
                <td colspan="6" class="text-center py-5 text-muted">
                    <i class="fas fa-info-circle fa-2x mb-2"></i>
                    <br>تراکنشی در بازه زمانی انتخاب شده یافت نشد
                </td>
            </tr>
        `;
            return;
        }

        let timelineHtml = '';

        // Group transactions by currency for bank-style presentation
        const currencyGroups = {};
        timeline.transactions.forEach(transaction => {
            if (!currencyGroups[transaction.currencyCode]) {
                currencyGroups[transaction.currencyCode] = [];
            }
            currencyGroups[transaction.currencyCode].push(transaction);
        });

        // Render each currency group
        Object.entries(currencyGroups).forEach(([currency, transactions]) => {
            // Currency header row
            timelineHtml += `
            <tr class="table-info">
                <td colspan="6" class="fw-bold text-center">
                    <i class="fas fa-coins me-2"></i>
                    تراکنش‌های ${currency}
                    <small class="ms-2">(${transactions.length} تراکنش)</small>
                </td>
            </tr>
        `;

            // Add transaction rows
            transactions.forEach(transaction => {
                // Transaction types: OrderSell=1, OrderBuy=2, DocumentCredit=3, DocumentDebit=4, ManualAdjustment=5
                const isOrderTransaction = transaction.type === 1 || transaction.type === 2; // OrderSell or OrderBuy
                const isManualTransaction = transaction.type === 5 || !transaction.referenceId; // ManualAdjustment type or no referenceId

                let typeText, transactionId, clickHandler, cursorStyle;

                if (isManualTransaction) {
                    // Manual transaction - no click handler
                    typeText = 'تعدیل دستی';
                    transactionId = '';
                    clickHandler = '';
                    cursorStyle = 'cursor: default;';
                } else {
                    // Order or Document transaction - clickable
                    typeText = isOrderTransaction ? 'معامله' : 'سند';
                    transactionId = transaction.referenceId;
                    clickHandler = isOrderTransaction ?
                        `onclick="goToOrderDetail(${transactionId})"` :
                        `onclick="goToDocumentDetail(${transactionId})"`;
                    cursorStyle = 'cursor: pointer;';
                }

                // DEBUGGING: Log formatted values
                const formattedAmount = formatCurrency(transaction.amount, currency);
                const formattedBalance = formatCurrency(transaction.runningBalance, currency);

                const rowType = isManualTransaction ? 'manual' : (isOrderTransaction ? 'order' : 'document');
                timelineHtml += `
                <tr class="transaction-row" style="${cursorStyle}" data-type="${rowType}" data-ref-id="${transactionId}" ${clickHandler}>
                    <td class="text-center">${formatDate(transaction.transactionDate)}</td>
                    <td class="text-center">
                        ${isManualTransaction ?
                        `<span class="badge bg-info">${typeText}</span>` :
                        `<a href="#" class="text-decoration-none">${typeText} #${transactionId}</a>`
                    }
                    </td>
                    <td class="text-center">${currency}</td>
                    <td class="text-center ltr-direction skip-auto-format ${transaction.amount >= 0 ? 'text-success' : 'text-danger'}" data-debug-amount="${transaction.amount}" data-debug-formatted="${formattedAmount}" data-no-format="true" data-skip-format="true">${formattedAmount}</td>
                    <td class="text-center ltr-direction skip-auto-format fw-bold" data-debug-balance="${transaction.runningBalance}" data-debug-formatted="${formattedBalance}" data-no-format="true" data-skip-format="true">${formattedBalance}</td>
                    <td class="text-start">
                        <div class="d-flex justify-content-between align-items-center">
                            <small class="text-muted">${transaction.description || '-'}</small>
                            ${isManualTransaction ? 
                                `<button type="button" class="btn btn-sm btn-outline-danger" 
                                    onclick="deleteManualTransaction(${transaction.id}, '${currency}', ${transaction.amount})" 
                                    title="حذف تعدیل دستی">
                                    <i class="fas fa-trash fa-xs"></i>
                                </button>` : ''
                            }
                        </div>
                    </td>
                </tr>
            `;
            });

            // Add spacing row
            timelineHtml += `<tr><td colspan="6" style="height: 15px; border: none;"></td></tr>`;
        });

        tbody.innerHTML = timelineHtml;
        
        renderBalanceSummary(timeline.finalBalances);

        // Add hover events to transaction rows
        setTimeout(() => {
            document.querySelectorAll('.transaction-row').forEach(row => {
                row.addEventListener('mouseenter', function(e) {
                    const type = this.getAttribute('data-type');
                    const refId = this.getAttribute('data-ref-id');
                    showTransactionHoverPopup(type, refId, e);
                });
                row.addEventListener('mouseleave', function() {
                    hideTransactionHoverPopup();
                });
            });
        }, 100);
    }

    function updateCustomerInfo(timeline) {
        document.getElementById('customerInfoText').textContent = timeline.customerName;
        const fromDate = timeline.fromDate ? new Date(timeline.fromDate).toLocaleDateString('en-GB') : 'ابتدای زمان';
        const toDate = timeline.toDate ? new Date(timeline.toDate).toLocaleDateString('en-GB') : 'انتهای زمان';
        document.getElementById('reportPeriodText').textContent = `${fromDate} تا ${toDate}`;
    }

    function renderBalanceSummary(balances) {
        const container = document.getElementById('balanceSummaryContent');

        if (!balances || Object.keys(balances).length === 0) {
            container.innerHTML = '<div class="col-12 text-center text-muted">موجودی‌ای یافت نشد</div>';
            return;
        }

        let balanceHtml = '';
        Object.entries(balances).forEach(([currency, amount]) => {
            const isPositive = amount >= 0;
            const colorClass = isPositive ? 'success' : 'danger';
            const iconClass = isPositive ? 'fa-arrow-up' : 'fa-arrow-down';
            const sign = isPositive ? '+' : '-';

            balanceHtml += `
            <div class="col-md-3 mb-2">
                <div class="d-flex align-items-center p-2 bg-white rounded shadow-sm">
                    <div class="me-2">
                        <i class="fas ${iconClass} text-${colorClass}"></i>
                    </div>
                    <div class="flex-grow-1">
                        <div class="text-center">
                            <span class="badge bg-primary mb-1">${currency}</span>
                        </div>
                        <h6 class="mb-0 text-${colorClass} text-center ltr-direction">
                            ${formatCurrency(amount, currency)}
                        </h6>
                        <small class="text-muted d-block text-center">${isPositive ? 'بستانکار' : 'بدهکار'}</small>
                    </div>
                </div>
            </div>
        `;
        });

        container.innerHTML = balanceHtml;
    }

    function getTransactionTypeIcon(type) {
        const icons = {
            0: 'fas fa-balance-scale',     // InitialBalance
            1: 'fas fa-arrow-down',        // OrderSell
            2: 'fas fa-arrow-up',          // OrderBuy
            3: 'fas fa-plus-circle',       // DocumentCredit
            4: 'fas fa-minus-circle',      // DocumentDebit
            5: 'fas fa-edit'               // ManualAdjustment
        };
        return icons[type] || 'fas fa-exchange-alt';
    }

    function getTransactionTypeText(type) {
        const texts = {
            0: 'موجودی اولیه',
            1: 'فروش ارز',
            2: 'خرید ارز',
            3: 'واریز',
            4: 'برداشت',
            5: 'تعدیل'
        };
        return texts[type] || 'تراکنش';
    }

    function getTransactionBadgeClass(type) {
        const classes = {
            0: 'bg-secondary',    // InitialBalance
            1: 'bg-danger',       // OrderSell
            2: 'bg-success',      // OrderBuy
            3: 'bg-success',      // DocumentCredit
            4: 'bg-danger',       // DocumentDebit
            5: 'bg-warning'       // ManualAdjustment
        };
        return classes[type] || 'bg-primary';
    }

    function showTimelineEmptyState() {
        document.getElementById('timelineTableBody').innerHTML = `
        <tr>
            <td colspan="6" class="text-center py-5 text-muted">
                <i class="fas fa-user-plus fa-2x mb-2"></i>
                <br>لطفا برای دریافت تاریخچه مالی یک مشتری را انتخاب کنید
            </td>
        </tr>
    `;
    }

    function showTimelineLoading() {
        document.getElementById('timelineTableBody').innerHTML = `
        <tr>
            <td colspan="6" class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">در حال بارگذاری...</span>
                </div>
                <br><br>در حال بارگذاری تاریخچه مالی...
            </td>
        </tr>
    `;
    }

    function showTimelineError(message) {
        document.getElementById('timelineTableBody').innerHTML = `
        <tr>
            <td colspan="6" class="text-center py-5 text-danger">
                <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
                <br>${message}
            </td>
        </tr>
    `;
    }

    function showTimelineSections() {
        document.getElementById('customerInfoHeader').style.display = 'block';
        document.getElementById('balanceSummarySection').style.display = 'block';
    }

    function hideTimelineSections() {
        document.getElementById('customerInfoHeader').style.display = 'none';
        document.getElementById('balanceSummarySection').style.display = 'none';
    }

    function exportTimelineData() {
        const customerId = document.getElementById('customerFilter').value;
        if (!customerId) {
            alert('لطفاً ابتدا مشتری را انتخاب کنید');
            return;
        }

        const fromDate = document.getElementById('fromDate').value || null;
        const toDate = document.getElementById('toDate').value || null;

        const params = new URLSearchParams({
            customerId: customerId,
            fromDate: fromDate,
            toDate: toDate
        });

        // For now, show success message - اکسل  export can be implemented later
        alert('دریافت تاریخچه مالی به فرمت اکسل  در ادامه پیاده‌سازی خواهد شد');
    }

    function printTimeline() {
        if (!currentTimeline) {
            alert('ابتدا تاریخچه مالی را بارگذاری کنید');
            return;
        }

        // Create print-friendly version
        const printWindow = window.open('', '_blank');
        const customerName = currentTimeline.customerName;

        printWindow.document.write(`
        <html>
        <head>
            <title>تاریخچه مالی - ${customerName}</title>
            <style>
                body { font-family: Arial, sans-serif; direction: rtl; }
                table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                th, td { border: 1px solid #ddd; padding: 8px; text-align: right; }
                th { background-color: #f5f5f5; }
                .text-center { text-align: center; }
                .fw-bold { font-weight: bold; }
                @@media print { body { margin: 0; } }
            </style>
        </head>
        <body>
            <h2 class="text-center">تاریخچه مالی مشتری</h2>
            <h3 class="text-center">${customerName}</h3>
            ${document.getElementById('timelineTable').outerHTML}
        </body>
        </html>
    `);

        printWindow.document.close();
        printWindow.focus();
        printWindow.print();
        printWindow.close();
    }

    function openBankReceipt() {
        const customerId = document.getElementById('customerFilter').value;
        if (!customerId || !currentTimeline) {
            alert('لطفاً ابتدا مشتری را انتخاب کرده و تاریخچه مالی را بارگذاری کنید');
            return;
        }

        const fromDate = document.getElementById('fromDate').value || '';
        const toDate = document.getElementById('toDate').value || '';
        const currencyCode = document.getElementById('currencyFilter').value || '';
        const bankAccountId = document.getElementById('bankAccountFilter').value || '';

        // Build URL with query parameters
        const params = new URLSearchParams({
            customerId: customerId,
            fromDate: fromDate,
            toDate: toDate,
            currencyCode: currencyCode,
            bankAccountId: bankAccountId
        });

        // Open bank receipt page in new window
        const url = '@Url.Action("PrintFinancialReport", "CustomerFinancialHistory")?' + params.toString();
        window.open(url, '_blank', 'width=800,height=600,scrollbars=yes,resizable=yes');
    }

    // Navigation functions for clickable rows
    function goToOrderDetail(orderId) {
        window.open(`/Orders/Details/${orderId}`, '_blank');
    }

    function goToDocumentDetail(documentId) {
        window.open(`/AccountingDocuments/Details/${documentId}`, '_blank');
    }

    // ========== MANUAL BALANCE HISTORY FUNCTIONS ==========

    function openManualBalanceModal() {
        const customerId = document.getElementById('customerFilter').value;
        const customerSelect = document.getElementById('customerFilter');

        if (!customerId) {
            alert('لطفاً ابتدا مشتری را انتخاب کنید');
            return;
        }

        // Set customer info in modal
        document.getElementById('modalCustomerId').value = customerId;
        const selectedCustomerText = customerSelect.options[customerSelect.selectedIndex].text;
        document.getElementById('selectedCustomerName').textContent = selectedCustomerText;

        // Set default transaction date and time to now
        const today = new Date();
        // Format for datetime-local input (YYYY-MM-DDTHH:MM)
        const year = today.getFullYear();
        const month = String(today.getMonth() + 1).padStart(2, '0');
        const day = String(today.getDate()).padStart(2, '0');
        const hours = String(today.getHours()).padStart(2, '0');
        const minutes = String(today.getMinutes()).padStart(2, '0');
        const formattedDateTime = `${year}-${month}-${day}T${hours}:${minutes}`;
        document.getElementById('modalTransactionDate').value = formattedDateTime;

        // Load currencies in modal
        loadCurrenciesForModal();

        // Show modal
        const modal = new bootstrap.Modal(document.getElementById('manualBalanceModal'));
        modal.show();
    }

    function loadCurrenciesForModal() {
        fetch('@Url.Action("GetCurrencies", "Api")')
            .then(response => {
                return response.json();
            })
            .then(currencies => {
                const select = document.getElementById('modalCurrencyCode');
                select.innerHTML = '<option value="">انتخاب ارز</option>';

                if (Array.isArray(currencies)) {
                    currencies.forEach(currency => {
                        select.innerHTML += `<option value="${currency.code}">${currency.name} (${currency.code})</option>`;
                    });
                } else {
                }
            })
            .catch(error => {
                const select = document.getElementById('modalCurrencyCode');
                select.innerHTML = '<option value="">خطا در بارگذاری ارزها</option>';
            });
    }

    // Handle manual balance form submission
    document.addEventListener('DOMContentLoaded', function () {
        document.getElementById('manualBalanceForm').addEventListener('submit', function (e) {
            e.preventDefault();
            submitManualBalance();
        });
    });

    function submitManualBalance() {
        const form = document.getElementById('manualBalanceForm');
        const formData = new FormData(form);

        // Create URL-encoded data for the request
        const data = {
            customerId: formData.get('customerId'),
            currencyCode: formData.get('currencyCode'),
            amount: parseFloat(formData.get('amount')),
            reason: formData.get('reason'),
            transactionDate: formData.get('transactionDate')
        };

        // Validate required fields
        if (!data.customerId || !data.currencyCode || !data.amount || !data.reason || !data.transactionDate) {
            alert('لطفاً همه فیلدهای الزامی را پر کنید');
            return;
        }

        // Show loading state
        const submitBtn = form.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
        submitBtn.disabled = true;

        // Create form data for POST request
        const postData = new URLSearchParams();
        Object.keys(data).forEach(key => {
            postData.append(key, data[key]);
        });
        // Add antiforgery token
        postData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]')?.value || '');

        fetch('@Url.Action("CreateManualCustomerBalanceHistory", "Database")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: postData
        })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    // Success - close modal and refresh data
                    const modal = bootstrap.Modal.getInstance(document.getElementById('manualBalanceModal'));
                    modal.hide();

                    // Reset form
                    form.reset();

                    // Show success message
                    alert('تراکنش دستی با موفقیت ثبت شد');

                    // Refresh customer timeline if it's loaded
                    if (document.getElementById('customerFilter').value) {
                        loadCustomerTimeline(currentPage.timeline);
                    }
                } else {
                    alert('خطا در ثبت تراکنش: ' + (result.error || result.message || 'خطای ناشناخته'));
                }
            })
            .catch(error => {
                alert('خطا در ارسال اطلاعات: ' + error.message);
            })
            .finally(() => {
                // Restore button state
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            });
    }

    // ========== DELETE MANUAL TRANSACTION FUNCTION ==========

    function deleteManualTransaction(transactionId, currencyCode, amount) {
        if (!confirm(`آیا از حذف این تعدیل دستی اطمینان دارید؟\n\nمبلغ: ${amount} ${currencyCode}\n\nاین عملیات غیرقابل بازگشت است و موجودی مشتری بازمحاسبه خواهد شد.`)) {
            return;
        }

        // Show loading state
        const button = event.target.closest('button');
        const originalHtml = button.innerHTML;
        button.innerHTML = '<i class="fas fa-spinner fa-spin fa-xs"></i>';
        button.disabled = true;

        fetch('@Url.Action("DeleteManualCustomerBalanceHistory", "Database")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || '',
                'X-Requested-With': 'XMLHttpRequest',
                'Accept': 'application/json'
            },
            body: 'transactionId=' + encodeURIComponent(transactionId) + 
                  '&__RequestVerificationToken=' + encodeURIComponent(document.querySelector('input[name="__RequestVerificationToken"]')?.value || '')
        })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    // Show success message
                    alert('تعدیل دستی با موفقیت حذف شد و موجودی‌ها بازمحاسبه شدند');

                    // Refresh customer timeline to show updated data
                    if (document.getElementById('customerFilter').value) {
                        loadCustomerTimeline(currentPage.timeline);
                    }
                } else {
                    alert('خطا در حذف تراکنش: ' + (result.error || result.message || 'خطای ناشناخته'));
                    
                    // Restore button state on error
                    button.innerHTML = originalHtml;
                    button.disabled = false;
                }
            })
            .catch(error => {
                alert('خطا در ارسال درخواست: ' + error.message);
                
                // Restore button state on error
                button.innerHTML = originalHtml;
                button.disabled = false;
            });
    }

    // Transaction hover popup logic
    let transactionPopupTimeout;
    let currentTransactionPopup = null;

    function showTransactionHoverPopup(type, refId, event) {
        clearTimeout(transactionPopupTimeout);
        transactionPopupTimeout = setTimeout(() => {
            if (type === 'manual' || !refId) {
                showTransactionPopupHtml(`<div class='popup-header'><h6><i class="fas fa-edit me-2"></i>تراکنش دستی</h6></div>
                <div class="popup-body p-3"><div class="text-center text-muted"><i class="fas fa-info-circle me-2"></i>این تراکنش به صورت دستی ایجاد شده و جزئیات خاصی ندارد</div></div>`, event);
            } else if (type === 'order') {
                fetchOrderDetailPopup(refId, event);
            } else if (type === 'document') {
                fetchDocumentDetailPopup(refId, event);
            }
        }, 250);
    }

    function hideTransactionHoverPopup() {
        clearTimeout(transactionPopupTimeout);
        if (currentTransactionPopup) {
            currentTransactionPopup.style.display = 'none';
            currentTransactionPopup = null;
        }
    }

    function showTransactionPopupHtml(html, event) {
        const popup = document.getElementById('transactionDetailPopup');
        popup.innerHTML = html;
        popup.style.display = 'block';
        // Position popup
        const rect = event.target.closest('tr').getBoundingClientRect();
        popup.style.left = (rect.left + rect.width + 10) + 'px';
        popup.style.top = rect.top + 'px';
        popup.className = 'transaction-hover-popup';
        currentTransactionPopup = popup;
        // Adjust if off screen
        setTimeout(() => {
            const popupRect = popup.getBoundingClientRect();
            if (popupRect.right > window.innerWidth) {
                popup.style.left = (rect.left - popupRect.width - 10) + 'px';
            }
            if (popupRect.bottom > window.innerHeight) {
                popup.style.top = (window.innerHeight - popupRect.height - 10) + 'px';
            }
        }, 0);
    }

    async function fetchOrderDetailPopup(orderId, event) {
        try {
            const response = await fetch(`/Orders/GetOrderDetails/${orderId}`);
            const data = await response.json();
            if (data.error) {
                showTransactionPopupHtml('<div class="popup-body p-3 text-danger">خطا در دریافت اطلاعات معامله</div>', event);
                return;
            }
            // Render order details with proper Persian formatting
            let html = `<div class='popup-header'><h6><i class="fas fa-exchange-alt me-2"></i>جزئیات معامله  #${data.id}</h6></div>
            <div class='popup-body p-3'>
                <div class="row g-2">
                    <div class="col-6"><small class="text-muted">مشتری:</small><div>${data.customerName}</div></div>
                    <div class="col-6"><small class="text-muted">تاریخ ایجاد:</small><div>${new Date(data.createdAt).toLocaleDateString('fa-IR')}</div></div>

                    <div class="col-6"><small class="text-muted"> دریافت می کنیم  :</small><div class="fw-bold text-primary">${data.fromCurrencyName}</div></div>
                    <div class="col-6"><small class="text-muted"> پرداخت می کنیم :</small><div class="fw-bold text-success">${data.toCurrencyName}</div></div>
                    <div class="col-6"><small class="text-muted">مبلغ دربافتی :</small><div>${formatCurrency(data.fromAmount, data.toCurrency)}</div></div>
                    <div class="col-6"><small class="text-muted">مبلغ پردختی :</small><div>${formatCurrency(data.toAmount, data.toCurrency)}</div></div>
                    <div class="col-6"><small class="text-muted">نرخ :</small><div class="ltr-direction">${formatNumber(data.exchangeRate)}</div></div>
                    ${data.updatedAt ? `<div class="col-6"><small class="text-muted">تاریخ بروزرسانی:</small><div>${new Date(data.updatedAt)}</div></div>` : '<div class="col-6"></div>'}
                    ${data.notes ? `<div class="col-12"><small class="text-muted">یادداشت:</small><div class="text-truncate" title="${data.notes}">${data.notes}</div></div>` : ''}
                </div>
            </div>
            <div class="popup-footer"><small class="text-muted">برای مشاهده جزئیات بیشتر کلیک کنید</small></div>`;
            showTransactionPopupHtml(html, event);
        } catch (err) {
            console.error('Error fetching order details:', err);
            showTransactionPopupHtml('<div class="popup-body p-3 text-danger">خطا در دریافت اطلاعات </div>', event);
        }
    }

    async function fetchDocumentDetailPopup(docId, event) {
        try {
            const response = await fetch(`/Reports/GetDocumentDetails/${docId}`);
            const data = await response.json();
            if (data.error) {
                showTransactionPopupHtml('<div class="popup-body p-3 text-danger">خطا در دریافت اطلاعات سند</div>', event);
                return;
            }
            // Render document details with consistent styling
            let html = `<div class='popup-header'><h6><i class="fas fa-file-invoice me-2"></i>جزئیات سند #${data.id}</h6></div>
            <div class='popup-body p-3'>
                <div class="row g-2">
                    <div class="col-6"><small class="text-muted">نوع سند:</small><div>${data.documentType === 'Cash' ? 'نقدی' : 'حواله'}</div></div>
                    <div class="col-6"><small class="text-muted">مبلغ:</small><div class="fw-bold text-success">${formatCurrency(data.amount, data.currencyCode)}</div></div>
                    <div class="col-6"><small class="text-muted">پرداخت کننده:</small><div>${data.payerCustomer ? data.payerCustomer.fullName : 'سیستم'}</div></div>
                    <div class="col-6"><small class="text-muted">دریافت کننده:</small><div>${data.receiverCustomer ? data.receiverCustomer.fullName : 'سیستم'}</div></div>
                    <div class="col-6"><small class="text-muted">تاریخ:</small><div>${new Date(data.documentDate).toLocaleDateString('fa-IR')}</div></div>
                    <div class="col-6"><small class="text-muted">وضعیت:</small><div><span class="badge ${data.isVerified ? 'bg-success' : 'bg-warning'}">${data.isVerified ? 'تایید شده' : 'در انتظار تایید'}</span></div></div>
                    ${data.description ? `<div class="col-12"><small class="text-muted">شرح:</small><div class="text-truncate" title="${data.description}">${data.description}</div></div>` : ''}
                    ${data.notes ? `<div class="col-12"><small class="text-muted">یادداشت:</small><div class="text-truncate" title="${data.notes}">${data.notes}</div></div>` : ''}
                </div>
            </div>
            <div class="popup-footer"><small class="text-muted">برای مشاهده جزئیات بیشتر کلیک کنید</small></div>`;
            showTransactionPopupHtml(html, event);
        } catch (err) {
            console.error('Error fetching document details:', err);
            showTransactionPopupHtml('<div class="popup-body p-3 text-danger">خطا در دریافت اطلاعات سند</div>', event);
        }
    }

    // Utility functions for formatting
    function formatNumber(amount) {
        if (!amount && amount !== 0) return '-';
        return new Intl.NumberFormat('fa-IR').format(amount);
    }

    function formatCurrency(amount, currencyCode = 'IRR') {
        if (!amount && amount !== 0) return '-';
        const formattedAmount = formatNumber(amount);
        return `${formattedAmount} ${currencyCode || ''}`;
    }

    // ========== BALANCE SUMMARY SHARING FUNCTIONS ==========

    async function shareBalanceSummary() {
        const balanceSection = document.getElementById('balanceSummarySection');
        if (!balanceSection || balanceSection.style.display === 'none') {
            alert('ابتدا تاریخچه مالی مشتری را بارگذاری کنید');
            return;
        }

        try {
            // Show loading state
            const shareBtn = event.target.closest('button');
            const originalHtml = shareBtn.innerHTML;
            shareBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>در حال آماده‌سازی...';
            shareBtn.disabled = true;

            // Take screenshot of balance summary section
            const canvas = await html2canvas(balanceSection, {
                backgroundColor: '#ffffff',
                scale: 2,
                useCORS: true,
                allowTaint: true,
                width: balanceSection.offsetWidth,
                height: balanceSection.offsetHeight
            });

            // Convert to blob
            canvas.toBlob(async (blob) => {
                if (!blob) {
                    alert('خطا در ایجاد تصویر');
                    shareBtn.innerHTML = originalHtml;
                    shareBtn.disabled = false;
                    return;
                }

                const file = new File([blob], 'balance-summary.png', { type: 'image/png' });

                // Try Web Share API first
                if (navigator.share && navigator.canShare && navigator.canShare({ files: [file] })) {
                    try {
                        await navigator.share({
                            title: 'خلاصه تراز مشتری',
                            text: 'خلاصه موجودی‌های مشتری به تفکیک ارز',
                            files: [file]
                        });
                        showShareSuccess();
                    } catch (error) {
                        if (error.name !== 'AbortError') {
                            console.warn('Web Share API failed, falling back to clipboard');
                            await copyToClipboard(canvas);
                        }
                    }
                } else {
                    // Fallback to clipboard
                    await copyToClipboard(canvas);
                }

                // Restore button state
                shareBtn.innerHTML = originalHtml;
                shareBtn.disabled = false;
            }, 'image/png');

        } catch (error) {
            console.error('Error sharing balance summary:', error);
            alert('خطا در اشتراک‌گذاری: ' + error.message);
            
            // Restore button state
            const shareBtn = event.target.closest('button');
            shareBtn.innerHTML = '<i class="fas fa-share-alt me-1"></i>اشتراک‌گذاری';
            shareBtn.disabled = false;
        }
    }

    async function copyToClipboard(canvas) {
        try {
            const blob = await new Promise(resolve => canvas.toBlob(resolve, 'image/png'));
            
            if (navigator.clipboard && window.ClipboardItem) {
                const item = new ClipboardItem({ 'image/png': blob });
                await navigator.clipboard.write([item]);
                showShareSuccess('تصویر در کلیپ‌بورد کپی شد');
            } else {
                // Fallback: create download link
                const url = canvas.toDataURL('image/png');
                const link = document.createElement('a');
                link.download = 'balance-summary.png';
                link.href = url;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                showShareSuccess('تصویر دانلود شد');
            }
        } catch (error) {
            console.error('Clipboard copy failed:', error);
            // Final fallback: download
            const url = canvas.toDataURL('image/png');
            const link = document.createElement('a');
            link.download = 'balance-summary.png';
            link.href = url;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            showShareSuccess('تصویر دانلود شد');
        }
    }

    function showShareSuccess(message = 'خلاصه تراز با موفقیت اشتراک‌گذاری شد') {
        // Simple success notification
        const notification = document.createElement('div');
        notification.className = 'alert alert-success alert-dismissible fade show position-fixed';
        notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
        notification.innerHTML = `
            <i class="fas fa-check-circle me-2"></i>${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        document.body.appendChild(notification);
        
        // Auto remove after 3 seconds
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 3000);
    }

    // ========== TIMELINE CLIPBOARD COPY FUNCTION ==========

    async function copyTimelineToClipboard() {
        const customerId = document.getElementById('customerFilter').value;
        if (!customerId || !currentTimeline) {
            alert('ابتدا مشتری را انتخاب کرده و تاریخچه مالی را بارگذاری کنید');
            return;
        }

        try {
            // Show loading state
            const copyBtn = event.target.closest('button');
            const originalHtml = copyBtn.innerHTML;
            copyBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>در حال کپی...';
            copyBtn.disabled = true;

            // Create text representation of timeline data
            let clipboardText = `تاریخچه مالی مشتری\n`;
            clipboardText += `مشتری: ${currentTimeline.customerName}\n`;
            clipboardText += `بازه زمانی: ${currentTimeline.fromDate ? new Date(currentTimeline.fromDate).toLocaleDateString('fa-IR') : 'ابتدای زمان'} تا ${currentTimeline.toDate ? new Date(currentTimeline.toDate).toLocaleDateString('fa-IR') : 'انتهای زمان'}\n\n`;

            // Add balance summary
            if (currentTimeline.finalBalances && Object.keys(currentTimeline.finalBalances).length > 0) {
                clipboardText += `موجودی‌های نهایی:\n`;
                Object.entries(currentTimeline.finalBalances).forEach(([currency, amount]) => {
                    clipboardText += `${currency}: ${formatCurrency(amount, currency)}\n`;
                });
                clipboardText += `\n`;
            }

            // Add transactions grouped by currency
            if (currentTimeline.transactions && currentTimeline.transactions.length > 0) {
                const currencyGroups = {};
                currentTimeline.transactions.forEach(transaction => {
                    if (!currencyGroups[transaction.currencyCode]) {
                        currencyGroups[transaction.currencyCode] = [];
                    }
                    currencyGroups[transaction.currencyCode].push(transaction);
                });

                Object.entries(currencyGroups).forEach(([currency, transactions]) => {
                    clipboardText += `تراکنش‌های ${currency}:\n`;
                    clipboardText += `تاریخ\t\tنوع\t\tمبلغ\t\tمانده\n`;
                    clipboardText += `-`.repeat(60) + `\n`;

                    transactions.forEach(transaction => {
                        const date = formatDate(transaction.transactionDate);
                        const type = transaction.type === 1 ? 'فروش' : 
                                   transaction.type === 2 ? 'خرید' : 
                                   transaction.type === 5 ? 'تعدیل' : 'سند';
                        const amount = formatCurrency(transaction.amount, currency);
                        const balance = formatCurrency(transaction.runningBalance, currency);
                        
                        clipboardText += `${date}\t${type}\t${amount}\t${balance}\n`;
                    });
                    clipboardText += `\n`;
                });
            }

            // Copy to clipboard
            await navigator.clipboard.writeText(clipboardText);
            
            // Show success message
            showShareSuccess('تاریخچه مالی در کلیپ‌بورد کپی شد');

            // Restore button state
            copyBtn.innerHTML = originalHtml;
            copyBtn.disabled = false;

        } catch (error) {
            console.error('Error copying timeline to clipboard:', error);
            alert('خطا در کپی به کلیپ‌بورد: ' + error.message);
            
            // Restore button state
            const copyBtn = event.target.closest('button');
            copyBtn.innerHTML = '<i class="fas fa-copy me-1"></i>کپی به کلیپ‌بورد';
            copyBtn.disabled = false;
        }
    }
</script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>

<script>
    .card {
        border-radius: 15px;
        border: 3px solid #e9ecef;
    }

    .card:hover {
        border-color: #e9ecef;
        transition: border-color 0.3s ease;
    }

    .nav-tabs .nav-link {
        border-radius: 10px 10px 0 0;
        border: 2px solid transparent;
        margin-right: 2px;
    }

    .nav-tabs .nav-link.active {
        border-color: #6c757d #6c757d #fff #6c757d;
        font-weight: bold;
    }

    .table th {
        border-top: none;
        font-weight: 600;
        background-color: #343a40;
        color: white;
    }

    /* Center align all table content by default */
    .table td,
    .table th {
        text-align: center;
        vertical-align: middle;
    }

    .badge {
        font-size: 0.75rem;
        padding: 0.375em 0.75em;
    }

    .page-link {
        border-radius: 8px;
        margin: 0 2px;
        border: 2px solid #dee2e6;
    }

    .page-item.active .page-link {
        background-color: #6c757d;
        border-color: #6c757d;
    }

    .btn {
        border-radius: 8px;
        border-width: 2px;
    }

    .form-control,
    .form-select {
        border-radius: 8px;
        border: 2px solid #ced4da;
    }

    .form-control:focus,
    .form-select:focus {
        border-color: #6c757d;
        box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.25);
    }

    /* Currency styling consistency */
    .text-end {
        text-align: left !important;
    }

    /* LTR direction for numbers */
    .ltr-direction {
        direction: ltr;
    }

    /* RTL adjustments */
    .me-1 {
        margin-left: 0.25rem !important;
        margin-right: 0 !important;
    }

    .me-2 {
        margin-left: 0.5rem !important;
        margin-right: 0 !important;
    }

    /* Clickable elements */
    a:not(.btn):not(.page-link) {
        color: #007bff;
        text-decoration: none;
    }

    a:not(.btn):not(.page-link):hover {
        color: #0056b3;
        text-decoration: underline;
    }

    /* Loading states */
    .spinner-border {
        width: 1.5rem;
        height: 1.5rem;
    }

    /* Mobile responsiveness */
    @@media (max-width: 768px) {
        .table-responsive {
            font-size: 0.875rem;
        }

        .nav-tabs .nav-link {
            font-size: 0.875rem;
            padding: 0.5rem 0.75rem;
        }
    }

    /* Timeline Bank Style Enhancements */
    .transaction-row:hover {
        background-color: #f8f9fa;
        transition: background-color 0.2s ease;
    }

    .table-info td {
        background-color: #d1ecf1 !important;
        border-color: #b8daff !important;
    }

    .table-light td {
        background-color: #f8f9fa !important;
    }

    .table-warning td {
        background-color: #fff3cd !important;
        border-color: #ffeaa7 !important;
        font-weight: 500;
    }

    .bg-gradient-primary {
        background: linear-gradient(87deg, #5e72e4 0, #825ee4 100%) !important;
    }

    .bg-gradient-success {
        background: linear-gradient(87deg, #2dce89 0, #2dcecc 100%) !important;
    }

    .bg-gradient-info {
        background: linear-gradient(87deg, #11cdef 0, #1171ef 100%) !important;
    }

    .bg-gradient-warning {
        background: linear-gradient(87deg, #fb6340 0, #fbb140 100%) !important;
    }

    #timelineTable thead th {
        position: sticky;
        top: 0;
        z-index: 10;
        background-color: #343a40 !important;
    }

    .timeline-summary-card {
        transition: transform 0.2s ease;
    }

    .timeline-summary-card:hover {
        transform: translateY(-2px);
    }

    /* Print styles for timeline */
    @@media print {

        .timeline-tab .card-header,
        .timeline-tab .btn {
            display: none !important;
        }

        .timeline-tab .table {
            font-size: 12px;
        }

        .timeline-tab .table th,
        .timeline-tab .table td {
            padding: 4px;
            border: 1px solid #000;
        }
    }

    .transaction-hover-popup {
        background: white;
        border: 1px solid #ddd;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        max-width: 350px;
        font-size: 0.875rem;
        pointer-events: none;
        animation: fadeIn 0.2s ease-in-out;
    }
    .transaction-hover-popup .popup-header {
        background: #f8f9fa;
        padding: 8px 12px;
        border-bottom: 1px solid #dee2e6;
        border-radius: 7px 7px 0 0;
    }
    .transaction-hover-popup .popup-header h6 {
        margin: 0;
        font-size: 0.875rem;
        color: #495057;
    }
    .transaction-hover-popup .popup-body {
        padding: 12px;
    }
    .transaction-hover-popup .popup-footer {
        padding: 8px 12px;
        background: #f8f9fa;
        border-top: 1px solid #dee2e6;
        border-radius: 0 0 7px 7px;
        text-align: center;
    }
    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(-10px); }
        to { opacity: 1; transform: translateY(0); }
    }
    #timelineTableBody tr:hover {
        background-color: #f8f9fa;
        transition: background-color 0.2s ease;
    }
</style>
