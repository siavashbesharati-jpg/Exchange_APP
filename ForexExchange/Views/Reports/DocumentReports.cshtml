@{
    ViewData["Title"] = "گزارشات اسناد حسابداری";
}

<div class="container-fluid">
    <!-- Header with Back Button -->
    <div class="row mb-4">
        <div class="c        // Load customers dropdown
        loadCustomers();
        
        // Load bank accounts dropdown
        loadBankAccounts();
        
        // Add Enter key event listeners to all filter inputs
        addEnterKeyListeners();
        
        loadDocumentReports();
    });
            <div class="d-flex align-items-center justify-content-between">
                <div>
                    <h2><i class="fas fa-file-invoice text-warning me-2"></i>گزارشات اسناد حسابداری</h2>
                    <p class="text-muted">تحلیل اسناد حسابداری، رسیدها و گزارشات مالی تفصیلی</p>
                </div>
                <a href="@Url.Action("Index", "Reports")" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-right me-1"></i>بازگشت به فهرست گزارشات
                </a>
            </div>
        </div>
    </div>

    <!-- Filter Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h5 class="card-title"><i class="fas fa-filter me-2"></i>فیلترهای جستجو</h5>
                    <div class="row g-3">
                        <div class="col-md-2">
                            <label class="form-label">از تاریخ</label>
                            <div class="input-group">
                                <input type="date" class="form-control" id="fromDate">
                                <button class="btn btn-outline-secondary" type="button" onclick="clearDate('fromDate')" title="پاک کردن تاریخ">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">تا تاریخ</label>
                            <div class="input-group">
                                <input type="date" class="form-control" id="toDate">
                                <button class="btn btn-outline-secondary" type="button" onclick="clearDate('toDate')" title="پاک کردن تاریخ">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">ارز</label>
                            <select class="form-select" id="currency">
                                <option value="">همه</option>
                                <!-- Currency options will be loaded dynamically -->
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">مشتری</label>
                            <select class="form-select" id="customer">
                                <option value="">همه</option>
                                <!-- Customer options will be loaded dynamically -->
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">حساب بانکی</label>
                            <select class="form-select" id="bankAccount">
                                <option value="">همه حساب‌ها</option>
                                <!-- Bank account options will be loaded dynamically -->
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">شناسه مرجع</label>
                            <input type="text" class="form-control" id="referenceId" placeholder="شماره تراکنش یا شناسه">
                        </div>
                    </div>
                    <div class="row g-3 mt-2">
                        <div class="col-md-2">
                            <label class="form-label">از مبلغ</label>
                            <input type="number" class="form-control" id="fromAmount" placeholder="حداقل مبلغ" step="0.01" min="0">
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">تا مبلغ</label>
                            <input type="number" class="form-control" id="toAmount" placeholder="حداکثر مبلغ" step="0.01" min="0">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">جستجو بر اساس فایل</label>
                            <div class="input-group">
                                <input type="file" class="form-control" id="fileSearch" accept="image/*,.pdf,.doc,.docx" title="آپلود فایل برای جستجو اسناد مشابه">
                                <button class="btn btn-outline-secondary" type="button" onclick="clearFileSearch()" title="پاک کردن فایل">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                            <small class="text-muted">فرمت‌های مجاز: تصاویر، PDF، Word</small>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">&nbsp;</label>
                            <button class="btn btn-warning w-100" onclick="loadDocumentReports()">
                                <i class="fas fa-search me-1"></i>جستجو
                            </button>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">&nbsp;</label>
                            <div class="d-flex gap-2">
                                <button class="btn btn-outline-secondary flex-fill" onclick="clearAllFilters()">
                                    <i class="fas fa-eraser me-1"></i>پاک کردن فیلترها
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Anti-forgery token for file upload -->
    @Html.AntiForgeryToken()

    <!-- Documents Table -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0"><i class="fas fa-table me-2"></i>جدول تفصیلی اسناد</h5>
                    <button class="btn btn-success btn-sm" onclick="exportDocumentData()">
                        <i class="fas fa-file-excel me-1"></i> دریافت اکسل 
                    </button>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover" id="documentsTable">
                            <thead class="table-dark">
                                <tr>
                                    <th class="sortable" data-column="id">شناسه <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-column="date">تاریخ <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-column="customerName">مشتری <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-column="referenceNumber">شماره تراکنش <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-column="currency">ارز <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-column="amount">مبلغ <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-column="description">شرح <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-column="status">وضعیت <i class="fas fa-sort"></i></th>
                                    <th>عملیات</th>
                                </tr>
                            </thead>
                            <tbody id="documentsTableBody">
                                <tr>
                                    <td colspan="9" class="text-center py-5">
                                        <div class="spinner-border text-warning" role="status">
                                            <span class="visually-hidden">در حال بارگذاری...</span>
                                        </div>
                                        <p class="mt-2 text-muted">در حال بارگذاری اطلاعات...</p>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <!-- Pagination -->
                    <div class="row mt-3">
                        <div class="col-12">
                            <nav id="documentsPagination" class="d-flex justify-content-center">
                                <!-- Pagination will be inserted here -->
                            </nav>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    let documentsData = []; // Store documents data for sorting
    let currentSort = { column: null, direction: 'asc' };
    let currentPage = 1;
    let pageSize = 10;

    document.addEventListener('DOMContentLoaded', function () {
        // Don't set default dates - let users choose to filter by date or not
        // document.getElementById('fromDate').value = '';
        // document.getElementById('toDate').value = '';

        // Add click event listeners to sortable headers
        document.querySelectorAll('.sortable').forEach(header => {
            header.addEventListener('click', function () {
                const column = this.getAttribute('data-column');
                sortTable(column);
            });
            header.style.cursor = 'pointer';
        });

        // Load customers dropdown
        loadCustomers();
        
        // Load bank accounts dropdown
        loadBankAccounts();
        
        // Load currencies dropdown
        loadCurrencies();
        
        // Add Enter key event listener to all filter inputs
        addEnterKeyListeners();
        
        loadDocumentReports();
    });

    function loadCustomers() {
        fetch('@Url.Action("GetCustomers", "Reports")')
            .then(response => response.json())
            .then(data => {
                const customerSelect = document.getElementById('customer');
                customerSelect.innerHTML = '<option value="">همه</option>';
                
                if (data && data.length > 0) {
                    data.forEach(customer => {
                        const option = document.createElement('option');
                        option.value = customer.id;
                        option.textContent = customer.fullName;
                        customerSelect.appendChild(option);
                    });
                }
            })
            .catch(error => {
            });
    }

    function loadBankAccounts() {
        console.log('Loading bank accounts...');
        fetch('/api/bankaccounts')
            .then(response => {
                console.log('Bank accounts response status:', response.status);
                return response.json();
            })
            .then(data => {
                console.log('Bank accounts data received:', data);
                const bankAccountSelect = document.getElementById('bankAccount');
                bankAccountSelect.innerHTML = '<option value="">همه حساب‌ها</option>';
                
                if (data && data.length > 0) {
                    data.forEach(account => {
                        const option = document.createElement('option');
                        option.value = account.id;
                        option.textContent = `${account.bankName} - ${account.accountNumber}`;
                        bankAccountSelect.appendChild(option);
                    });
                } else {
                    console.warn('No bank accounts data received or empty array');
                }
            })
            .catch(error => {
                console.error('خطا در بارگذاری حساب‌های بانکی:', error);
                const bankAccountSelect = document.getElementById('bankAccount');
                bankAccountSelect.innerHTML = '<option value="">خطا در بارگذاری حساب‌ها</option>';
            });
    }

    function loadCurrencies() {
        console.log('Loading currencies...');
        fetch('/api/currencies')
            .then(response => {
                console.log('Currencies response status:', response.status);
                return response.json();
            })
            .then(data => {
                console.log('Currencies data received:', data);
                const currencySelect = document.getElementById('currency');
                currencySelect.innerHTML = '<option value="">همه</option>';
                
                if (data && data.length > 0) {
                    data.forEach(currency => {
                        const option = document.createElement('option');
                        option.value = currency.code;
                        option.textContent = `${currency.name} (${currency.code})`;
                        currencySelect.appendChild(option);
                    });
                } else {
                    console.warn('No currencies data received or empty array');
                }
            })
            .catch(error => {
                console.error('خطا در بارگذاری ارزها:', error);
                const currencySelect = document.getElementById('currency');
                currencySelect.innerHTML = '<option value="">خطا در بارگذاری ارزها</option>';
            });
    }

    function addEnterKeyListeners() {
        // Add Enter key event listener to all filter inputs and selects
        const filterElements = [
            'fromDate',
            'toDate', 
            'currency',
            'customer',
            'bankAccount',
            'referenceId',
            'fromAmount',
            'toAmount'
        ];

        filterElements.forEach(elementId => {
            const element = document.getElementById(elementId);
            if (element) {
                element.addEventListener('keypress', function(event) {
                    if (event.key === 'Enter') {
                        event.preventDefault();
                        loadDocumentReports();
                    }
                });
            }
        });
    }

    function clearDate(inputId) {
        document.getElementById(inputId).value = '';
        currentPage = 1; // Reset pagination
        // Automatically trigger search after clearing date
        loadDocumentReports();
    }

    function clearFileSearch() {
        document.getElementById('fileSearch').value = '';
        currentPage = 1; // Reset pagination
        loadDocumentReports();
    }

    function clearAllFilters() {
        document.getElementById('fromDate').value = '';
        document.getElementById('toDate').value = '';
        document.getElementById('currency').value = '';
        document.getElementById('customer').value = '';
        document.getElementById('bankAccount').value = '';
        document.getElementById('referenceId').value = '';
        document.getElementById('fromAmount').value = '';
        document.getElementById('toAmount').value = '';
        document.getElementById('fileSearch').value = '';
        currentPage = 1; // Reset pagination
        loadDocumentReports();
    }

    function updatePagination(totalPages, currentPageNum) {
        const container = document.getElementById('documentsPagination');
        if (totalPages <= 1) {
            container.innerHTML = '';
            return;
        }

        let pagination = '<ul class="pagination justify-content-center">';

        // Previous button
        if (currentPageNum > 1) {
            pagination += `<li class="page-item"><a class="page-link" href="#" onclick="loadDocumentReportsPage(${currentPageNum - 1}); return false;">قبلی</a></li>`;
        }

        // Page numbers
        for (let i = Math.max(1, currentPageNum - 2); i <= Math.min(totalPages, currentPageNum + 2); i++) {
            const active = i === currentPageNum ? 'active' : '';
            pagination += `<li class="page-item ${active}"><a class="page-link" href="#" onclick="loadDocumentReportsPage(${i}); return false;">${i}</a></li>`;
        }

        // Next button
        if (currentPageNum < totalPages) {
            pagination += `<li class="page-item"><a class="page-link" href="#" onclick="loadDocumentReportsPage(${currentPageNum + 1}); return false;">بعدی</a></li>`;
        }

        pagination += '</ul>';
        container.innerHTML = pagination;
    }

    function loadDocumentReportsPage(page) {
        currentPage = page;
        loadDocumentsTable();
    }

    function loadDocumentReports() {
        currentPage = 1; // Reset to first page when filters change
        loadDocumentsTable();
    }

    function loadDocumentsTable() {
        const tbody = document.getElementById('documentsTableBody');
        tbody.innerHTML = `
        <tr>
            <td colspan="9" class="text-center py-5">
                <div class="spinner-border text-warning" role="status">
                    <span class="visually-hidden">در حال بارگذاری...</span>
                </div>
                <p class="mt-2 text-muted">در حال بارگذاری اطلاعات اسناد...</p>
            </td>
        </tr>
    `;

        const fromDate = document.getElementById('fromDate').value;
        const toDate = document.getElementById('toDate').value;
        const currency = document.getElementById('currency').value;
        const customer = document.getElementById('customer').value;
        const referenceId = document.getElementById('referenceId').value;
        const fromAmount = document.getElementById('fromAmount').value;
        const toAmount = document.getElementById('toAmount').value;
        const fileSearchInput = document.getElementById('fileSearch');

        const bankAccount = document.getElementById('bankAccount').value;

        // Check if file search is being used
        if (fileSearchInput.files && fileSearchInput.files.length > 0) {
            // Use FormData for file upload
            const formData = new FormData();
            formData.append('fromDate', fromDate);
            formData.append('toDate', toDate);
            if (currency) formData.append('currency', currency);
            if (customer) formData.append('customer', customer);
            if (bankAccount) formData.append('bankAccount', bankAccount);
            if (referenceId) formData.append('referenceId', referenceId);
            if (fromAmount) formData.append('fromAmount', fromAmount);
            if (toAmount) formData.append('toAmount', toAmount);
            formData.append('page', currentPage);
            formData.append('pageSize', pageSize);
            formData.append('fileSearch', fileSearchInput.files[0]);

            // Add anti-forgery token to FormData
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
            if (token) {
                formData.append('__RequestVerificationToken', token);
            }

            fetch('@Url.Action("GetDocumentsDataWithFile", "Reports")', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(handleDocumentsResponse)
            .catch(handleDocumentsError);
        } else {
            // Use regular GET request
            let url = `@Url.Action("GetDocumentsData", "Reports")?fromDate=${fromDate}&toDate=${toDate}`;
            if (currency) url += `&currency=${currency}`;
            if (customer) url += `&customer=${customer}`;
            if (bankAccount) url += `&bankAccount=${bankAccount}`;
            if (referenceId) url += `&referenceId=${encodeURIComponent(referenceId)}`;
            if (fromAmount) url += `&fromAmount=${fromAmount}`;
            if (toAmount) url += `&toAmount=${toAmount}`;
            url += `&page=${currentPage}&pageSize=${pageSize}`;

            fetch(url)
                .then(response => response.json())
                .then(handleDocumentsResponse)
                .catch(handleDocumentsError);
        }
    }

    function handleDocumentsResponse(data) {
        const tbody = document.getElementById('documentsTableBody');
        
        if (data.error) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="9" class="text-center py-5 text-danger">
                        <i class="fas fa-exclamation-triangle"></i>
                        ${data.error}
                    </td>
                </tr>
            `;
            return;
        }

        tbody.innerHTML = '';

        if (data.documents && data.documents.length > 0) {
            documentsData = data.documents; // Store data for sorting
            renderDocumentsTable(documentsData);
            
            // Update pagination if pagination info is available
            if (data.pagination) {
                updatePagination(data.pagination.totalPages, data.pagination.currentPage);
            } else {
                // Clear pagination if no pagination info
                document.getElementById('documentsPagination').innerHTML = '';
            }
        } else {
            tbody.innerHTML = `
                <tr>
                    <td colspan="9" class="text-center py-5 text-muted">
                        <i class="fas fa-info-circle"></i>
                        هیچ سندی در این بازه زمانی یافت نشد
                    </td>
                </tr>
            `;
        }
    }

    function handleDocumentsError(error) {
        const tbody = document.getElementById('documentsTableBody');
        tbody.innerHTML = `
            <tr>
                <td colspan="9" class="text-center py-5 text-danger">
                    <i class="fas fa-exclamation-triangle"></i>
                    خطا در بارگذاری اطلاعات
                </td>
            </tr>
        `;
    }

    function renderDocumentsTable(documents) {
        const tbody = document.getElementById('documentsTableBody');
        tbody.innerHTML = '';

        documents.forEach(doc => {
            const row = document.createElement('tr');
            const hasFileIcon = doc.hasFile ? '<i class="fas fa-paperclip text-success ms-1" title="دارای فایل پیوست"></i>' : '';
            
            row.innerHTML = `
            <td>DOC${doc.id.toString().padStart(3, '0')}${hasFileIcon}</td>
            <td>${new Date(doc.date).toLocaleDateString('en-GB')}</td>
            <td>
                <div class="d-flex align-items-center">
                    <div class="avatar-sm bg-warning text-white rounded-circle me-2 d-flex align-items-center justify-content-center">
                        ${doc.customerName.charAt(0)}
                    </div>
                    ${doc.customerName}
                </div>
            </td>
            <td>
                ${formatReferenceNumber(doc.referenceNumber)}
            </td>
            <td><span class="badge bg-primary">${doc.currencyCode || 'N/A'}</span></td>
            <td data-no-format="true" data-skip-format="true" class="skip-auto-format">${formatCurrency(doc.amount, doc.currencyCode)}</td>
            <td>${doc.description}</td>
            <td>
                <span class="badge bg-success">
                    ${doc.status}
                </span>
            </td>
            <td>
                <button class="btn btn-sm btn-outline-primary" onclick="viewDocumentDetails(${doc.id})">
                    <i class="fas fa-eye"></i>
                </button>
            </td>
        `;
            tbody.appendChild(row);
        });

        // Start protection after rendering is complete
        setTimeout(startReferenceNumberProtection, 500);
    }

    function sortTable(column) {
        // Toggle sort direction
        if (currentSort.column === column) {
            currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
        } else {
            currentSort.column = column;
            currentSort.direction = 'asc';
        }

        // Update sort icons
        document.querySelectorAll('.sortable i').forEach(icon => {
            icon.className = 'fas fa-sort';
        });

        const currentHeader = document.querySelector(`[data-column="${column}"] i`);
        if (currentSort.direction === 'asc') {
            currentHeader.className = 'fas fa-sort-up';
        } else {
            currentHeader.className = 'fas fa-sort-down';
        }

        // Sort the data
        const sortedData = [...documentsData].sort((a, b) => {
            let valueA = a[column];
            let valueB = b[column];

            // Handle different data types
            if (column === 'date') {
                valueA = new Date(valueA);
                valueB = new Date(valueB);
            } else if (column === 'amount' || column === 'id') {
                valueA = parseFloat(valueA) || 0;
                valueB = parseFloat(valueB) || 0;
            } else if (column === 'currency') {
                // Handle currency sorting - use currencyCode field
                valueA = (a.currencyCode || '').toString().toLowerCase();
                valueB = (b.currencyCode || '').toString().toLowerCase();
            } else if (column === 'referenceNumber') {
                // Handle reference number sorting
                valueA = (a.referenceNumber || '').toString().toLowerCase();
                valueB = (b.referenceNumber || '').toString().toLowerCase();
            } else {
                valueA = valueA.toString().toLowerCase();
                valueB = valueB.toString().toLowerCase();
            }

            if (currentSort.direction === 'asc') {
                return valueA > valueB ? 1 : -1;
            } else {
                return valueA < valueB ? 1 : -1;
            }
        });

        renderDocumentsTable(sortedData);
    }

    function viewDocumentDetails(docId) {
        window.location.href = '@Url.Action("Details", "AccountingDocuments")/' + docId;
    }

    function exportDocumentData() {
        window.location.href = '@Url.Action("ExportToExcel", "Reports")?type=documents';
    }

    function formatNumber(num) {
        if (num === 0) return '0';
        return num.toLocaleString('fa-IR');
    }

    function formatCurrency(amount, currencyCode) {
        if (!amount && amount !== 0) return '-';
        const formattedAmount = formatNumber(amount);
        return `${formattedAmount} ${currencyCode || ''}`;
    }

    function formatReferenceNumber(referenceNumber) {
        // Don't format reference numbers - they are identifiers, not amounts
        return referenceNumber || '-';
    }

    // Override global formatting for reference numbers
    function protectReferenceNumbers() {
        // Find all reference number cells and restore their original values
        const referenceNumberCells = document.querySelectorAll('td:nth-child(4)'); // 4th column is reference number
        
        documentsData.forEach((doc, index) => {
            if (referenceNumberCells[index] && doc.referenceNumber) {
                const cell = referenceNumberCells[index];
                const expectedValue = doc.referenceNumber.toString();
                
                // If the cell content has been modified by global formatters, restore it
                if (cell.textContent !== expectedValue && cell.textContent !== '-') {
                    cell.textContent = expectedValue;
                }
            }
        });
    }

    // Continuously protect reference numbers from global formatting
    function startReferenceNumberProtection() {
        // Protect immediately
        protectReferenceNumbers();
        
        // Protect every 2 seconds to override any global formatting
        setInterval(protectReferenceNumbers, 2000);
        
        // Also protect on DOM mutations (when content changes)
        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (mutation.type === 'childList' || mutation.type === 'characterData') {
                    setTimeout(protectReferenceNumbers, 100);
                }
            });
        });
        
        // Start observing the table body for changes
        const tableBody = document.getElementById('documentsTableBody');
        if (tableBody) {
            observer.observe(tableBody, {
                childList: true,
                subtree: true,
                characterData: true
            });
        }
    }
</script>

<style>
    .avatar-sm {
        width: 32px;
        height: 32px;
        font-size: 0.875rem;
    }

    .table th {
        border-top: none;
        font-weight: 600;
    }

    .card {
        border-radius: 10px;
    }

    .badge {
        font-size: 0.75rem;
    }

    .sortable {
        cursor: pointer;
        user-select: none;
    }

    .sortable i {
        margin-left: 5px;
        opacity: 0.7;
    }
</style>
