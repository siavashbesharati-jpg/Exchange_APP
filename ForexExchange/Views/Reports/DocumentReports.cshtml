@{
    ViewData["Title"] = "گزارشات اسناد حسابداری";
}

<div class="container-fluid">
    <!-- Header with Back Button -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex align-items-center justify-content-between">
                <div>
                    <h2><i class="fas fa-file-invoice text-warning me-2"></i>گزارشات اسناد حسابداری</h2>
                    <p class="text-muted">تحلیل اسناد حسابداری، رسیدها و گزارشات مالی تفصیلی</p>
                </div>
                <a href="@Url.Action("Index", "Reports")" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-right me-1"></i>بازگشت به فهرست گزارشات
                </a>
            </div>
        </div>
    </div>

    <!-- Filter Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h5 class="card-title"><i class="fas fa-filter me-2"></i>فیلترهای جستجو</h5>
                    <div class="row g-3">
                        <div class="col-md-2">
                            <label class="form-label">از تاریخ</label>
                            <div class="input-group">
                                <input type="date" class="form-control" id="fromDate">
                                <button class="btn btn-outline-secondary" type="button" onclick="clearDate('fromDate')" title="پاک کردن تاریخ">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">تا تاریخ</label>
                            <div class="input-group">
                                <input type="date" class="form-control" id="toDate">
                                <button class="btn btn-outline-secondary" type="button" onclick="clearDate('toDate')" title="پاک کردن تاریخ">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">ارز</label>
                            <select class="form-select" id="currency">
                                <option value="">همه</option>
                                <option value="USD">USD</option>
                                <option value="EUR">EUR</option>
                                <option value="AED">AED</option>
                                <option value="IRR">IRR</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">مشتری</label>
                            <select class="form-select" id="customer">
                                <option value="">همه</option>
                                <!-- Customer options will be loaded dynamically -->
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">شناسه مرجع</label>
                            <input type="text" class="form-control" id="referenceId" placeholder="شماره تراکنش یا شناسه">
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">&nbsp;</label>
                            <button class="btn btn-warning w-100" onclick="loadDocumentReports()">
                                <i class="fas fa-search me-1"></i>جستجو
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Documents Table -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0"><i class="fas fa-table me-2"></i>جدول تفصیلی اسناد</h5>
                    <button class="btn btn-success btn-sm" onclick="exportDocumentData()">
                        <i class="fas fa-file-excel me-1"></i> دریافت اکسل 
                    </button>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover" id="documentsTable">
                            <thead class="table-dark">
                                <tr>
                                    <th class="sortable" data-column="id">شناسه <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-column="date">تاریخ <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-column="customerName">مشتری <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-column="referenceNumber">شماره تراکنش <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-column="currency">ارز <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-column="amount">مبلغ <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-column="description">شرح <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-column="status">وضعیت <i class="fas fa-sort"></i></th>
                                    <th>عملیات</th>
                                </tr>
                            </thead>
                            <tbody id="documentsTableBody">
                                <tr>
                                    <td colspan="9" class="text-center py-5">
                                        <div class="spinner-border text-warning" role="status">
                                            <span class="visually-hidden">در حال بارگذاری...</span>
                                        </div>
                                        <p class="mt-2 text-muted">در حال بارگذاری اطلاعات...</p>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    let documentsData = []; // Store documents data for sorting
    let currentSort = { column: null, direction: 'asc' };

    document.addEventListener('DOMContentLoaded', function () {
        // Don't set default dates - let users choose to filter by date or not
        // document.getElementById('fromDate').value = '';
        // document.getElementById('toDate').value = '';

        // Add click event listeners to sortable headers
        document.querySelectorAll('.sortable').forEach(header => {
            header.addEventListener('click', function () {
                const column = this.getAttribute('data-column');
                sortTable(column);
            });
            header.style.cursor = 'pointer';
        });

        // Load customers dropdown
        loadCustomers();
        
        // Add Enter key event listener to all filter inputs
        addEnterKeyListeners();
        
        loadDocumentReports();
    });

    function loadCustomers() {
        fetch('@Url.Action("GetCustomers", "Reports")')
            .then(response => response.json())
            .then(data => {
                const customerSelect = document.getElementById('customer');
                customerSelect.innerHTML = '<option value="">همه</option>';
                
                if (data && data.length > 0) {
                    data.forEach(customer => {
                        const option = document.createElement('option');
                        option.value = customer.id;
                        option.textContent = customer.fullName;
                        customerSelect.appendChild(option);
                    });
                }
            })
            .catch(error => {
            });
    }

    function addEnterKeyListeners() {
        // Add Enter key event listener to all filter inputs and selects
        const filterElements = [
            'fromDate',
            'toDate', 
            'currency',
            'customer',
            'referenceId'
        ];

        filterElements.forEach(elementId => {
            const element = document.getElementById(elementId);
            if (element) {
                element.addEventListener('keypress', function(event) {
                    if (event.key === 'Enter') {
                        event.preventDefault();
                        loadDocumentReports();
                    }
                });
            }
        });
    }

    function clearDate(inputId) {
        document.getElementById(inputId).value = '';
        // Automatically trigger search after clearing date
        loadDocumentReports();
    }

    function loadDocumentReports() {
        loadDocumentsTable();
    }

    function loadDocumentsTable() {
        const tbody = document.getElementById('documentsTableBody');
        tbody.innerHTML = `
        <tr>
            <td colspan="9" class="text-center py-5">
                <div class="spinner-border text-warning" role="status">
                    <span class="visually-hidden">در حال بارگذاری...</span>
                </div>
                <p class="mt-2 text-muted">در حال بارگذاری اطلاعات اسناد...</p>
            </td>
        </tr>
    `;

        const fromDate = document.getElementById('fromDate').value;
        const toDate = document.getElementById('toDate').value;
        const currency = document.getElementById('currency').value;
        const customer = document.getElementById('customer').value;
        const referenceId = document.getElementById('referenceId').value;

        let url = `@Url.Action("GetDocumentsData", "Reports")?fromDate=${fromDate}&toDate=${toDate}`;
        if (currency) url += `&currency=${currency}`;
        if (customer) url += `&customer=${customer}`;
        if (referenceId) url += `&referenceId=${encodeURIComponent(referenceId)}`;

        fetch(url)
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    tbody.innerHTML = `
                    <tr>
                        <td colspan="9" class="text-center py-5 text-danger">
                            <i class="fas fa-exclamation-triangle"></i>
                            ${data.error}
                        </td>
                    </tr>
                `;
                    return;
                }

                tbody.innerHTML = '';

                if (data.documents && data.documents.length > 0) {
                    documentsData = data.documents; // Store data for sorting
                    renderDocumentsTable(documentsData);
                } else {
                    tbody.innerHTML = `
                    <tr>
                        <td colspan="9" class="text-center py-5 text-muted">
                            <i class="fas fa-info-circle"></i>
                            هیچ سندی در این بازه زمانی یافت نشد
                        </td>
                    </tr>
                `;
                }
            })
            .catch(error => {
                tbody.innerHTML = `
                <tr>
                    <td colspan="9" class="text-center py-5 text-danger">
                        <i class="fas fa-exclamation-triangle"></i>
                        خطا در بارگذاری اطلاعات
                    </td>
                </tr>
            `;
            });
    }

    function renderDocumentsTable(documents) {
        const tbody = document.getElementById('documentsTableBody');
        tbody.innerHTML = '';

        documents.forEach(doc => {
            const row = document.createElement('tr');
            row.innerHTML = `
            <td>DOC${doc.id.toString().padStart(3, '0')}</td>
            <td>${new Date(doc.date).toLocaleDateString('en-GB')}</td>
            <td>
                <div class="d-flex align-items-center">
                    <div class="avatar-sm bg-warning text-white rounded-circle me-2 d-flex align-items-center justify-content-center">
                        ${doc.customerName.charAt(0)}
                    </div>
                    ${doc.customerName}
                </div>
            </td>
            <td>
                ${formatReferenceNumber(doc.referenceNumber)}
            </td>
            <td><span class="badge bg-primary">${doc.currencyCode || 'N/A'}</span></td>
            <td data-no-format="true" data-skip-format="true" class="skip-auto-format">${formatCurrency(doc.amount, doc.currencyCode)}</td>
            <td>${doc.description}</td>
            <td>
                <span class="badge bg-success">
                    ${doc.status}
                </span>
            </td>
            <td>
                <button class="btn btn-sm btn-outline-primary" onclick="viewDocumentDetails(${doc.id})">
                    <i class="fas fa-eye"></i>
                </button>
            </td>
        `;
            tbody.appendChild(row);
        });

        // Start protection after rendering is complete
        setTimeout(startReferenceNumberProtection, 500);
    }

    function sortTable(column) {
        // Toggle sort direction
        if (currentSort.column === column) {
            currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
        } else {
            currentSort.column = column;
            currentSort.direction = 'asc';
        }

        // Update sort icons
        document.querySelectorAll('.sortable i').forEach(icon => {
            icon.className = 'fas fa-sort';
        });

        const currentHeader = document.querySelector(`[data-column="${column}"] i`);
        if (currentSort.direction === 'asc') {
            currentHeader.className = 'fas fa-sort-up';
        } else {
            currentHeader.className = 'fas fa-sort-down';
        }

        // Sort the data
        const sortedData = [...documentsData].sort((a, b) => {
            let valueA = a[column];
            let valueB = b[column];

            // Handle different data types
            if (column === 'date') {
                valueA = new Date(valueA);
                valueB = new Date(valueB);
            } else if (column === 'amount' || column === 'id') {
                valueA = parseFloat(valueA) || 0;
                valueB = parseFloat(valueB) || 0;
            } else if (column === 'currency') {
                // Handle currency sorting - use currencyCode field
                valueA = (a.currencyCode || '').toString().toLowerCase();
                valueB = (b.currencyCode || '').toString().toLowerCase();
            } else if (column === 'referenceNumber') {
                // Handle reference number sorting
                valueA = (a.referenceNumber || '').toString().toLowerCase();
                valueB = (b.referenceNumber || '').toString().toLowerCase();
            } else {
                valueA = valueA.toString().toLowerCase();
                valueB = valueB.toString().toLowerCase();
            }

            if (currentSort.direction === 'asc') {
                return valueA > valueB ? 1 : -1;
            } else {
                return valueA < valueB ? 1 : -1;
            }
        });

        renderDocumentsTable(sortedData);
    }

    function viewDocumentDetails(docId) {
        window.location.href = '@Url.Action("Details", "AccountingDocuments")/' + docId;
    }

    function exportDocumentData() {
        window.location.href = '@Url.Action("ExportToExcel", "Reports")?type=documents';
    }

    function formatNumber(num) {
        if (num === 0) return '0';
        return num.toLocaleString('fa-IR');
    }

    function formatReferenceNumber(referenceNumber) {
        // Don't format reference numbers - they are identifiers, not amounts
        return referenceNumber || '-';
    }

    // Override global formatting for reference numbers
    function protectReferenceNumbers() {
        // Find all reference number cells and restore their original values
        const referenceNumberCells = document.querySelectorAll('td:nth-child(4)'); // 4th column is reference number
        
        documentsData.forEach((doc, index) => {
            if (referenceNumberCells[index] && doc.referenceNumber) {
                const cell = referenceNumberCells[index];
                const expectedValue = doc.referenceNumber.toString();
                
                // If the cell content has been modified by global formatters, restore it
                if (cell.textContent !== expectedValue && cell.textContent !== '-') {
                    cell.textContent = expectedValue;
                }
            }
        });
    }

    // Continuously protect reference numbers from global formatting
    function startReferenceNumberProtection() {
        // Protect immediately
        protectReferenceNumbers();
        
        // Protect every 2 seconds to override any global formatting
        setInterval(protectReferenceNumbers, 2000);
        
        // Also protect on DOM mutations (when content changes)
        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (mutation.type === 'childList' || mutation.type === 'characterData') {
                    setTimeout(protectReferenceNumbers, 100);
                }
            });
        });
        
        // Start observing the table body for changes
        const tableBody = document.getElementById('documentsTableBody');
        if (tableBody) {
            observer.observe(tableBody, {
                childList: true,
                subtree: true,
                characterData: true
            });
        }
    }
</script>

<style>
    .avatar-sm {
        width: 32px;
        height: 32px;
        font-size: 0.875rem;
    }

    .table th {
        border-top: none;
        font-weight: 600;
    }

    .card {
        border-radius: 10px;
    }

    .badge {
        font-size: 0.75rem;
    }

    .sortable {
        cursor: pointer;
        user-select: none;
    }

    .sortable i {
        margin-left: 5px;
        opacity: 0.7;
    }
</style>
