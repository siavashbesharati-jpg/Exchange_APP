@model ForexExchange.Controllers.FinancialReport
@using ForexExchange.Extensions
@{
    ViewData["Title"] = "گزارش مالی";
}

@section Styles {
    <style>
        .card {
            transition: all 0.3s ease;
            border-radius: 12px;
        }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1) !important;
        }

        .card-header {
            border-radius: 12px 12px 0 0 !important;
            border-bottom: none;
            padding: 1.5rem;
        }

        .card-body {
            padding: 1.5rem;
        }

        .table th {
            font-weight: 600;
            color: #495057;
            border-bottom: 2px solid #e9ecef;
        }

        .table td {
            vertical-align: middle;
            padding: 1rem 0.75rem;
        }

        .badge {
            font-size: 0.75rem;
            padding: 0.375rem 0.75rem;
        }

        .progress {
            border-radius: 10px;
        }

        .progress-bar {
            border-radius: 10px;
        }

        .btn-outline-primary.active,
        .btn-outline-success.active {
            background-color: currentColor;
            border-color: currentColor;
            color: white;
        }

        .currency-view {
            animation: fadeIn 0.3s ease-in-out;
        }

        <text>@@keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        </text>.bg-primary {
            background-color: #007bff !important;
        }

        .bg-info {
            background-color: #17a2b8 !important;
        }

        .bg-success {
            background-color: #28a745 !important;
        }

        .bg-warning {
            background-color: #ffc107 !important;
        }

        .bg-danger {
            background-color: #dc3545 !important;
        }

        .bg-secondary {
            background-color: #6c757d !important;
        }

        .text-primary {
            color: #007bff !important;
        }

        .text-info {
            color: #17a2b8 !important;
        }

        .text-success {
            color: #28a745 !important;
        }

        .text-warning {
            color: #ffc107 !important;
        }

        .text-danger {
            color: #dc3545 !important;
        }

        .text-secondary {
            color: #6c757d !important;
        }

        .bg-opacity-10 {
            --bs-bg-opacity: 0.1;
        }

        /* Responsive adjustments */
        <text>@@media (max-width: 768px) {
            .card-body {
                padding: 1rem;
            }

            .table-responsive {
                font-size: 0.875rem;
            }

            .d-flex.gap-2 {
                flex-direction: column;
                gap: 0.5rem !important;
            }

            .d-flex.gap-2 .btn {
                width: 100%;
            }
        }

        </text>

        /* Chart container styling */
        #dailyVolumeChart,
        #currencyBreakdownChart {
            max-height: 300px;
        }

        /* Custom scrollbar for table */
        .table-responsive::-webkit-scrollbar {
            height: 8px;
        }

        .table-responsive::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 4px;
        }

        .table-responsive::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 4px;
        }

        .table-responsive::-webkit-scrollbar-thumb:hover {
            background: #a8a8a8;
        }
    </style>
}

<div class="container-fluid py-4">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h3 mb-0 text-primary">
                        <i class="fas fa-chart-line me-2"></i>
                        گزارش مالی
                    </h1>
                    <p class="text-muted mb-0">تحلیل مالی و آماری معاملات</p>
                </div>
                <div class="d-flex gap-2">
                    <a href="@Url.Action("ExportFinancial")?fromDate=@Model.FromDate.ToString("yyyy-MM-dd")&toDate=@Model.ToDate.ToString("yyyy-MM-dd")"
                        class="btn btn-outline-success">
                        <i class="fas fa-download me-1"></i>
                        دانلود CSV
                    </a>
                    <button class="btn btn-outline-primary" onclick="window.print()">
                        <i class="fas fa-print me-1"></i>
                        چاپ گزارش
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Filter Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-light">
                    <h5 class="mb-0">
                        <i class="fas fa-filter me-2"></i>
                        فیلترها
                    </h5>
                </div>
                <div class="card-body">
                    <form method="get" class="row g-3">
                        <div class="col-md-3">
                            <label for="fromDate" class="form-label fw-bold">از تاریخ</label>
                            <input type="date" class="form-control form-control-lg" id="fromDate" name="fromDate"
                                value="@Model.FromDate.ToString("yyyy-MM-dd")">
                        </div>
                        <div class="col-md-3">
                            <label for="toDate" class="form-label fw-bold">تا تاریخ</label>
                            <input type="date" class="form-control form-control-lg" id="toDate" name="toDate"
                                value="@Model.ToDate.ToString("yyyy-MM-dd")">
                        </div>
                        <div class="col-md-3">
                            <label for="customerId" class="form-label fw-bold">مشتری</label>
                            <select class="form-select form-select-lg" id="customerId" name="customerId">
                                <option value="">همه مشتریان</option>
                                @foreach (var customer in ViewBag.Customers)
                                {
                                    @if (ViewBag.SelectedCustomerId?.ToString() == customer.Id.ToString())
                                    {
                                        <option value="@customer.Id" selected>@customer.Name</option>
                                    }
                                    else
                                    {
                                        <option value="@customer.Id">@customer.Name</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="currencyId" class="form-label fw-bold">نوع ارز</label>
                            <select class="form-select form-select-lg" id="currencyId" name="currencyId">
                                <option value="">همه ارزها</option>
                                @{
                                    int? selectedCurrencyId = ViewBag.SelectedCurrencyId as int?;
                                    var currencies = ViewBag.Currencies as IEnumerable<dynamic>;
                                }
                                @if (currencies != null)
                                {
                                    foreach (var c in currencies)
                                    {
                                        var isSelected = selectedCurrencyId.HasValue && selectedCurrencyId.Value.ToString() ==
                                        c.Id.ToString();
                                        <option value="@c.Id" selected="@(isSelected ? "selected" : null)">@c.PersianName
                                            (@c.Code)</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="col-12">
                            <button type="submit" class="btn btn-primary btn-lg px-4">
                                <i class="fas fa-search me-2"></i>
                                اعمال فیلتر
                            </button>
                            <a href="@Url.Action("Financial")" class="btn btn-outline-secondary btn-lg ms-2">
                                <i class="fas fa-undo me-2"></i>
                                بازنشانی
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Summary Cards -->
    <div class="row mb-4">
        <div class="col-xl-3 col-lg-6 col-md-6 mb-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body text-center">
                    <div class="d-flex align-items-center justify-content-center mb-3">
                        <div class="bg-primary bg-opacity-10 rounded-circle p-3">
                            <i class="fas fa-exchange-alt fa-2x text-primary"></i>
                        </div>
                    </div>
                    <h2 class="h4 mb-1 text-primary">@((decimal)Model.TotalTransactions).FormatCurrency("IRR")</h2>
                    <p class="text-muted mb-0">کل تراکنش‌ها</p>
                    <small class="text-muted">
                        @((Model.TotalTransactions > 0 ? (Model.CompletedTransactions * 100.0 /
                                                Model.TotalTransactions).ToString("F1") : "0") + "% تکمیل شده")
                    </small>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-lg-6 col-md-6 mb-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body text-center">
                    <div class="d-flex align-items-center justify-content-center mb-3">
                        <div class="bg-success bg-opacity-10 rounded-circle p-3">
                            <i class="fas fa-check-circle fa-2x text-success"></i>
                        </div>
                    </div>
                    <h2 class="h4 mb-1 text-success">@((decimal)Model.CompletedTransactions).FormatCurrency("IRR")</h2>
                    <p class="text-muted mb-0">تراکنش‌های تکمیل شده</p>
                    <small class="text-muted">
                        @((Model.TotalTransactions > 0 ? (Model.CompletedTransactions * 100.0 /
                                                Model.TotalTransactions).ToString("F1") : "0") + "% از کل")
                    </small>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-lg-6 col-md-6 mb-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body text-center">
                    <div class="d-flex align-items-center justify-content-center mb-3">
                        <div class="bg-info bg-opacity-10 rounded-circle p-3">
                            <i class="fas fa-coins fa-2x text-info"></i>
                        </div>
                    </div>
                    <h2 class="h4 mb-1 text-info">@Model.TotalVolumeInToman.ToString("N0")</h2>
                    <p class="text-muted mb-0">حجم کل (تومان)</p>
                    <small class="text-muted">
                        میانگین: @((Model.CompletedTransactions > 0 ? (Model.TotalVolumeInToman /
                                                Model.CompletedTransactions).ToString("N0") : "0") + " تومان")
                    </small>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-lg-6 col-md-6 mb-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body text-center">
                    <div class="d-flex align-items-center justify-content-center mb-3">
                        <div class="bg-warning bg-opacity-10 rounded-circle p-3">
                            <i class="fas fa-percent fa-2x text-warning"></i>
                        </div>
                    </div>
                    <h2 class="h4 mb-1 text-warning">@Model.TotalCommissionEarned.ToString("N0")</h2>
                    <p class="text-muted mb-0">کل کمیسیون</p>
                    <small class="text-muted">
                        @((Model.TotalVolumeInToman > 0 ? ((double)Model.TotalCommissionEarned * 100.0 /
                                                (double)Model.TotalVolumeInToman).ToString("F2") : "0") + "% از حجم کل")
                    </small>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts Section -->
    <div class="row mb-4">
        <div class="col-lg-8 mb-4">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-header bg-light">
                    <h5 class="mb-0">
                        <i class="fas fa-chart-line me-2 text-primary"></i>
                        روند حجم معاملات روزانه
                    </h5>
                </div>
                <div class="card-body">
                    <canvas id="dailyVolumeChart" height="300"></canvas>
                </div>
            </div>
        </div>
        <div class="col-lg-4 mb-4">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-header bg-light">
                    <h5 class="mb-0">
                        <i class="fas fa-chart-pie me-2 text-success"></i>
                        توزیع ارزها
                    </h5>
                </div>
                <div class="card-body d-flex align-items-center">
                    <canvas id="currencyBreakdownChart" width="300" height="300"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Currency Breakdown Section -->
    @if (Model.CurrencyBreakdown.Any())
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-light d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="fas fa-coins me-2 text-warning"></i>
                            تفکیک ارزها - تحلیل جزئی
                        </h5>
                        <div class="d-flex gap-2">
                            <button class="btn btn-sm btn-outline-primary" onclick="toggleCurrencyView('table')">
                                <i class="fas fa-table me-1"></i>
                                جدول
                            </button>
                            <button class="btn btn-sm btn-outline-success" onclick="toggleCurrencyView('cards')">
                                <i class="fas fa-th me-1"></i>
                                کارت‌ها
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <!-- Table View -->
                        <div id="currencyTableView" class="currency-view">
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th class="border-0">نوع ارز</th>
                                            <th class="border-0 text-center">تعداد تراکنش</th>
                                            <th class="border-0 text-center">حجم کل</th>
                                            <th class="border-0 text-center">ارزش ارزی</th>
                                            <th class="border-0 text-center">میانگین نرخ</th>
                                            <th class="border-0 text-center">سهم بازار</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            var totalValue = Model.CurrencyBreakdown.Sum(c => c.TotalVolume);
                                        }
                                        @foreach (var currency in Model.CurrencyBreakdown.OrderByDescending(c =>
                                                                            c.TotalVolume))
                                        {
                                            var marketShare = totalValue > 0 ? ((double)currency.TotalVolume * 100.0 /
                                            (double)totalValue) : 0;
                                            var currencyColor = currency.CurrencyCode?.ToUpper() switch
                                            {
                                                "USD" => "primary",
                                                "EUR" => "info",
                                                "AED" => "success",
                                                "OMR" => "warning",
                                                "TRY" => "danger",
                                                _ => "secondary"
                                            };
                                            <tr>
                                                <td>
                                                    <div class="d-flex align-items-center">
                                                        <div class="bg-@currencyColor bg-opacity-10 rounded-circle p-2 me-3">
                                                            <i
                                                                class="fas fa-@(currency.CurrencyCode?.ToUpper() switch { "USD" => "dollar-sign", "EUR" => "euro-sign", "AED" => "coins", "OMR" => "money-bill", "TRY" => "lira-sign", _ => "coins" }) text-@currencyColor"></i>
                                                        </div>
                                                        <div>
                                                            <div class="fw-bold">
                                                                @(!string.IsNullOrWhiteSpace(currency.CurrencyName) ?
                                                                                                                        currency.CurrencyName : currency.CurrencyCode)</div>
                                                            <small class="text-muted">@currency.CurrencyCode</small>
                                                        </div>
                                                    </div>
                                                </td>
                                                <td class="text-center">
                                                    <span
                                                        class="badge bg-light text-dark border">@currency.TransactionCount.ToString("N0")</span>
                                                </td>
                                                <td class="text-center fw-bold">@(currency.CurrencyCode == "IRR" ? currency.TotalVolume.ToString("N0") : currency.TotalVolume.ToString("N2"))</td>
                                                <td class="text-center">
                                                    <span
                                                        class="fw-bold text-success">@(currency.CurrencyCode == "IRR" ? currency.TotalVolume.ToString("N0") : currency.TotalVolume.ToString("N2"))</span>
                                                    <small class="text-muted d-block">@currency.CurrencyCode</small>
                                                </td>
                                                <td class="text-center">
                                                    <span class="fw-bold">@(currency.CurrencyCode == "IRR" ? currency.AverageRate.ToString("N0") : currency.AverageRate.ToString("N2"))</span>
                                                    <small class="text-muted d-block">تومان</small>
                                                </td>
                                                <td class="text-center">
                                                    <div class="d-flex align-items-center justify-content-center">
                                                        <div class="progress" style="width: 60px; height: 8px;">
                                                            <div class="progress-bar bg-@currencyColor" role="progressbar"
                                                                style="width: @marketShare.ToString("F1")%"
                                                                aria-valuenow="@marketShare.ToString("F1")" aria-valuemin="0"
                                                                aria-valuemax="100"></div>
                                                        </div>
                                                        <span class="ms-2 fw-bold">@marketShare.ToString("F1")%</span>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                    <tfoot class="table-light">
                                        <tr>
                                            <th class="border-0">مجموع</th>
                                            <th class="border-0 text-center">@Model.CurrencyBreakdown.Sum(c =>
                                                                                            c.TransactionCount).ToString("N0")</th>
                                        <th class="border-0 text-center">@Model.CurrencyBreakdown.Sum(c =>
                                                                                        c.TotalVolume).ToString("N2")</th>
                                        <th class="border-0 text-center fw-bold text-success">@totalValue.ToString("N2")
                                        </th>
                                        <th class="border-0 text-center">-</th>
                                        <th class="border-0 text-center">100%</th>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    </div>

                        <!-- Cards View -->
                        <div id="currencyCardsView" class="currency-view d-none">
                            <div class="row">
                            @{
                                    var maxValue = Model.CurrencyBreakdown.Max(c => c.TotalVolume);
                                }
                                @foreach (var currency in Model.CurrencyBreakdown.OrderByDescending(c => c.TotalVolume))
                                {
                                    var marketShare = totalValue > 0 ? ((double)currency.TotalVolume * 100.0 /
                                    (double)totalValue) : 0;
                                    var currencyColor = currency.CurrencyCode?.ToUpper() switch
                                    {
                                        "USD" => "primary",
                                        "EUR" => "info",
                                        "AED" => "success",
                                        "OMR" => "warning",
                                        "TRY" => "danger",
                                        _ => "secondary"
                                    };
                                    var heightPercent = maxValue > 0 ? ((double)currency.TotalVolume * 100.0 / (double)maxValue)
                                    : 0;
                                    <div class="col-xl-3 col-lg-4 col-md-6 mb-3">
                                        <div class="card border-0 shadow-sm h-100">
                                            <div class="card-body text-center">
                                                <div class="d-flex align-items-center justify-content-center mb-3">
                                                    <div class="bg-@currencyColor bg-opacity-10 rounded-circle p-3">
                                                        <i
                                                            class="fas fa-@(currency.CurrencyCode?.ToUpper() switch { "USD" => "dollar-sign", "EUR" => "euro-sign", "AED" => "coins", "OMR" => "money-bill", "TRY" => "lira-sign", _ => "coins" }) fa-2x text-@currencyColor"></i>
                                                    </div>
                                                </div>
                                                <h5 class="card-title">@(!string.IsNullOrWhiteSpace(currency.CurrencyName) ?
                                                                                                currency.CurrencyName : currency.CurrencyCode)</h5>
                                                <p class="text-muted mb-2">@currency.CurrencyCode</p>

                                                <div class="mb-3">
                                                    <div class="progress" style="height: 8px;">
                                                        <div class="progress-bar bg-@currencyColor" role="progressbar"
                                                            style="width: @heightPercent.ToString("F1")%"
                                                            aria-valuenow="@heightPercent.ToString("F1")" aria-valuemin="0"
                                                            aria-valuemax="100"></div>
                                                    </div>
                                                </div>

                                                <div class="row text-center">
                                                    <div class="col-6">
                                                        <div class="fw-bold text-@currencyColor">@currency.TransactionCount
                                                        </div>
                                                        <small class="text-muted">تراکنش</small>
                                                    </div>
                                                    <div class="col-6">
                                                        <div class="fw-bold text-success">@currency.TotalVolume.ToString("N2")
                                                        </div>
                                                        <small class="text-muted">@currency.CurrencyCode</small>
                                                    </div>
                                                </div>

                                                <div class="mt-2">
                                                    <span
                                                        class="badge bg-@currencyColor bg-opacity-10 text-@currencyColor border">
                                                        @marketShare.ToString("F1")% سهم بازار
                                                    </span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

  
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">
                            <i class="fas fa-history me-2 text-primary"></i>
                            تراکنش‌های اخیر
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th class="border-0">شناسه</th>
                                        <th class="border-0">تاریخ</th>
                                        <th class="border-0">خریدار</th>
                                        <th class="border-0">فروشنده</th>
                                        <th class="border-0">نوع ارز</th>
                                        <th class="border-0 text-center">مقدار</th>
                                        <th class="border-0 text-center">نرخ</th>
                                        
                                        <th class="border-0 text-center">وضعیت</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @* TODO: Replace with AccountingDocument display when implementing new architecture *@
                                    @*
                                    @foreach (var transaction in Model.Transactions.Take(10))
                                    {
                                        <tr>
                                            <td>
                                                <a href="@Url.Action("Details", "Settlements", new { id = transaction.Id })" class="text-decoration-none">
                                                    <span class="badge bg-light text-dark">#@transaction.Id</span>
                                                </a>
                                            </td>
                                            <td>
                                                <div class="fw-bold">@transaction.CreatedAt.ToString("yyyy/MM/dd")</div>
                                                <small class="text-muted">@transaction.CreatedAt.ToString("HH:mm")</small>
                                            </td>
                                            <td>
                                                <div class="fw-bold">@transaction.BuyerCustomer.FullName</div>
                                            </td>
                                            <td>
                                                <div class="fw-bold">@transaction.SellerCustomer.FullName</div>
                                            </td>
                                            <td>
                                                <span class="badge bg-primary">@transaction.CurrencyPair</span>
                                            </td>
                                            <td class="text-center fw-bold">@transaction.Amount.ToString("N2")</td>
                                            <td class="text-center">
                                                <span class="fw-bold text-success">@(transaction.ToCurrency?.Code == "IRR" ? (transaction.Rate?.ToString("N0") ?? "0") : (transaction.Rate?.ToString("N2") ?? "0"))</span>
                                                <small class="text-muted d-block">تومان</small>
                                            </td>
                                            
                                            <td class="text-center">
                                                @switch (transaction.Status)
                                                {
                                                    case ForexExchange.Models.TransactionStatus.Pending:
                                                        <span class="badge bg-warning">در انتظار</span>
                                                        break;
                                                    case ForexExchange.Models.TransactionStatus.PaymentUploaded:
                                                        <span class="badge bg-info">رسید آپلود شده</span>
                                                        break;
                                                    case ForexExchange.Models.TransactionStatus.ReceiptConfirmed:
                                                        <span class="badge bg-primary">سند حسابداری تأیید شده</span>
                                                        break;
                                                    case ForexExchange.Models.TransactionStatus.Completed:
                                                        <span class="badge bg-success">تکمیل شده</span>
                                                        break;
                                                    case ForexExchange.Models.TransactionStatus.Failed:
                                                        <span class="badge bg-danger">ناموفق</span>
                                                        break;
                                                }
                                            </td>
                                        </tr>
                                    }
                                    *@
                                    <tr>
                                        <td colspan="8" class="text-center text-muted py-4">
                                            <i class="fas fa-info-circle me-2"></i>
                                            Transaction data will be available after implementing the new AccountingDocument architecture.
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-body text-center py-5">
                        <div class="mb-3">
                            <i class="fas fa-chart-pie fa-3x text-muted"></i>
                        </div>
                        <h5 class="text-muted">داده‌ای برای نمایش وجود ندارد</h5>
                        <p class="text-muted mb-0">هیچ تراکنشی در بازه زمانی انتخاب شده یافت نشد.</p>
                        <small class="text-muted">برای مشاهده توزیع ارزها، ابتدا باید تراکنش‌هایی در سیستم وجود داشته باشد.</small>
                    </div>
                </div>
            </div>
        </div>
    }

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Currency color mapping
        const currencyColors = {
            'USD': { bg: '#007bff', border: '#0056b3' },
            'EUR': { bg: '#17a2b8', border: '#117a8b' },
            'AED': { bg: '#28a745', border: '#1e7e34' },
            'OMR': { bg: '#ffc107', border: '#d39e00' },
            'TRY': { bg: '#dc3545', border: '#bd2130' },
            'default': { bg: '#6c757d', border: '#545b62' }
        };

        // Get currency color
        function getCurrencyColor(code) {
            return currencyColors[code?.toUpperCase()] || currencyColors.default;
        }

        // Toggle currency view function
        function toggleCurrencyView(viewType) {
            const tableView = document.getElementById('currencyTableView');
            const cardsView = document.getElementById('currencyCardsView');
            const tableBtn = document.querySelector('button[onclick*="table"]');
            const cardsBtn = document.querySelector('button[onclick*="cards"]');

            if (viewType === 'table') {
                tableView.classList.remove('d-none');
                cardsView.classList.add('d-none');
                tableBtn.classList.add('active');
                cardsBtn.classList.remove('active');
            } else {
                tableView.classList.add('d-none');
                cardsView.classList.remove('d-none');
                tableBtn.classList.remove('active');
                cardsBtn.classList.add('active');
            }
        }

        // Daily Volume Chart with enhanced styling
        const dailyCtx = document.getElementById('dailyVolumeChart').getContext('2d');
        const dailyGradient = dailyCtx.createLinearGradient(0, 0, 0, 400);
        dailyGradient.addColorStop(0, 'rgba(13, 110, 253, 0.3)');
        dailyGradient.addColorStop(1, 'rgba(13, 110, 253, 0.05)');

        new Chart(dailyCtx, {
            type: 'line',
            data: {
                labels: [@Html.Raw(string.Join(",", Model.DailyBreakdown.Select(d => $"'{d.Date:MM/dd}'")))],
                datasets: [{
                    label: 'حجم روزانه (تومان)',
                    data: [@string.Join(",", Model.DailyBreakdown.Select(d => d.TotalVolumeInToman))],
                    borderColor: '#0d6efd',
                    backgroundColor: dailyGradient,
                    borderWidth: 3,
                    fill: true,
                    tension: 0.4,
                    pointBackgroundColor: '#0d6efd',
                    pointBorderColor: '#ffffff',
                    pointBorderWidth: 2,
                    pointRadius: 6,
                    pointHoverRadius: 8,
                    pointHoverBackgroundColor: '#0d6efd',
                    pointHoverBorderColor: '#ffffff',
                    pointHoverBorderWidth: 3
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        titleColor: '#ffffff',
                        bodyColor: '#ffffff',
                        cornerRadius: 8,
                        displayColors: false,
                        callbacks: {
                            label: function (context) {
                                return 'حجم: ' + context.parsed.y.toLocaleString('fa-IR') + ' تومان';
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        grid: {
                            display: false
                        },
                        ticks: {
                            color: '#6c757d'
                        }
                    },
                    y: {
                        beginAtZero: true,
                        grid: {
                            color: 'rgba(0, 0, 0, 0.1)'
                        },
                        ticks: {
                            color: '#6c757d',
                            callback: function (value) {
                                return value.toLocaleString('fa-IR');
                            }
                        }
                    }
                },
                interaction: {
                    intersect: false,
                    mode: 'index'
                }
            }
        });

        // Enhanced Currency Breakdown Pie Chart
        const currencyCtx = document.getElementById('currencyBreakdownChart').getContext('2d');

        // Prepare chart data
        const currencyData = [@Html.Raw(string.Join(",", Model.CurrencyBreakdown.Select(c => c.TotalVolume)))];
        const currencyLabels = [@Html.Raw(string.Join(",", Model.CurrencyBreakdown.Select(c => $"'{c.CurrencyCode}'")))];
        const backgroundColors = [
                @foreach (var currency in Model.CurrencyBreakdown)
            {
                var color = currency.CurrencyCode?.ToUpper() switch
                {
                                "USD" => "#007bff",
                                "EUR" => "#17a2b8",
                                "AED" => "#28a745",
                                "OMR" => "#ffc107",
                                "TRY" => "#dc3545",
                    _ => "#6c757d"
                };
                        @Html.Raw($"\"{color}\"")@if (currency != Model.CurrencyBreakdown.Last()) {
                        @Html.Raw(",")
                    }
        }
        ];
    const borderColors = [
            @foreach (var currency in Model.CurrencyBreakdown)
        {
            var color = currency.CurrencyCode?.ToUpper() switch
            {
                            "USD" => "#0056b3",
                            "EUR" => "#117a8b",
                            "AED" => "#1e7e34",
                            "OMR" => "#d39e00",
                            "TRY" => "#bd2130",
                _ => "#545b62"
            };
                    @Html.Raw($"\"{color}\"")@if (currency != Model.CurrencyBreakdown.Last()) {
                    @Html.Raw(",")
                }
                }
        ];

    new Chart(currencyCtx, {
        type: 'doughnut',
        data: {
            labels: currencyLabels,
            datasets: [{
                data: currencyData,
                backgroundColor: backgroundColors,
                borderColor: borderColors,
                borderWidth: 3,
                hoverBorderWidth: 5,
                hoverOffset: 10
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom',
                    labels: {
                        padding: 20,
                        usePointStyle: true,
                        font: {
                            size: 12
                        }
                    }
                },
                tooltip: {
                    backgroundColor: 'rgba(0, 0, 0, 0.8)',
                    titleColor: '#ffffff',
                    bodyColor: '#ffffff',
                    cornerRadius: 8,
                    callbacks: {
                        label: function (context) {
                            const total = context.dataset.data.reduce((a, b) => a + b, 0);
                            const percentage = ((context.parsed / total) * 100).toFixed(1);
                            const value = context.parsed.toLocaleString('fa-IR');
                            return context.label + ': ' + value + ' (' + percentage + '%)';
                        }
                    }
                }
            },
            cutout: '60%',
            animation: {
                animateScale: true,
                animateRotate: true
            }
        }
    });

    // Add smooth animations to cards
    document.addEventListener('DOMContentLoaded', function () {
        const cards = document.querySelectorAll('.card');
        cards.forEach((card, index) => {
            card.style.opacity = '0';
            card.style.transform = 'translateY(20px)';
            setTimeout(() => {
                card.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
            }, index * 100);
        });
    });
</script>
}
