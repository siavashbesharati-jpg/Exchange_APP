@{
    ViewData["Title"] = "گزارشات صندوق ها";
}

<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex align-items-center justify-content-between">
                <h2><i class="fas fa-coins text-info me-2"></i>گزارشات صندوق ها</h2>
                <div class="d-flex gap-2">
                    <button class="btn btn-warning" onclick="showManualAdjustmentModal()" id="manualAdjustmentBtn" disabled>
                        <i class="fas fa-edit me-1"></i>تعدیل دستی
                    </button>
                    <a href="@Url.Action("Index", "Reports")" class="btn btn-outline-secondary">
                        <i class="fas fa-arrow-right me-1"></i>بازگشت
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm border-3">
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-2">
                            <label class="form-label">از تاریخ</label>
                            <div class="input-group">
                                <input type="date" class="form-control" id="fromDate">
                                <button type="button" class="btn btn-outline-secondary" onclick="clearDate('fromDate')"
                                    title="پاک کردن">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">تا تاریخ</label>
                            <div class="input-group">
                                <input type="date" class="form-control" id="toDate">
                                <button type="button" class="btn btn-outline-secondary" onclick="clearDate('toDate')"
                                    title="پاک کردن">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">ارز <span class="text-danger">*</span></label>
                            <select class="form-select" id="currencySelect">
                                <option value="">انتخاب ارز</option>
                            </select>
                        </div>
                        <div class="col-md-1">
                            <label class="form-label">&nbsp;</label>
                            <button class="btn btn-primary w-100" onclick="loadData()">
                                <i class="fas fa-search me-1"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Content -->
    <div class="row">
        <div class="col-12">
            <!-- Pool Timeline Content -->
            <div class="card shadow-sm border-3">
                <div class="card-header bg-gradient-primary text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="fas fa-history me-2"></i>
                            تاریخچه مالی صندوق ها
                        </h5>
                        <div class="d-flex gap-2">
                            <button class="btn btn-light btn-sm" onclick="exportToExcel()">
                                <i class="fas fa-file-excel me-1"></i>دریافت اکسل 
                            </button>
                            <button class="btn btn-success btn-sm" onclick="printTimeline()">
                                <i class="fas fa-print me-1"></i>چاپ
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body p-0">
                    <!-- Pool Info Header -->
                    <div id="poolInfoHeader" class="bg-light p-3 border-bottom" style="display: none;">
                        <div class="row">
                            <div class="col-md-6">
                                <h6 class="mb-1">اطلاعات صندوق</h6>
                                <p class="mb-0" id="poolInfoText">-</p>
                            </div>
                            <div class="col-md-6 text-center">
                                <h6 class="mb-1">بازه زمانی گزارش</h6>
                                <p class="mb-0" id="reportPeriodText">-</p>
                            </div>
                        </div>
                    </div>

                    <!-- Balance Summary -->
                    <div id="balanceSummarySection" class="p-3 border-bottom bg-light" style="display: none;">
                        <h6 class="mb-3 text-center">
                            <i class="fas fa-wallet text-primary me-2"></i>
                            موجودی‌های فعلی
                        </h6>
                        <div id="balanceSummaryContent" class="row">
                            <!-- Balance cards will be inserted here -->
                        </div>
                    </div>

                    <!-- Timeline Table -->
                    <div class="table-responsive">
                        <table class="table table-hover mb-0" id="timelineTable">
                            <thead class="table-dark sticky-top">
                                <tr class="text-center">
                                    <th width="10%">تاریخ</th>
                                    <th width="12%">نوع</th>
                                    <th width="8%">ارز</th>
                                    <th width="12%">مقدار</th>
                                    <th width="12%">موجودی</th>
                                    <th width="30%">توضیحات</th>
                                    <th width="16%">عملیات</th>
                                </tr>
                            </thead>
                            <tbody id="timelineTableBody">
                                <tr>
                                    <td colspan="6" class="text-center py-5 text-muted">
                                        <i class="fas fa-coins fa-2x mb-2"></i>
                                        <br>لطفا برای دریافت تاریخچه مالی یک ارز را انتخاب کنید
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- Timeline Pagination -->
                    <div class="p-3 border-top bg-light">
                        <nav id="timelinePagination" class="d-flex justify-content-center">
                            <!-- Pagination will be inserted here -->
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Manual Adjustment Modal -->
<div class="modal fade" id="manualAdjustmentModal" tabindex="-1" aria-labelledby="manualAdjustmentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title" id="manualAdjustmentModalLabel">
                    <i class="fas fa-edit me-2"></i>تعدیل دستی صندوق ارزی
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="manualAdjustmentForm">
                <div class="modal-body">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label for="adjustmentAmount" class="form-label">مبلغ تعدیل <span class="text-danger">*</span></label>
                            <input type="number" step="0.01" class="form-control" id="adjustmentAmount" required>
                            <div class="form-text">مقدار مثبت برای افزایش و منفی برای کاهش موجودی</div>
                        </div>
                        <div class="col-md-6">
                            <label for="adjustmentDate" class="form-label">تاریخ تراکنش <span class="text-danger">*</span></label>
                            <input type="datetime-local" class="form-control" id="adjustmentDate" required>
                        </div>
                        <div class="col-12">
                            <label for="adjustmentReason" class="form-label">دلیل تعدیل <span class="text-danger">*</span></label>
                            <textarea class="form-control" id="adjustmentReason" rows="3" required placeholder="لطفاً دلیل تعدیل را توضیح دهید..."></textarea>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">انصراف</button>
                    <button type="submit" class="btn btn-warning">
                        <i class="fas fa-save me-1"></i>ثبت تعدیل
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    let currentPage = { timeline: 1 };
    let pageSize = 10;
    let currentTimeline = null;

    document.addEventListener('DOMContentLoaded', function () {
        // Load currencies for filter
        loadCurrencies();

        // Initialize empty tables
        showEmptyState();

        // Currency filter change event
        document.getElementById('currencySelect').addEventListener('change', function () {
            loadDataForActiveTab();
        });

        // Date filter change event
        document.getElementById('fromDate').addEventListener('change', function () {
            loadDataForActiveTab();
        });
        document.getElementById('toDate').addEventListener('change', function () {
            loadDataForActiveTab();
        });
    });

    function loadCurrencies() {
        fetch('@Url.Action("GetCurrencies", "Api")')
            .then(response => {
                return response.json();
            })
            .then(currencies => {
                const select = document.getElementById('currencySelect');
                select.innerHTML = '<option value="">انتخاب ارز</option>';

                if (Array.isArray(currencies)) {
                    currencies.forEach(currency => {
                        select.innerHTML += `<option value="${currency.code}">${currency.name} (${currency.code})</option>`;
                    });
                } else {
                }
            })
            .catch(error => {
                const select = document.getElementById('currencySelect');
                select.innerHTML = '<option value="">خطا در بارگذاری ارزها</option>';
            });
    }

    function loadData() {
        loadDataForActiveTab();
    }

    function loadDataForActiveTab() {
        // Reset pagination to page 1 when filters change
        currentPage.timeline = 1;
        loadPoolTimelineData(1);
    }

    function showEmptyState() {
        // Show empty state for timeline
        document.getElementById('timelineTableBody').innerHTML =
            '<tr><td colspan="6" class="text-center py-5 text-muted"><i class="fas fa-coins fa-2x mb-2"></i><br>لطفا برای دریافت تاریخچه مالی یک ارز را انتخاب کنید</td></tr>';
    }

    function clearDate(inputId) {
        document.getElementById(inputId).value = '';
        // Reset pagination to page 1 when clearing dates
        currentPage.timeline = 1;
        loadDataForActiveTab();
    }

    function loadPoolTimelineData(page = 1) {
        const currencyCode = document.getElementById('currencySelect').value;
        if (!currencyCode) {
            showTimelineEmptyState();
            hideTimelineSections();
            return;
        }

        const fromDate = document.getElementById('fromDate').value || null;
        const toDate = document.getElementById('toDate').value || null;

        // Show loading state
        showTimelineLoading();
        showTimelineSections();

        // Update current page
        currentPage.timeline = page;

        const params = new URLSearchParams({
            currencyCode: currencyCode,
            fromDate: fromDate || '',
            toDate: toDate || '',
            page: page,
            pageSize: pageSize
        });

        fetch(`@Url.Action("GetPoolTimeline", "Reports")?${params}`)
            .then(response => response.json())
            .then(function (response) {
                if (response.success) {
                    currentTimeline = response.timeline;
                    renderPoolStyleTimeline(response.timeline);
                    updatePoolInfo(response.timeline, currencyCode);
                    
                    // Clear pagination since API doesn't support it yet
                    document.getElementById('timelinePagination').innerHTML = '';
                } else {
                    showTimelineError('خطا در بارگذاری تاریخچه: ' + (response.error || 'خطای نامشخص'));
                }
            })
            .catch(function (error) {
                console.error('Error loading pool timeline:', error);
                showTimelineError('خطا در ارتباط با سرور: ' + error.message);
            });
    }

    function renderPoolStyleTimeline(timeline) {
        const tbody = document.getElementById('timelineTableBody');

        // DEBUG: Check the order received in JavaScript
        console.log('=== JavaScript Pool Timeline Order ===');
        for (let i = 0; i < Math.min(5, timeline.length); i++) {
            console.log(`${i+1}. Date: ${timeline[i].date}, Amount: ${timeline[i].amount}`);
        }
        console.log('================================');

        if (!timeline || timeline.length === 0) {
            tbody.innerHTML = `
            <tr>
                <td colspan="7" class="text-center py-5 text-muted">
                    <i class="fas fa-info-circle fa-2x mb-2"></i>
                    <br>تراکنشی در بازه زمانی انتخاب شده یافت نشد
                </td>
            </tr>
        `;
            return;
        }

        let timelineHtml = '';

        // Render timeline items directly
        timeline.forEach(item => {
            let typeText = 'معامله';
            let transactionId = item.referenceId;
            let clickHandler = '';
            let cursorStyle = 'cursor: default;';

            // Determine transaction type based on the transaction type string
            if (item.transactionType === 'OrderSell' || item.transactionType === 'OrderBuy') {
                typeText = 'معامله';
                if (item.canNavigate && transactionId) {
                    clickHandler = `onclick="goToOrderDetail(${transactionId})"`;
                    cursorStyle = 'cursor: pointer;';
                }
            } else if (item.transactionType === 'Document') {
                typeText = 'سند';
                if (item.canNavigate && transactionId) {
                    clickHandler = `onclick="goToDocumentDetail(${transactionId})"`;
                    cursorStyle = 'cursor: pointer;';
                }
            } else if (item.transactionType === 'ManualEdit') {
                typeText = 'تعدیل دستی';
            }

            let actionsHtml = '';
            if (item.transactionType === 'ManualEdit') {
                actionsHtml = `
                    <button class="btn btn-sm btn-outline-danger" onclick="deleteManualPoolTransaction(${item.id})" title="حذف تعدیل دستی">
                        <i class="fas fa-trash"></i>
                    </button>
                `;
            }

            timelineHtml += `
            <tr class="transaction-row" style="${cursorStyle}" ${clickHandler}>
                <td class="text-center">${item.date}</td>
                <td class="text-center">
                    ${item.canNavigate && transactionId ?
                    `<a href="#" class="text-decoration-none">${typeText} #${transactionId}</a>` :
                    `<span class="badge bg-info">${typeText}</span>`
                }
                </td>
                <td class="text-center">${item.currencyCode}</td>
                <td class="text-center ltr-direction ${item.amount >= 0 ? 'text-success' : 'text-danger'}">${formatNumber(item.amount)}</td>
                <td class="text-center ltr-direction fw-bold">${formatNumber(item.balance)}</td>
                <td class="text-start">
                    <small class="text-muted">${item.description || '-'}</small>
                </td>
                <td class="text-center">${actionsHtml}</td>
            </tr>
            `;
        });

        tbody.innerHTML = timelineHtml;
        
        // Hide balance summary for now since we don't have that data structure
        hideBalanceSummary();
    }

    function hideBalanceSummary() {
        const section = document.getElementById('balanceSummarySection');
        if (section) {
            section.style.display = 'none';
        }
    }

    function updatePoolInfo(timeline, currencyCode) {
        const currencySelect = document.getElementById('currencySelect');
        const currencyName = currencySelect.options[currencySelect.selectedIndex]?.text || 'نامشخص';
        document.getElementById('poolInfoText').textContent = `صندوق ${currencyName}`;
        
        const fromDateValue = document.getElementById('fromDate').value;
        const toDateValue = document.getElementById('toDate').value;
        const fromDate = fromDateValue ? new Date(fromDateValue).toLocaleDateString('en-GB') : 'ابتدای زمان';
        const toDate = toDateValue ? new Date(toDateValue).toLocaleDateString('en-GB') : 'انتهای زمان';
        document.getElementById('reportPeriodText').textContent = `${fromDate} تا ${toDate}`;
    }

    function renderBalanceSummary(balances) {
        const container = document.getElementById('balanceSummaryContent');

        if (!balances || Object.keys(balances).length === 0) {
            container.innerHTML = '<div class="col-12 text-center text-muted">موجودی‌ای یافت نشد</div>';
            return;
        }

        let balanceHtml = '';
        Object.entries(balances).forEach(([currency, amount]) => {
            const isPositive = amount >= 0;
            const colorClass = isPositive ? 'success' : 'danger';
            const iconClass = isPositive ? 'fa-arrow-up' : 'fa-arrow-down';

            balanceHtml += `
            <div class="col-md-3 mb-2">
                <div class="d-flex align-items-center p-2 bg-white rounded shadow-sm">
                    <div class="me-2">
                        <i class="fas ${iconClass} text-${colorClass}"></i>
                    </div>
                    <div class="flex-grow-1">
                        <div class="text-center">
                            <span class="badge bg-primary mb-1">${currency}</span>
                        </div>
                        <h6 class="mb-0 text-${colorClass} text-center ltr-direction">
                            ${formatCurrency(amount, currency)}
                        </h6>
                        <small class="text-muted d-block text-center">${isPositive ? 'بستانکار' : 'بدهکار'}</small>
                    </div>
                </div>
            </div>
        `;
        });

        container.innerHTML = balanceHtml;
    }

    function showTimelineEmptyState() {
        document.getElementById('timelineTableBody').innerHTML = `
        <tr>
            <td colspan="6" class="text-center py-5 text-muted">
                <i class="fas fa-coins fa-2x mb-2"></i>
                <br>لطفا برای دریافت تاریخچه مالی یک ارز را انتخاب کنید
            </td>
        </tr>
    `;
    }

    function showTimelineLoading() {
        document.getElementById('timelineTableBody').innerHTML = `
        <tr>
            <td colspan="6" class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">در حال بارگذاری...</span>
                </div>
                <br><br>در حال بارگذاری تاریخچه مالی...
            </td>
        </tr>
    `;
    }

    function showTimelineError(message) {
        document.getElementById('timelineTableBody').innerHTML = `
        <tr>
            <td colspan="6" class="text-center py-5 text-danger">
                <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
                <br>${message}
            </td>
        </tr>
    `;
    }

    function showTimelineSections() {
        document.getElementById('poolInfoHeader').style.display = 'block';
        document.getElementById('balanceSummarySection').style.display = 'block';
    }

    function hideTimelineSections() {
        document.getElementById('poolInfoHeader').style.display = 'none';
        document.getElementById('balanceSummarySection').style.display = 'none';
    }

    function exportToExcel() {
        const currencyCode = document.getElementById('currencySelect').value;
        if (!currencyCode) {
            alert('لطفاً ابتدا ارز را انتخاب کنید');
            return;
        }

        const fromDate = document.getElementById('fromDate').value || null;
        const toDate = document.getElementById('toDate').value || null;

        // For now, show success message - Excel export can be implemented later
        alert('دریافت تاریخچه مالی به فرمت اکسل در ادامه پیاده‌سازی خواهد شد');
    }

    function printTimeline() {
        if (!currentTimeline) {
            alert('ابتدا تاریخچه مالی را بارگذاری کنید');
            return;
        }

        const currencySelect = document.getElementById('currencySelect');
        const currencyCode = currencySelect.value;
        if (!currencyCode) {
            alert('لطفاً ابتدا ارز را انتخاب کنید');
            return;
        }

        const fromDate = document.getElementById('fromDate').value || '';
        const toDate = document.getElementById('toDate').value || '';

        // Build URL with query parameters
        const params = new URLSearchParams({
            currencyCode: currencyCode,
            fromDate: fromDate,
            toDate: toDate
        });

        // Open pool report page in new window
        const url = '@Url.Action("PrintPoolReport", "Reports")?' + params.toString();
        window.open(url, '_blank', 'width=800,height=600,scrollbars=yes,resizable=yes');
    }

    // Navigation functions for clickable rows
    function goToOrderDetail(orderId) {
        window.open(`/Orders/Details/${orderId}`, '_blank');
    }

    function goToDocumentDetail(documentId) {
        window.open(`/AccountingDocuments/Details/${documentId}`, '_blank');
    }

    function updatePagination(containerId, totalPages, currentPageNum, loadFunction) {
        const container = document.getElementById(containerId);
        if (totalPages <= 1) {
            container.innerHTML = '';
            return;
        }

        let pagination = '<ul class="pagination justify-content-center">';

        // Previous button
        if (currentPageNum > 1) {
            pagination += `<li class="page-item"><a class="page-link" href="#" onclick="loadPoolTimelineData(${currentPageNum - 1}); return false;">قبلی</a></li>`;
        }

        // Page numbers
        for (let i = Math.max(1, currentPageNum - 2); i <= Math.min(totalPages, currentPageNum + 2); i++) {
            const active = i === currentPageNum ? 'active' : '';
            pagination += `<li class="page-item ${active}"><a class="page-link" href="#" onclick="loadPoolTimelineData(${i}); return false;">${i}</a></li>`;
        }

        // Next button
        if (currentPageNum < totalPages) {
            pagination += `<li class="page-item"><a class="page-link" href="#" onclick="loadPoolTimelineData(${currentPageNum + 1}); return false;">بعدی</a></li>`;
        }

        pagination += '</ul>';
        container.innerHTML = pagination;
    }

    function formatDate(dateString) {
        if (!dateString) return '-';
        const date = new Date(dateString);
        return date.toLocaleDateString('en-GB'); // Georgian format: DD/MM/YYYY
    }

    // Utility functions for formatting
    function formatNumber(amount) {
        if (!amount && amount !== 0) return '-';
        return new Intl.NumberFormat('fa-IR').format(amount);
    }

    function formatCurrency(amount, currencyCode = 'IRR') {
        if (!amount && amount !== 0) return '-';
        const formattedAmount = formatNumber(amount);
        return `${formattedAmount} ${currencyCode || ''}`;
    }

    // Manual Adjustment Functions
    function showManualAdjustmentModal() {
        const currencyCode = document.getElementById('currencySelect').value;
        if (!currencyCode) {
            alert('لطفاً ابتدا ارز را انتخاب کنید');
            return;
        }

        // Set current date/time as default
        const now = new Date();
        const localDateTime = new Date(now.getTime() - now.getTimezoneOffset() * 60000);
        document.getElementById('adjustmentDate').value = localDateTime.toISOString().slice(0, 16);

        // Reset form
        document.getElementById('manualAdjustmentForm').reset();

        // Show modal
        const modal = new bootstrap.Modal(document.getElementById('manualAdjustmentModal'));
        modal.show();
    }

    // Handle manual adjustment form submission
    document.getElementById('manualAdjustmentForm').addEventListener('submit', function(e) {
        e.preventDefault();

        const currencyCode = document.getElementById('currencySelect').value;
        const amount = parseFloat(document.getElementById('adjustmentAmount').value);
        const transactionDate = document.getElementById('adjustmentDate').value;
        const reason = document.getElementById('adjustmentReason').value.trim();

        if (!currencyCode || !amount || !transactionDate || !reason) {
            alert('لطفاً تمام فیلدهای مورد نیاز را پر کنید');
            return;
        }

        // Show loading state
        const submitBtn = this.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>در حال ثبت...';

        // Prepare form data
        const formData = new FormData();
        formData.append('currencyCode', currencyCode);
        formData.append('amount', amount);
        formData.append('reason', reason);
        formData.append('transactionDate', transactionDate);

        // Send AJAX request
        fetch('@Url.Action("CreateManualPoolBalanceHistory", "Reports")', {
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('manualAdjustmentModal'));
                modal.hide();

                // Show success message
                alert('تعدیل دستی با موفقیت ثبت شد و موجودی‌ها بازمحاسبه شدند');

                // Reload timeline data
                loadDataForActiveTab();
            } else {
                alert('خطا در ثبت تعدیل دستی: ' + (data.error || 'خطای نامشخص'));
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('خطا در ارتباط با سرور: ' + error.message);
        })
        .finally(() => {
            // Reset button state
            submitBtn.disabled = false;
            submitBtn.innerHTML = originalText;
        });
    });

    // Delete manual pool transaction
    function deleteManualPoolTransaction(transactionId) {
        if (!confirm('آیا از حذف این تعدیل دستی اطمینان دارید؟ این عملیات قابل برگرداندن نیست.')) {
            return;
        }

        // Show loading state
        const button = event.target.closest('button');
        const originalHtml = button.innerHTML;
        button.disabled = true;
        button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';

        // Prepare form data
        const formData = new FormData();
        formData.append('transactionId', transactionId);

        // Send AJAX request
        fetch('@Url.Action("DeleteManualPoolBalanceHistory", "Reports")', {
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Show success message
                alert('تعدیل دستی با موفقیت حذف شد و موجودی‌ها بازمحاسبه شدند');

                // Reload timeline data
                loadDataForActiveTab();
            } else {
                alert('خطا در حذف تعدیل دستی: ' + (data.error || 'خطای نامشخص'));
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('خطا در ارتباط با سرور: ' + error.message);
        })
        .finally(() => {
            // Reset button state
            button.disabled = false;
            button.innerHTML = originalHtml;
        });
    }

    // Enable/disable manual adjustment button based on currency selection
    document.getElementById('currencySelect').addEventListener('change', function() {
        const manualBtn = document.getElementById('manualAdjustmentBtn');
        manualBtn.disabled = !this.value;
    });
</script>

<style>
    .card {
        border-radius: 15px;
        border: 3px solid #e9ecef;
    }

    .card:hover {
        border-color: #e9ecef;
        transition: border-color 0.3s ease;
    }

    .table th {
        border-top: none;
        font-weight: 600;
        background-color: #343a40;
        color: white;
    }

    /* Center align all table content by default */
    .table td,
    .table th {
        text-align: center;
        vertical-align: middle;
    }

    .badge {
        font-size: 0.75rem;
        padding: 0.375em 0.75em;
    }

    .page-link {
        border-radius: 8px;
        margin: 0 2px;
        border: 2px solid #dee2e6;
    }

    .page-item.active .page-link {
        background-color: #6c757d;
        border-color: #6c757d;
    }

    .btn {
        border-radius: 8px;
        border-width: 2px;
    }

    .form-control,
    .form-select {
        border-radius: 8px;
        border: 2px solid #ced4da;
    }

    .form-control:focus,
    .form-select:focus {
        border-color: #6c757d;
        box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.25);
    }

    /* Currency styling consistency */
    .text-end {
        text-align: left !important;
    }

    /* LTR direction for numbers */
    .ltr-direction {
        direction: ltr;
    }

    /* RTL adjustments */
    .me-1 {
        margin-left: 0.25rem !important;
        margin-right: 0 !important;
    }

    .me-2 {
        margin-left: 0.5rem !important;
        margin-right: 0 !important;
    }

    /* Clickable elements */
    a:not(.btn):not(.page-link) {
        color: #007bff;
        text-decoration: none;
    }

    a:not(.btn):not(.page-link):hover {
        color: #0056b3;
        text-decoration: underline;
    }

    /* Loading states */
    .spinner-border {
        width: 1.5rem;
        height: 1.5rem;
    }

    /* Mobile responsiveness */
    @@media (max-width: 768px) {
        .table-responsive {
            font-size: 0.875rem;
        }
    }

    /* Timeline Bank Style Enhancements */
    .transaction-row:hover {
        background-color: #f8f9fa;
        transition: background-color 0.2s ease;
    }

    .table-info td {
        background-color: #d1ecf1 !important;
        border-color: #b8daff !important;
    }

    .table-light td {
        background-color: #f8f9fa !important;
    }

    .table-warning td {
        background-color: #fff3cd !important;
        border-color: #ffeaa7 !important;
        font-weight: 500;
    }

    .bg-gradient-primary {
        background: linear-gradient(87deg, #5e72e4 0, #825ee4 100%) !important;
    }

    .bg-gradient-success {
        background: linear-gradient(87deg, #2dce89 0, #2dcecc 100%) !important;
    }

    .bg-gradient-info {
        background: linear-gradient(87deg, #11cdef 0, #1171ef 100%) !important;
    }

    .bg-gradient-warning {
        background: linear-gradient(87deg, #fb6340 0, #fbb140 100%) !important;
    }

    #timelineTable thead th {
        position: sticky;
        top: 0;
        z-index: 10;
        background-color: #343a40 !important;
    }

    /* Print styles for timeline */
    @@media print {
        .card-header,
        .btn {
            display: none !important;
        }

        .table {
            font-size: 12px;
        }

        .table th,
        .table td {
            padding: 4px;
            border: 1px solid #000;
        }
    }
</style>