@model List<ForexExchange.Models.CurrencyPool>
@using ForexExchange.Services

<div class="card mb-4 shadow-sm">
    <div class="card-header bg-gradient-primary text-white d-flex justify-content-between align-items-center">
        <div>
            <i class="bi bi-bank2 me-2"></i>
            <strong>ÿßÿ≥ÿ™ÿÆÿ± ÿßÿ±ÿ≤€å - Currency Pool</strong>
        </div>
        <div class="d-flex align-items-center">
            <small id="pool-last-update" class="me-3">
                <i class="bi bi-clock-history me-1"></i>
                @DateTime.Now.ToString("HH:mm:ss")
            </small>
            <div class="btn-group btn-group-sm">
                <button type="button" class="btn btn-sm btn-outline-light" onclick="refreshPoolWidget()" title="ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿØÿ≥ÿ™€å">
                    <i class="bi bi-arrow-clockwise"></i>
                </button>
                <button type="button" class="btn btn-sm btn-outline-light" id="auto-refresh-toggle" onclick="toggleAutoRefresh()" title="ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿÆŸàÿØ⁄©ÿßÿ±">
                    <i class="bi bi-play-circle"></i>
                </button>
            </div>
        </div>
    </div>
    <div class="card-body">
        @if (Model != null && Model.Any())
        {
            <div class="row g-3">
                @foreach (var pool in Model)
                {
                    var riskColorClass = pool.RiskLevel switch
                    {
                        ForexExchange.Models.PoolRiskLevel.Low => "success",
                        ForexExchange.Models.PoolRiskLevel.Medium => "warning",
                        ForexExchange.Models.PoolRiskLevel.High => "danger",
                        ForexExchange.Models.PoolRiskLevel.Critical => "dark",
                        _ => "secondary"
                    };

                    var balanceColorClass = pool.Balance >= 0 ? "success" : "danger";
                    var balanceIcon = pool.Balance >= 0 ? "bi-graph-up-arrow" : "bi-graph-down-arrow";
                    var balancePercent = pool.Balance > 0 ? Math.Min(100, (pool.Balance / (pool.TotalBought + pool.TotalSold)) * 100) : 0;

                    <div class="col-xl-3 col-lg-4 col-md-6 mb-3">
                        <div class="card h-100 border-0 shadow-sm pool-card" data-currency="@pool.Currency?.Code">
                            <!-- Currency Header -->
                            <div class="card-header bg-light d-flex justify-content-between align-items-center">
                                <div class="d-flex align-items-center">
                                    <span class="currency-flag me-2" style="font-size: 1.5em;">
                                        @{
                                            var flagEmoji = pool.Currency?.Symbol switch
                                            {
                                                "IRR" or "TMN" => "üáÆüá∑",
                                                "USD" => "üá∫üá∏",
                                                "EUR" => "üá™üá∫",
                                                "AED" => "üá¶üá™",
                                                "OMR" => "üá¥üá≤",
                                                "TRY" => "üáπüá∑",
                                                _ => "üí±"
                                            };
                                        }
                                        @flagEmoji
                                    </span>
                                    <div>
                                        <h6 class="mb-0 fw-bold">@pool.Currency?.PersianName</h6>
                                        <small class="text-muted">@pool.Currency?.Code</small>
                                    </div>
                                </div>
                                <span class="badge bg-@riskColorClass risk-badge">
                                    @switch (pool.RiskLevel)
                                    {
                                        case ForexExchange.Models.PoolRiskLevel.Low: <text><i class="bi bi-shield-check"></i> ⁄©ŸÖ</text> break;
                                        case ForexExchange.Models.PoolRiskLevel.Medium: <text><i class="bi bi-shield-exclamation"></i> ŸÖÿ™Ÿàÿ≥ÿ∑</text> break;
                                        case ForexExchange.Models.PoolRiskLevel.High: <text><i class="bi bi-shield-x"></i> ÿ®ÿßŸÑÿß</text> break;
                                        case ForexExchange.Models.PoolRiskLevel.Critical: <text><i class="bi bi-exclamation-triangle-fill"></i> ÿ®ÿ≠ÿ±ÿßŸÜ€å</text> break;
                                        default: <text>ŸÜÿßŸÖÿ¥ÿÆÿµ</text> break;
                                    }
                                </span>
                            </div>

                            <!-- Balance Section -->
                            <div class="card-body text-center">
                                <div class="balance-display mb-3">
                                    <div class="balance-amount">
                                        <h4 class="text-@balanceColorClass mb-1 fw-bold">
                                            <i class="bi @balanceIcon me-1"></i>
                                            @pool.Balance.ToString("N0")
                                        </h4>
                                        <small class="text-muted">ŸÖŸàÿ¨ŸàÿØ€å ŸÅÿπŸÑ€å (@pool.Currency?.Symbol)</small>
                                    </div>

                                    <!-- Balance Progress Bar -->
                                    <div class="progress mt-2" style="height: 6px;">
                                        <div class="progress-bar bg-@balanceColorClass"
                                             role="progressbar"
                                             style="width: @balancePercent%"
                                             aria-valuenow="@balancePercent"
                                             aria-valuemin="0"
                                             aria-valuemax="100">
                                        </div>
                                    </div>
                                </div>

                                <!-- Quick Stats -->
                                <div class="row g-2 mb-3">
                                    <div class="col-6">
                                        <div class="stat-card bg-success bg-opacity-10 p-2 rounded">
                                            <div class="text-success fw-bold small">@pool.TotalBought.ToString("N0")</div>
                                            <div class="text-muted tiny">ÿÆÿ±€åÿØ ⁄©ŸÑ</div>
                                        </div>
                                    </div>
                                    <div class="col-6">
                                        <div class="stat-card bg-danger bg-opacity-10 p-2 rounded">
                                            <div class="text-danger fw-bold small">@pool.TotalSold.ToString("N0")</div>
                                            <div class="text-muted tiny">ŸÅÿ±Ÿàÿ¥ ⁄©ŸÑ</div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Rate Information -->
                                @if (pool.AverageBuyRate.HasValue || pool.AverageSellRate.HasValue)
                                {
                                    <div class="rate-info mb-2">
                                        <small class="text-muted">
                                            @if (pool.AverageBuyRate.HasValue)
                                            {
                                                <span class="badge bg-success bg-opacity-25 text-success me-1">
                                                    <i class="bi bi-arrow-up"></i> @pool.AverageBuyRate.Value.ToString("N0")
                                                </span>
                                            }
                                            @if (pool.AverageSellRate.HasValue)
                                            {
                                                <span class="badge bg-danger bg-opacity-25 text-danger">
                                                    <i class="bi bi-arrow-down"></i> @pool.AverageSellRate.Value.ToString("N0")
                                                </span>
                                            }
                                        </small>
                                    </div>
                                }

                                <!-- Quick Actions -->
                                <div class="quick-actions">
                                    <div class="btn-group btn-group-sm w-100" role="group">
                                        <a href="@Url.Action("Create", "Orders")" class="btn btn-outline-primary btn-sm" title="ŸÖÿπÿßŸÖŸÑŸá ÿ¨ÿØ€åÿØ">
                                            <i class="bi bi-plus-circle"></i>
                                        </a>
                                        <a href="@Url.Action("Index", "ExchangeRates")" class="btn btn-outline-info btn-sm" title="ŸÜÿ±ÿÆ‚ÄåŸáÿß">
                                            <i class="bi bi-graph-up"></i>
                                        </a>
                                        <button type="button" class="btn btn-outline-secondary btn-sm" onclick="showPoolDetails('@pool.Currency?.Code')" title="ÿ¨ÿ≤ÿ¶€åÿßÿ™">
                                            <i class="bi bi-info-circle"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>

                            <!-- Footer with Last Update -->
                            <div class="card-footer bg-light text-center">
                                <small class="text-muted">
                                    <i class="bi bi-clock me-1"></i>
                                    @pool.LastUpdated.ToString("dd/MM HH:mm")
                                </small>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Enhanced Summary Dashboard -->
            <div class="row mt-4">
                <div class="col-12">
                    <div class="card bg-light">
                        <div class="card-body">
                            <h6 class="card-title mb-3">
                                <i class="bi bi-bar-chart-line me-2"></i>
                                ÿÆŸÑÿßÿµŸá Ÿàÿ∂ÿπ€åÿ™ ÿßÿ≥ÿ™ÿÆÿ±Ÿáÿß
                            </h6>
                            <div class="row text-center g-3">
                                <div class="col-md-3">
                                    <div class="summary-item">
                                        <div class="summary-value text-primary">@Model.Count</div>
                                        <div class="summary-label">ÿ™ÿπÿØÿßÿØ ÿßÿ±ÿ≤Ÿáÿß</div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="summary-item">
                                        <div class="summary-value text-success">@Model.Count(p => p.Balance > 0)</div>
                                        <div class="summary-label">ŸÖŸàÿ¨ŸàÿØ€å ŸÖÿ´ÿ®ÿ™</div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="summary-item">
                                        <div class="summary-value text-danger">@Model.Count(p => p.Balance < 0)</div>
                                        <div class="summary-label">ŸÖŸàÿ¨ŸàÿØ€å ŸÖŸÜŸÅ€å</div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="summary-item">
                                        <div class="summary-value text-warning">@Model.Count(p => p.RiskLevel >= ForexExchange.Models.PoolRiskLevel.High)</div>
                                        <div class="summary-label">ŸÜ€åÿßÿ≤ ÿ®Ÿá ÿ™Ÿàÿ¨Ÿá</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <div class="empty-state">
                    <i class="bi bi-bank2 text-muted" style="font-size: 3rem;"></i>
                    <h5 class="text-muted mt-3">ÿßÿ≥ÿ™ÿÆÿ± ÿßÿ±ÿ≤€å ÿÆÿßŸÑ€å ÿßÿ≥ÿ™</h5>
                    <p class="text-muted">ÿßÿ≥ÿ™ÿÆÿ±Ÿáÿß€å ÿßÿ±ÿ≤€å Ÿæÿ≥ ÿßÿ≤ ÿßŸàŸÑ€åŸÜ ÿ™ÿ±ÿß⁄©ŸÜÿ¥ ÿß€åÿ¨ÿßÿØ ŸÖ€å‚Äåÿ¥ŸàŸÜÿØ</p>
                    <a href="@Url.Action("Create", "Orders")" class="btn btn-primary">
                        <i class="bi bi-plus-circle me-1"></i>
                        ÿß€åÿ¨ÿßÿØ ÿßŸàŸÑ€åŸÜ ŸÖÿπÿßŸÖŸÑŸá
                    </a>
                </div>
            </div>
        }
    </div>
</div>

<style>
@@keyframes pulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.05); }
}

@@keyframes spin {
    to { transform: rotate(360deg); }
}

@@media (max-width: 768px) {
    .pool-card {
        margin-bottom: 1rem;
    }

    .balance-display .balance-amount h4 {
        font-size: 1.5rem;
    }

    .summary-item {
        padding: 0.75rem;
    }

    .summary-value {
        font-size: 1.25rem;
    }
}

@@media (max-width: 576px) {
    .currency-flag {
        font-size: 1.2em;
    }

    .quick-actions .btn-group {
        flex-direction: column;
        gap: 0.25rem;
    }

    .quick-actions .btn {
        width: 100%;
    }
}
</style>

<script>
let autoRefreshInterval = null;
let isAutoRefreshActive = false;

function refreshPoolWidget() {
    const container = $('#pool-widget-container');
    const refreshBtn = container.find('button[onclick="refreshPoolWidget()"]');

    // Add loading state
    container.addClass('refreshing');
    refreshBtn.prop('disabled', true).html('<i class="bi bi-arrow-clockwise spinning"></i>');

    $.get('/Home/PoolWidget', function(data) {
        container.html(data);
        $('#pool-last-update').html('<i class="bi bi-clock-history me-1"></i>' + new Date().toLocaleTimeString('fa-IR'));

        // Show success feedback
        showNotification('ÿßÿ≥ÿ™ÿÆÿ± ÿßÿ±ÿ≤€å ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿ¥ÿØ', 'success');
    }).fail(function(xhr, status, error) {
        console.error('ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å Ÿà€åÿ¨ÿ™ ÿßÿ≥ÿ™ÿÆÿ±:', error);
        showNotification('ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿßÿ≥ÿ™ÿÆÿ± ÿßÿ±ÿ≤€å', 'error');
    }).always(function() {
        // Remove loading state
        container.removeClass('refreshing');
        refreshBtn.prop('disabled', false).html('<i class="bi bi-arrow-clockwise"></i>');
    });
}

function toggleAutoRefresh() {
    const button = $('#auto-refresh-toggle');
    const icon = button.find('i');

    if (isAutoRefreshActive) {
        clearInterval(autoRefreshInterval);
        isAutoRefreshActive = false;
        icon.removeClass('bi-stop-circle').addClass('bi-play-circle');
        button.removeClass('btn-success').addClass('btn-outline-light');
        button.attr('title', 'ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿÆŸàÿØ⁄©ÿßÿ±');
        showNotification('ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿÆŸàÿØ⁄©ÿßÿ± ŸÖÿ™ŸàŸÇŸÅ ÿ¥ÿØ', 'info');
    } else {
        autoRefreshInterval = setInterval(refreshPoolWidget, 30000); // Refresh every 30 seconds
        isAutoRefreshActive = true;
        icon.removeClass('bi-play-circle').addClass('bi-stop-circle');
        button.removeClass('btn-outline-light').addClass('btn-success');
        button.attr('title', 'ÿ™ŸàŸÇŸÅ ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿ≥ÿßŸÜ€å ÿÆŸàÿØ⁄©ÿßÿ±');
        showNotification('ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿÆŸàÿØ⁄©ÿßÿ± ŸÅÿπÿßŸÑ ÿ¥ÿØ', 'success');
    }
}

function showPoolDetails(currencyCode) {
    // Create a modal or redirect to detailed view
    // For now, we'll show a simple alert with pool information
    const poolCard = $(`.pool-card[data-currency="${currencyCode}"]`);
    const currencyName = poolCard.find('h6').text();
    const balance = poolCard.find('.balance-amount h4').text();
    const riskBadge = poolCard.find('.risk-badge').text();

    // You can replace this with a proper modal implementation
    alert(`ÿ¨ÿ≤ÿ¶€åÿßÿ™ ÿßÿ≥ÿ™ÿÆÿ± ${currencyName} (${currencyCode}):\n\n` +
          `ŸÖŸàÿ¨ŸàÿØ€å: ${balance}\n` +
          `ÿ≥ÿ∑ÿ≠ ÿ±€åÿ≥⁄©: ${riskBadge}\n\n` +
          `ÿ®ÿ±ÿß€å ŸÖÿ¥ÿßŸáÿØŸá ÿ¨ÿ≤ÿ¶€åÿßÿ™ ÿ®€åÿ¥ÿ™ÿ± ÿ®Ÿá ÿµŸÅÿ≠Ÿá ŸÜÿ±ÿÆ‚ÄåŸáÿß€å ÿßÿ±ÿ≤ ŸÖÿ±ÿßÿ¨ÿπŸá ⁄©ŸÜ€åÿØ.`);

    // Alternative: Redirect to exchange rates page with filter
    // window.location.href = `/ExchangeRates/Index?currency=${currencyCode}`;
}

function showNotification(message, type = 'info') {
    // Create a simple notification system
    const notification = $(`
        <div class="alert alert-${type === 'success' ? 'success' : type === 'error' ? 'danger' : 'info'} alert-dismissible fade show position-fixed"
             style="top: 20px; right: 20px; z-index: 9999; min-width: 300px;">
            <i class="bi bi-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-triangle' : 'info-circle'} me-2"></i>
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    `);

    $('body').append(notification);

    // Auto remove after 5 seconds
    setTimeout(() => {
        notification.alert('close');
    }, 5000);
}

// Add spinning animation for refresh icon
const style = document.createElement('style');
style.textContent = `
    .spinning {
        animation: spin 1s linear infinite;
    }
    @@keyframes spin {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }
`;
document.head.appendChild(style);

// Initialize tooltips
$(document).ready(function() {
    // Initialize Bootstrap tooltips if available
    if (typeof bootstrap !== 'undefined' && bootstrap.Tooltip) {
        $('[title]').tooltip();
    }

    // Add hover effects for better interactivity
    $('.pool-card').hover(
        function() {
            $(this).addClass('shadow-lg');
        },
        function() {
            $(this).removeClass('shadow-lg');
        }
    );

    // Add click tracking for analytics (optional)
    $('.quick-actions .btn').click(function() {
        const action = $(this).attr('title') || $(this).text();
        console.log(`Pool action clicked: ${action}`);
    });
});
</script>
